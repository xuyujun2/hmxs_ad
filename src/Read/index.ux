<import name="shortcut-btn" src="../Base/shortcut-btn"></import>
<import name="read-dashboard" src="./read-dashboard"></import>
<import name="user-stay" src="./user-stay"></import>
<import name="shortcut-warning" src="./shortcut-warning"></import>
<import name="recharge-notice" src="./recharge-notice"></import>
<import name="pop-order" src="../Base/pop-order"></import>
<import name="back-baidu" src="../Base/back-baidu"></import>
<import name="listen-loading" src="./listen-loading"></import>
<import name="shortcut-success" src="../Base/shortcut-success"></import>
<import name="read-text-link" src="./read-text-link"></import>
<import name="ad-union" src="../AdUnion/index"></import>
<import name="shortcut-award" src="./shortcut-award"></import>
<import name="hanging-holder" src="./hanging-holder"></import>
<import name="pay-advance" src="./pay-advance"></import>
<import name="open-screen" src="./open-screen"></import>
<import name="user-stay-detail" src="./user-stay-detail.ux"></import>
<import name="paid-tag" src="../Component/tag.ux"></import>
<import name="onekey-shortcut" src="../Base/onekey-shortcut"></import>
<import name="once-price" src="../Base/once-price"></import>
<import name="read-progress" src="./read-progress"></import>
<import name="read-reward-pop" src="./read-reward-pop"></import>
<import name="onekey-shortcut-new" src="../Base/onekey-shortcut-new"></import>
<import name="adwall-entry-popup" src="./AdWallEntryPopup.ux"></import>
<import name="top-adwall-entry" src="./TopAdWallEntry.ux"></import>
<import name="chapter-end-rec" src="./chapter-end-rec"></import>
<import name="chapter-end-redenvelopes" src="./chapter-end-redenvelopes"></import>
<import name="back-gdt" src="./back-gdt"></import>
<import name="complaint-pop-up" src="./complaint-pop-up.ux"></import>
<import name="listen-pop" src="./listen-pop.ux"></import>

<template>
    <div id="readWrap" class="page_wrap" style="{{ hasSetupJsonLoad ? 'background-color: ' + (setupJson['bNight'] ? nightColor : setupJson.bgColor) + ';' : '' }}">
        <list if="{{!(isSupportNewReader && readType == 'page')}}" id="readList" class="read_box" style="{{ hasSetupJsonLoad ? 'background-color: ' + (setupJson['bNight'] ? nightColor : setupJson.bgColor) + ';' : '' }}" @scroll="fnScrollPositionHandle">
            <list-item type="read_title">
                <div class="read_tit">
                    <text style="font-size:50px;font-weight:bold;color:{{setupJson['bNight']?nightFontColor:'#333'}};lines:1;text-overflow: ellipsis;margin-top:36px">{{chapterName}}</text>
                </div>
            </list-item>
            <list-item type="ad">
                <ad-union
                    if="isTopAdShow && hasLoadChapter && !isNoAd && hasReadTypeSwitch"
                    ad-unit-id="{{ topAdId }}"
                    ad-type="message"
                    ad-alias="readTop"
                    ad-setup="{{ setupJson }}"
                    book-id="{{ bookId }}"
                    book-name="{{ bookName }}"
                    chapter-id="{{ chapterId }}"
                    chapter-name="{{ chapterName }}"
                    chapter-index="{{ chapterIndex }}"
                    no-ad-vip-switch="{{ noAdVipSwitch }}"
                    other-info="{{ topAdTactics }}"
                    brand-ad-switch="{{ brandAdSwitch }}"
                    onChangeWebShow="fnChangeWebShow"
                    onChangeAppShow="fnChangeAppShow"
                    onstart-count="fnStartCount"
                    onstop-count="fnStopCount"
                    onclose-pop-show="fnClosePopShow"
                    onclose-pop-close="fnClosePopClose"
                ></ad-union>
            </list-item>
            <list-item type="read_content_{{index == chapterMiddleIndex}}_{{brand=='huawei'||brand=='honor'?index:''}}_{{fontSizeIndex}}_{{colorIndex}}" class="read_content" for="(index, item) in chapterContent">
                <text @click="fnCallDashboard" class="{{(minIndex<=index&&index<maxIndex||minIndex==index&&minIndex==maxIndex)&&isListen?setupJson.bNight?'high_light_night':'high_light':''}}" style="font-size:{{setupJson.fontSize}}px; line-height:{{setupJson.lineheight}}px;color:{{setupJson['bNight']?nightFontColor:'#333'}}">
                    <span class="text_indent_span" style="font-size:{{setupJson.fontSize}}px; line-height:{{setupJson.lineheight}}px;">一一</span>
                    <span style="font-size:{{setupJson.fontSize}}px; line-height:{{setupJson.lineheight}}px;color:{{setupJson['bNight']?nightFontColor:'#333'}}">{{item}}</span>
                </text>
                <ad-union
                    if="index == chapterMiddleIndex && isMiddleAdShow && hasLoadChapter && scrollToLoadPosition && !isNoAd && hasReadTypeSwitch"
                    ad-unit-id="{{ middleAdId }}"
                    ad-type="message"
                    ad-alias="readMiddle"
                    ad-setup="{{ setupJson }}"
                    book-id="{{ bookId }}"
                    book-name="{{ bookName }}"
                    chapter-id="{{ chapterId }}"
                    chapter-name="{{ chapterName }}"
                    chapter-index="{{ chapterIndex }}"
                    no-ad-vip-switch="{{ noAdVipSwitch }}"
                    other-info="{{ middleAdTactics }}"
                    brand-ad-switch="{{ brandAdSwitch }}"
                    onChangeWebShow="fnChangeWebShow"
                    onChangeAppShow="fnChangeAppShow"
                    onstart-count="fnStartCount"
                    onstop-count="fnStopCount"
                    onclose-pop-show="fnClosePopShow"
                    onclose-pop-close="fnClosePopClose"
                ></ad-union>
            </list-item>
            <list-item type="text-link">
                <read-text-link if="{{textLinkShouldShow}}" text-link="{{textLink}}" book-id="{{bookId}}" chapter-id="{{chapterId}}" chapter-index="{{chapterIndex}}" operation-name="{{textLinkOperationName}}" user-tactics-vo="{{textLinkUserTacticsVo}}" night="{{setupJson['bNight']}}" book-name="{{bookName}}"></read-text-link>
            </list-item>
            <list-item type="logo" class="logo-warp">
                <block if="buttonTip&&buttonTip.length">
                    <text style="color:{{setupJson['bNight']?nightFontColor:''}};">{{buttonTip[0]}}</text>
                    <stack if="{{buttonTip[1]}}">
                        <image src="../Common/logo.png"></image>
                        <div if="{{setupJson['bNight']}}"></div> 
                    </stack>
                    <text if="{{buttonTip[1]}}" style="color:{{setupJson['bNight']?nightFontColor:''}};">【{{appName}}】</text>
                    <text if="{{buttonTip[2]}}" style="color:{{setupJson['bNight']?nightFontColor:''}};">{{buttonTip[2]}}</text>
                </block>
                <block else>
                    <text style="color:{{setupJson['bNight']?nightFontColor:''}};">欢迎使用</text>
                    <stack>
                        <image src="../Common/logo.png"></image>
                        <div if="{{setupJson['bNight']}}"></div> 
                    </stack>
                    <text style="color:{{setupJson['bNight']?nightFontColor:''}};">【{{appName}}】</text>
                    <text style="color:{{setupJson['bNight']?nightFontColor:''}};">阅读本书</text>
                </block>
            </list-item>
            <list-item type="read_next" if="{{ isBookMainShow }}">
                <text class="read_next_chapter {{setupJson['bNight']?'read_next_chapter_night':''}}" @click="fnNextChapter('','')">下一章</text>
            </list-item>
            <list-item type="read_other" if="{{ isBookMainShow }}" class="read_other">
                <text class="{{setupJson['bNight']?'read_parent_chapter_night':'read_parent_chapter'}}" @click="fnPrevChpter()">上一章</text>
                <text class="{{setupJson['bNight']?'read_other_border_night':'read_other_border'}}"> | </text>
                <text class="{{setupJson['bNight']?'read_directory_night':'read_directory'}}" @click="routerurl('/Directory')">目录</text>
                <text class="{{setupJson['bNight']?'read_other_border_night':'read_other_border'}}" if="{{isshareB != 2 && sgetprovider && butShareshow}}"> | </text>
                <text class="{{setupJson['bNight']?'read_share_but_night':'read_share_but'}}" @click="listshare(true)" if="{{isshareB != 2 && sgetprovider && butShareshow}}">分享给好友</text>
            </list-item>
            <list-item type="read_recommend" class="book-wrap {{ setupJson['bNight'] ? 'book-wrap-night' : '' }}" if="{{ dbRecommend.isReady && readType=='list'}}">
                <div class="title">
                    <image src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/hmxs/like-icon-night.png' : 'https://xsmfdq.kkyd.cn/images/hmxs/like-icon.png'}}"></image>
                    <text style="color: {{setupJson['bNight'] ? 'rgba(255, 255, 255, 0.6)' : '#333333'}}">看过本书的人还喜欢</text>
                </div>
                <block for="{{dbRecommend.books}}" if="{{$idx<=0}}">
                    <div class="book" @appear="fnBookAppear($item, $idx)" @click="fnRouteToBookDetail($item, $idx)">
                        <image class="cover" src="{{$item.coverWap}}"></image>
                        <div class="book-detail">
                            <div class="book-name-btn">
                                <text class="book-name" style="color: {{setupJson['bNight'] ? 'rgba(255, 255, 255, 0.6)' : 'rgba(51, 51, 51, 1)'}};">{{ $item.bookName }}</text>
                                <text class="btn {{ $item.inBookshelf && setupJson['bNight'] ? 'btn-night-on-book-shelf' : ($item.inBookshelf && !setupJson['bNight'] ? 'on-book-shelf' : (!$item.inBookshelf && setupJson['bNight'] ? 'btn-night' : '')) }}" @click="fnAddBookshelfRec($item, $idx)">{{ $item.inBookshelf ? '已加书架' : '加入书架' }}</text>
                            </div>
                            <text class="des" style="color: {{setupJson['bNight'] ? 'rgba(255, 255, 255, 0.3)' : 'rgba(102, 102, 102, 1)'}};">{{ $item.introduction }}</text>
                            <div class="tag">
                                <text class="tag1" if={{$item.twoTypeName}} style="color: {{setupJson['bNight'] ? 'rgba(255, 255, 255, 0.3)' : 'rgba(102, 102, 102, 1)'}};">{{ $item.twoTypeName }}</text>
                                <text class="tag2" if="{{$item.threeTypeName}}" style="color: {{setupJson['bNight'] ? 'rgba(255, 255, 255, 0.3)' : 'rgba(102, 102, 102, 1)'}};">{{ $item.threeTypeName }}</text>
                            </div>
                        </div>
                    </div>
                </block>
            </list-item>
        </list>
        <div if="{{isSupportNewReader && readType == 'page'}}" class="tab-container" style="{{ hasSetupJsonLoad ? 'background-color: ' + (setupJson['bNight'] ? nightColor : setupJson.bgColor) + ';' : '' }}">
            <swiper id="swiper" if="{{showSwiper && contentArr && contentArr.length}}" class="tab" index="{{pageNum}}" loop="{{false}}" indicator="{{false}}" @change="fnSwiperChange" @click="fnPageOperate('click')">
                <block for="{{(cindex, cItem) in contentArr}}">
                    <div if="{{(cItem.type == 'content' || cItem.type == 'blank') && showSlider}}" class="page-wrapper" @appear="fnContentAppear(cItem)" @click="fnContentClick">
                        <text for="{{(index, content) in cItem.content}}" class="page-text {{(index == 0 && (hasPreChapter && cindex == 1 || !hasPreChapter && cindex == 0)) ? 'page-text-title' : ''}}" style="font-size: {{setupJson.fontSize}}px; height: {{setupJson.lineheight}}px; line-height: {{setupJson.lineheight}}px; color:{{setupJson['bNight'] ? nightFontColor : '#333'}}">{{content}}</text>
                        <text class="page-text-block"></text>
                    </div>
                    <div if="{{cItem.type === 'preAd' && showSlider}}" class="page-wrapper-block" @appear="fnPreAdBlockShow" style="background-color: {{setupJson['bNight'] ? nightColor : setupJson.bgColor}};"></div>
                    <div if="{{cItem.type === 'ad' && showSlider}}" class="page-wrapper-block" style="background-color: {{setupJson['bNight'] ? nightColor : setupJson.bgColor}};"></div>
                </block>
            </swiper>
        </div>
        <div class="banner-wrap" style="{{ hasSetupJsonLoad ? 'background-color: ' + (setupJson['bNight'] ? nightColor : setupJson.bgColor) + ';' : '' }}">
            <stack class="banner-stack">
                <image class="banner-back" src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/hmxs/banner-bg-night.png' : ('https://xsmfdq.kkyd.cn/images/hmxs/banner-bg-' + setupJson['bgColorIndex'] + '.png')}}"></image>
                <stack class="banner-page-info" if="{{isSupportNewReader && readType == 'page'}}">
                    <div class="page-info-box">
                        <text class="page-info {{setupJson['bNight'] ? 'page-info-night' : ''}}">{{(hasPreChapter ? currentPage : (+currentPage + 1)) + '/' + (hasPreChapter ? (contentArr.length - 2 > 0 ? contentArr.length - 2 : 0) : (contentArr.length - 1 > 0 ? contentArr.length - 1 : 0))}}</text>
                        <text class="page-info {{setupJson['bNight'] ? 'page-info-night' : ''}}">{{chapterIndex + (maxChapter && maxChapter > 0 ? '/' + maxChapter : '')}}</text>
                    </div>
                    <div class="menu-box {{setupJson['bNight'] ? 'night-menu-box' : ''}}" @click="fnCallDashboard">
                        <image class="img" src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/hmxs/menu-night.png' : 'https://xsmfdq.kkyd.cn/images/hmxs/read-bottom-menu.png'}}"></image>
                        <text class="text {{setupJson['bNight'] ? 'night-text' : ''}}">菜单</text>
                    </div>
                </stack>
                <ad-union
                    if="bottomAdSwitch && !isNoAd && (bannerAdRepeatSwitch || isBottomAdShow)"
                    banner-ad-show="{{!isOpenScreenShow && !payAdvance && !oncePriceShow && !orderShow && !isReadVideoShow && !isReadAdShow && !isInsertVideoShow && !isInsertAdShow && !isAwardVideoShow && !isAwardAdShow && !isPreVideoShow && !isPreAdShow && !isPreNextVideoShow && !isPreNextAdShow && !bShowDashboard && !isAuthShortcutPopShow && !readRewardPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !isNewReaderMask}}"
                    is-ad-show="{{ !isBackAdPopShow && !isOpenScreenShow && !payAdvance && !oncePriceShow && !orderShow && !isReadVideoShow && !isReadAdShow && !isInsertVideoShow && !isInsertAdShow && !isAwardVideoShow && !isAwardAdShow && !isPreVideoShow && !isPreAdShow && !isPreNextVideoShow && !isPreNextAdShow && !bShowDashboard && !isAuthShortcutPopShow && !readRewardPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !isNewReaderMask }}"
                    ad-unit-id="{{ bottomAdId }}"
                    ad-type="banner"
                    ad-alias="readBanner"
                    ad-setup="{{ setupJson }}"
                    ad-height="{{ propObj.height }}"
                    book-id="{{ bookId }}"
                    book-name="{{ bookName }}"
                    chapter-id="{{ chapterId }}"
                    chapter-name="{{ chapterName }}"
                    chapter-index="{{ chapterIndex }}"
                    other-info="{{ bottomAdTactics }}"
                    repeat-time="{{ bottomAdTimes }}"
                    is-repeat="{{ bannerAdRepeatSwitch ? isBannerAdRepeat : false }}"
                    banner-ad-repeat-switch = "{{ bannerAdRepeatSwitch }}"
                    pre-time="{{ bottomAdPreTimes }}"
                    show-times="{{ showTimes }}"
                    no-ad-vip-switch="{{ noAdVipSwitch }}"
                    brand-ad-switch="{{ brandAdSwitch }}"
                    current-page="{{ currentPage }}"
                    onclose-pop-show="fnClosePopShow"
                    onclose-pop-close="fnClosePopClose"
                ></ad-union>
            </stack>
        </div>
        <div if="{{isPreAdBlockShow && preAdSwitch && chapterIndex === 1 && contentArr && contentArr.length && showSwiper && showSlider && readType=='page'}}" class="page-wrapper-ad" style="height: {{isPreAdPage && !isBackAdPopShow && !isOpenScreenShow && !readRewardPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !isAuthShortcutPopShow && !adWallEntryPopup.show ? propObj.height + 'px' : '0px'}}; background-color: {{setupJson['bNight'] ? nightColor : setupJson.bgColor}};" @touchmove="fnTouchMove" @touchend="fnPageOperate('touchend')">
            <ad-union
                ad-unit-id="{{ preAdId }}"
                ad-type="pre"
                ad-alias="readPre"
                book-id="{{ bookId }}"
                book-name="{{ bookName }}"
                chapter-id="{{ chapterId }}"
                chapter-name="{{ chapterName }}"
                chapter-index="{{ chapterIndex }}"
                other-info="{{ preAdTactics }}"
                ad-height="{{ propObj.height }}"
                no-ad-vip-switch="{{ noAdVipSwitch }}"
                brand-ad-switch="{{ brandAdSwitch }}"
                ad-setup="{{ setupJson }}"
                current-page="{{ currentPage }}"
                ad-page="{{ 0 }}"
                is-open-show="{{ isOpenScreenShow }}"
                is-ad-show="{{ isPreAdPage && !isBackAdPopShow && !isOpenScreenShow && !readRewardPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !isAuthShortcutPopShow && !adWallEntryPopup.show }}"
                onChangeWebShow="fnChangeWebShow"
                onChangeAppShow="fnChangeAppShow"
                onstart-count="fnStartCount"
                onstop-count="fnStopCount"
                onclose-pop-show="fnClosePopShow"
                onclose-pop-close="fnClosePopClose"
            ></ad-union>
            <div class="next-btn {{setupJson['bNight'] ? 'next-btn-night' : ''}}">
                <image class="next-image" src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/next-page-arraw-night.png' : 'https://xsmfdq.kkyd.cn/images/next-page-arraw.png'}}" style="opacity: {{setupJson['bNight'] ? '0.5' : '1'}}"></image>
                <text class="next-text {{setupJson['bNight'] ? 'night-next-text' : ''}}">向左滑动阅读正文</text>
            </div>
        </div>
        <div if="{{insertAdSwitch && contentArr && contentArr.length && swiperInit && showSwiper && showSlider && readType=='page'}}" class="page-wrapper-ad" style="height: {{currentPage === currentInsertIndex && !isBackAdPopShow && !isOpenScreenShow && !readRewardPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !isAuthShortcutPopShow && !adWallEntryPopup.show && !isWarning ? propObj.height + 'px' : '0px'}}; background-color: {{setupJson['bNight'] ? nightColor : setupJson.bgColor}};" @touchmove="fnTouchMove" @touchend="fnPageOperate('touchend')">
            <text class="insert-tips {{setupJson['bNight'] ? 'night-insert-tips' : ''}}">广告是为了更好的支持正版</text>
            <ad-union
                if="isInsertAdPage && readerCount === currentInsertCount && insertMinPage > -1 && insertMaxPage > -1 && currentPage >= insertMinPage && currentPage <= insertMaxPage"
                ad-unit-id="{{ currentInsertAd || '5001232911'}}"
                ad-type="insert"
                ad-alias="readInsert"
                book-id="{{ bookId }}"
                book-name="{{ bookName }}"
                chapter-id="{{ chapterId }}"
                chapter-name="{{ chapterName }}"
                chapter-index="{{ chapterIndex }}"
                other-info="{{ insertAdTactics }}"
                ad-height="{{ propObj.height }}"
                pre-num="{{ insertAdPreLoad }}"
                no-ad-vip-switch="{{ noAdVipSwitch }}"
                brand-ad-switch="{{ brandAdSwitch }}"
                ad-setup="{{ setupJson }}"
                current-page="{{ currentPage }}"
                ad-page="{{ currentInsertIndex }}"
                is-ad-show="{{ currentPage === currentInsertIndex && !isBackAdPopShow && !isOpenScreenShow && !readRewardPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !isAuthShortcutPopShow && !adWallEntryPopup.show && !isWarning }}"
                onChangeWebShow="fnChangeWebShow"
                onChangeAppShow="fnChangeAppShow"
                onstart-count="fnStartCount"
                onstop-count="fnStopCount"
                onclose-pop-show="fnClosePopShow"
                onclose-pop-close="fnClosePopClose"
            ></ad-union>
            <block if="isInsertAdPage && readerCount === currentInsertCount && currentPage === currentInsertIndex">
                <div if="insertVideoNums && insertVideoNums > 0 && canInsertVideoShow && (readTipCurrentShowTimes > readTipShowTimes || readTipShowTimes <= 0)" class="insert-video-box" @touchstart="fnInsertVideoTouch" @click="fnInsertVideoClick" @appear="fnOperationExposure('insertVideo')">
                    <image if="insertVideoImage" class="insert-video-image" src="{{insertVideoImage}}" @click="fnInsertVideo(false)"></image>
                    <text else class="insert-video-text" @click="fnInsertVideo(false)">看视频最高领100金币</text>
                </div>
                <div else class="next-btn {{setupJson['bNight'] ? 'next-btn-night' : ''}}" @appear="fnReadTipAppear">
                    <image class="next-image" src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/next-page-arraw-night.png' : 'https://xsmfdq.kkyd.cn/images/next-page-arraw.png'}}" style="opacity: {{setupJson['bNight'] ? '0.5' : '1'}}"></image>
                    <text class="next-text" style="color: {{setupJson['bNight'] ? '#999999' : '#555555'}}">向左滑动阅读正文</text>
                </div>
            </block>
        </div>
        <div class="page-wrapper-rec" if="{{isShowRecommend && readType=='page' && !adWallEntryPopup.show && !isWarning}}" style="height: {{propObj.height + 'px'}}; background-color: {{setupJson['bNight'] ? nightColor : setupJson.bgColor}};"  @touchmove="fnTouchMove" @touchend="fnPageOperate('touchend')">
            <chapter-end-rec @click="fnRecClick" setup-json="{{ setupJson }}" zm-rec-obj="{{ dbRecommend }}"></chapter-end-rec>
            <div class="next-btn">
                <image class="next-image" src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/next-page-arraw-night.png' : 'https://xsmfdq.kkyd.cn/images/next-page-arraw.png'}}" style="opacity: {{setupJson['bNight'] ? '0.5' : '1'}}"></image>
                <text class="next-text" style="color: {{setupJson['bNight'] ?  '#999999' : '#555555'}};">向左滑动阅读正文</text>
            </div>
        </div>
        <!-- 章末红包奖励 -->
        <div class="page-wrapper-rec" if="{{isShowRedEnvelopes && readType=='page' && !adWallEntryPopup.show && !isWarning}}" style="height: {{propObj.height + 'px'}}; background-color: {{setupJson['bNight'] ? nightColor : setupJson.bgColor}};"  @touchmove="fnTouchMove" @touchend="fnPageOperate('touchend')"  @appear="fnOperationExposure('aliPayRedVideo')">
            <chapter-end-redenvelopes task-array="{{ chapterEndRedTask.awardArray }}" title="{{ aliPayRedTitle }}" click-completed-num="{{ chapterEndRedTask.clickCompletedNum }}" @click="fnRecClick" @cer-click="fnCerClick"></chapter-end-redenvelopes>
            <div class="next-btn">
                <image class="next-image" src="{{setupJson['bNight'] ? 'https://xsmfdq.kkyd.cn/images/next-page-arraw-night.png' : 'https://xsmfdq.kkyd.cn/images/next-page-arraw.png'}}" style="opacity: {{setupJson['bNight'] ? '0.5' : '1'}}"></image>
                <text class="next-text" style="color: {{setupJson['bNight'] ?  '#999999' : '#555555'}};">向左滑动阅读正文</text>
            </div>
        </div>
        <read-dashboard 
            if="{{bShowDashboard && !orderShow && !diaLoadingShow && !authShow && !isOpenScreenShow && !payAdvance && !oncePriceShow}}"
            is-in-book-shelf="{{isInBookShelf}}"
            is-listen="{{isListen}}"
            speed-list="{{speedList}}"
            timbre-list="{{timbreList}}"
            default-timbre="{{defaultTimbre}}"
            default-speed="{{defaultSpeed}}"
            book-id="{{bookId}}"
            book-name="{{bookName}}"
            chapter-id="{{chapterId}}"
            listen-time="{{listenTime}}"
            can-listen="{{canListen}}"
            listen-switch="{{listenSwitch}}"
            extra-listen-switch="{{extraListenSwitch}}"
            listen-task="{{listenTask}}"
            listen-pay-flag="{{listenPayFlag}}"
            read-type="{{readType}}"
            can-change-read-type="{{isSupportNewReader && readTypeSwitch}}" 
            setup-json="{{setupJson}}"
            is-share="{{isshareB != 2 && sgetprovider && butShareshow}}"
            @show-listen-pop="fnListenPopShow"
            @router-to-directory="fnRouterToDirectory"
            @prev-click="fnPrevClick"
            @next-click="fnNextClick"
            @color-change="fnChangeColor"
            @fontsize-change="fnChangeFontsize"
            @refresh-reader="fnRefreshReader"
            @button-click="fnListenButtonClick"
            @start-listen="startListen"
            @exit-listen="exitListen"
            @start-listen-timeout="fnStartListenTimeout"
            @close-listen-timeout="fnCloseListenTimeout"
            @more-timbre="moreTimbre"
            @re-play-audio="rePlayAudio"
            @page-back-press="pageBackPress"
            @change-dashboard="fnCallDashboard"
            @share="fnDashboardShare"
            @change-setup-json="fnChangeSetupJson"
            @change-read-type="fnChangeReadType"
            @add-book-shelf="fnAddBookShelf"
        ></read-dashboard>
        <div if="!isOpenScreenShow && isNewReaderMask && canShowNewReaderMask && !isAuthShortcutPopShow" class="reader-mask" @touchend="fnNewReaderMaskHide">
            <image class="reader-mask-image" src="https://xsmfdq.kkyd.cn/images/new-reader-mask.png"></image>
        </div>
        <!-- 签到分享弹框 -->
        <div class="sign_popup_box" if="{{shareshow && sitenum=='2'}}">
            <div class="spb_main">
                <div class="spb_close_box">
                    <div class="spb_close" @click="closepopupshow"></div>
                </div>
                <div class="spb_content">
                    <text class="spb_h1"><span class="span_1">分享失败</span></text>
                    <text class="spb_desc"><span class="span_1">重新分享继续阅读</span></text>
                    <div class="spb_bginfo spbbg_2"></div>
                    <div class="spb_but_box">
                        <text class="spb_but" @click="listshare(false)"></text>
                        <text class="spb_but spb_but_2" @click="fnLodeChapterInfo(bookId,osharenext.ochapterId,osharenext.sharenext)"></text>
                    </div>
                </div>
            </div>
        </div>
        <!-- 阅读页退出弹层 -->
        <div class="back_popup_box" if="{{backBtnDialog}}" @click="vagueClick">
            <div class="back_main">
                <div class="back_close_box">
                    <div class="back_close" @click="closeBackBox"></div>
                </div>
                <div class="back_content">
                    <text class="back-title">添加到手机桌面，方便下次阅读</text>
                    <image class="back_content_img" src="https://xsmfdq.kkyd.cn/images/{{defaultChannelCode}}-readback-icon.png"></image>
                    <block if="{{cutSupport.vivoSupport || cutSupport.oppoSupport || cutSupport.huaweiSupport}}">
                        <onekey-shortcut-new 
                            btnwidth="540px" 
                            btnheight="90px" 
                            btnfontsize="36px" 
                            btnradius="90px" 
                            btncolor="#ffffff" 
                            btnbgcolor="#E74260"
                            buttexto="去添加"
                            buttextv="添加桌面"
                            cut-support="{{cutSupport}}" 
                            chapter-index="{{chapterIndex}}"
                            position="readback"
                            book-id="{{ bookId }}"
                            @oneshortcomplete="{{oneshortComplete}}"
                            >
                        </onekey-shortcut-new>
                    </block>
                    <text else class="back-btn" @click="clickShowShortCut">去添加</text>
                </div>
            </div>
        </div>
        <div class="share_popup_box" if="{{shareshow && sitenum=='1'}}">
            <div class="sob_xq"></div>
            <div class="sobr_box">
                <div class="sobr_tit">
                    <text class="sobrt_txt">购买章节</text>
                    <div class="sobrt_close" @click="closepopupshow"></div>
                </div>
                <text class="sobr_title">{{nextChapterName}}</text>
                <text class="sobr_why_txt">书币余额不足</text>
                <div class="sobr_free_box">
                    <text class="sobrf_text">免费看本章</text>
                    <text class="sobrf_but" @click="listshare(false)">去分享</text>
                </div>
                <text class="sobr_share_but" @click="fnLodeChapterInfo(bookId,osharenext.ochapterId,osharenext.sharenext)">余额不足，去充值</text>
            </div>
        </div>
        <!-- 分享box -->
        <div class="share_popup_box" if="{{sharetabshow}}">
            <div class="sob_xq"></div>
            <div class="sob_box">
                <div class="sob_main">
                    <div class="sobm_li" @click="sharefriends">
                        <image src="https://xsmfdq.kkyd.cn/html/images/new_my/icon_15.png" class="sobml_img"></image>
                        <text>分享给好友</text>
                    </div>
                    <div class="sobm_li" @click="sharecircle">
                        <image src="https://xsmfdq.kkyd.cn/html/images/new_my/icon_16.png" class="sobml_img"></image>
                        <text>分享到朋友圈</text>
                    </div>
                </div>
                <text class="sob_close" @click="closetabshow">取消分享 </text>
            </div>
        </div>
        <!-- 加载中弹层 -->
        <div class="dialog_loading" if="{{diaLoadingShow&&!isOpenScreenShow}}" style="background-color:{{setupJson['bNight'] ? nightColor : setupJson.bgColor}};">
            <div class="dia_txt">
                <text class="top_t"></text>
                <div class="load_img_div"><image class="load_img" src="{{setupJson['bNight'] ? nightloadImg : setupJson.loadImg}}"></image></div>
                <text show="{{!diaLoadErrShow}}" style="color:{{setupJson['bNight']?'#ffffff':'#333'}}">正在加载，请稍后......</text>
                <text show="{{diaLoadErrShow}}" style="color:{{setupJson['bNight']?'#ffffff':'#333'}}">网络出错，请点击按钮重新加载</text>
                <div show="{{diaLoadErrShow}}" class="dia_reload_btn" @click="clickreload"><text>重新加载</text></div>
            </div>
        </div>
        <block if="{{!isCloseAddDesk && !isAuthShortcutShow && !adWallEntryPopup.show}}">
            <block if="{{rpbt&&rpbt.length&&(cutSupport.vivoSupport||cutSupport.oppoSupport||cutSupport.huaweiSupport)}}">
                <onekey-shortcut is-add-desk-btn-close="{{isAddDeskBtnClose}}" cut-support="{{cutSupport}}" frompage="read" systemtext="{{btnSysText||systemInText}}" destext="{{onekeyDestext}}" isshortcutshow="{{!(isPreAdPage && hideOnekeyShortcutInPre)&&isShortCutShow&&!bShowDashboard&&!isWarning&&!orderShow&&!hasShowSuccess&&hasGetSetting&&!payAdvance&&!oncePriceShow&&!isOpenScreenShow}}" buttext="{{onekeyBtnText}}" chapter-index="{{chapterIndex}}" book-id="{{ bookId }}" @togglebtn="toggleBtn" @showshortsuccess="showShortSuccess" @vivopush="fnVivoPush('shortcut')" @close-add-desk="fnCloseAddDesk"></onekey-shortcut>
            </block>
            <block else>
                <shortcut-btn is-add-desk-image-close="{{isAddDeskImageClose}}" shortbtntype="{{shortbtnType}}" frompage="read" systemtext="{{btnSysText||systemInText}}" isshortcutshow="{{!(isPreAdPage && hideShortcutInPre)&&isShortCutShow&&!bShowDashboard&&!isWarning&&!orderShow&&!hasShowSuccess&&hasGetSetting&&!payAdvance&&!oncePriceShow&&!isOpenScreenShow}}" buttext="{{btnText}}" chapter-index="{{chapterIndex}}" book-id="{{ bookId }}" @togglebtn="toggleBtn" @showshortsuccess="showShortSuccess" @vivopush="fnVivoPush('shortcut')" @close-add-desk="fnCloseAddDesk"></shortcut-btn>
            </block>
        </block>
        <!-- 旧拦截 -->
        <user-stay if="{{userStay && (userStayType == 3) }}" @closeuserstay="closeUserStay" book-id="{{bookId}}" book-list="{{bookList}}" stay-operation="{{stayOperation}}" stay-tactics-vo="{{stayTacticsVo}}" chapter-id="{{chapterId}}" chapter-index="{{chapterIndex}}" book-name="{{bookName}}"></user-stay>
        <!-- 新拦截 -->
        <user-stay-detail if="{{userStayDetail && (userStayType == 1)}}" @closeuserstay="closeUserStay" book-id="{{bookId}}" book-info="{{bookInfo}}" stay-operation="{{stayOperation}}" stay-tactics-vo="{{stayTacticsVo}}" chapter-id="{{chapterId}}" book-name="{{bookName}}"></user-stay-detail>
        <shortcut-warning if="isWarning" cut-support="{{cutSupport}}" warning-level="{{warningLevel}}" chapter-index="{{chapterIndex}}" @downloadapk="downloadApk" @shortconfirm="shortConfirm" @warning-close="fnWarningClose" @oneshortcomplete="{{oneshortComplete}}"></shortcut-warning>
        <recharge-notice if="{{rechargeShow}}" chapter="{{rechargeObj.chapter}}" price="{{rechargeObj.price}}" coin="{{rechargeObj.coin}}" @to-recharge="toRecharge"  @hide-notice="hideNotice"></recharge-notice>
        <pop-order if="{{orderShow}}" viptips="{{orderObj.viptips}}" unit="{{orderObj.unit}}" chapter="{{orderObj.chapter}}" price="{{orderObj.price}}" coin="{{orderObj.coin}}" enough="{{orderObj.enough}}" bookid="{{bookId}}" bookname="{{orderObj.bookname}}"  @to-recharge-auto="toRechargeAuto" @close-orderpop="closeOrderpop"></pop-order>
        <listen-loading if="{{isListen&&!isPlaying&&isRequestTts||isListen&&!isPlaying&&ischangeset&&!isOpenScreenShow}}"></listen-loading>
        <shortcut-success if={{isShortpop}} type="{{shortType}}" success-tip-top="{{successTipTop}}" success-tip-bot="{{successTipBot}}" @closeshortpop='closeshortpop'></shortcut-success>
        <shortcut-award if="{{shortAwrad}}" systemtext="{{systemInText}}" chapter-index="{{chapterIndex}}" book-id="{{ bookId }}" book-name="{{ bookName }}" chapter-id="{{ chapterId }}" @close-award="fnCloseAward" @showshortsuccess="showShortSuccess"></shortcut-award>
        <!-- 阅读页悬浮挂件运营位 -->
        <hanging-holder if="{{!bShowDashboard&&hangingHolderShow&&!payAdvance&&!oncePriceShow&&!isOpenScreenShow&&!orderShow&&!isAuthShortcutPopShow}}" read-page-widget="{{readPageWidget}}" book-id="{{bookId}}" chapter-id="{{chapterId}}" chapter-index="{{chapterIndex}}" operation-name="{{hanggingHolderOperationName}}" night="{{setupJson['bNight']}}" user-tactics-vo="{{hanggingHolderUserTacticsVo}}" book-name="{{bookName}}" @route-hanging-close="routeHangingClose"></hanging-holder>
        <!-- 付费提前 -->
        <pay-advance if="{{payAdvance&&!isOpenScreenShow}}" bg-night="{{setupJson['bNight']?1:0}}" omap="{{ omap }}" book-id="{{ bookId }}" chapter-index="{{ chapterIndex }}" chapter-id="{{ chapterId }}" @close-advance="closeAdvance" @close-advance-sign="closeAdvanceSign" show-sign="{{ showAdvanceSign }}" before-pay-vo="{{beforePayVo}}" bg-color="{{setupJson['bNight'] ? nightColor : setupJson.bgColor}}"></pay-advance>
        <open-screen if="isOpenScreenShow" from-page="/Read" @close-open-screen-pop="fnCloseOpenScreenPop" @show-open-screen-pop="fnShowOpenScreenPop" @close-open-screen="fnCloseOpenScreen" @open-screen-back="fnOpenScreenBack" @need-double-open-ad="fnNeedDoubleOpenAd" @show-double-open-ad="fnShowDoubleOpenAd"></open-screen>
        <once-price if="{{oncePriceShow&&!isOpenScreenShow}}" book-id="{{bookId}}" chapter-id="{{chapterId}}" chapter-index="{{chapterIndex}}" omap="{{omap}}" give-up-pop-show={{giveUpPopShow}} price-info={{oncePriceInfo}} book-name= "{{ bookName }}" @close-once-price="fnCloseOncePrice" @give-up-show="fnGiveUpShow" @close-give-up="fnCloseGiveUp" @to-pop-order="fnToPopOrder"></once-price>
        <!-- 阅读任务进度条 -->
        <read-progress if="{{isReadProgressShow && !isOpenScreenShow && !isReadVideoShow && !isReadAdShow && !isInsertVideoShow && !isInsertAdShow && !isAwardVideoShow && !isAwardAdShow && !isPreVideoShow && !isPreAdShow && !isPreNextVideoShow && !isPreNextAdShow && !isAuthShortcutPopShow && !bShowDashboard && !aliPayRedVideoInfo.isAliPayRedVideoShow && !aliPayRedVideoInfo.isAliPayRedAdShow}}" type="{{ setupJson['bNight'] }}" task="{{ readTask }}" total="{{ readTotalTime }}" read-award-obj="{{ readAwardObj }}" read-award-text="{{ readAwardText }}" @enter-to-Award-center="fnEnterToAwardCenter"></read-progress>
        <!-- 阅读任务领取弹窗 -->
        <read-reward-pop if="{{readRewardPopShow && !isOpenScreenShow && !isReadVideoShow && !isReadAdShow && !isInsertVideoShow && !isInsertAdShow && !isPreVideoShow && !isPreAdShow && !isPreNextVideoShow && !isPreNextAdShow && !isAuthShortcutPopShow && !isPreVideoPopShow && !isPreVideoPackageShow && !isPreVideoAwardShow && !adWallEntryPopup.show && !aliPayRedVideoInfo.isAliPayRedVideoShow && !aliPayRedVideoInfo.isAliPayRedAdShow}}" read-task-Info="{{readTaskInfo}}" is-charge-book="{{isChargeBook}}" reward-ad-id="{{rewardAdId}}" reward-ad-switch="{{rewardAdSwitch}}" reward-ad-tactics="{{rewardAdTactics}}" book-id="{{bookId}}" book-name="{{bookName}}" chapter-id="{{chapterId}}" chapter-name="{{chapterName}}" chapter-index="{{chapterIndex}}" brand-ad-switch="{{brandAdSwitch}}"></read-reward-pop>
        <!-- 章首激励视频弹层 -->
        <stack if="isPreVideoPopShow && !adWallEntryPopup.show" @click="fnPreVideoSwitch" class="pre-video-pop" style="background-color: {{setupJson.bNight ? preVideoPopBg.night : preVideoPopBg['color' + setupJson.bgColorIndex]}}" @appear="fnOperationExposure('preVideoPop')">
            <image class="pre-video-pop-image" src="{{ preVideoImage ? preVideoImage : 'https://xsmfdq.kkyd.cn/images/hmxs/pre-video-pop.png' }}"></image>
            <text class="pre-video-pop-close">{{preVideoPopCount}}</text>
        </stack>
        <!-- 章首激励视频红包弹窗 -->
        <div if="isPreVideoPackageShow" class="pre-video-package" @appear="fnPreVideoPackageAppear">
            <image class="pre-video-close" @click="fnPreVideoPopClose" src="https://xsmfdq.kkyd.cn/images/hmxs/pre-video-close.png"></image>
            <stack class="pre-video-stack" @click="fnPreVideo">
                <image class="pre-video-bg" src="https://xsmfdq.kkyd.cn/images/hmxs/pre-video-package.png"></image>
                <div class="pre-video-box">
                    <text class="pre-video-num">{{ preVideoAwardNums }}</text>
                    <text class="pre-video-text">金币</text>
                </div>
                <stack class="pre-video-btn">
                    <image class="pre-video-btn-image" src="https://xsmfdq.kkyd.cn/images/hmxs/pre-video-btn.png"></image>
                    <text class="pre-video-btn-text">立即领取</text>
                </stack>
            </stack>
        </div>
        <!-- 章首激励视频奖励弹窗 -->
        <div if="isPreVideoAwardShow" class="pre-award-pop">
            <stack class="pre-award-stack">
                <image class="pre-award-image" src="https://xsmfdq.kkyd.cn/images/hmxs/pre-video-award-pop.png"></image>
                <image class="pre-award-close" @click="fnPreVideoAwardClose" src="https://xsmfdq.kkyd.cn/images/hmxs/pre-video-award-close.png"></image>
                <div class="pre-award-box ">
                    <text class="pre-award-num">{{ preVideoAwardNums }}</text>
                    <text class="pre-award-text">金币</text>
                </div>
                <text class="pre-award-withdraw" @click="fnRouterToSign">兑换3元到微信零钱></text>
                <stack class="pre-award-btn" if="preNextVideoSwitch" @click="fnPreNextVideo">
                    <image class="pre-award-btn-image" src="https://xsmfdq.kkyd.cn/images/hmxs/pre-video-award-btn.png"></image>
                    <text class="pre-award-btn-text">点击获得更多金币</text>
                </stack>
            </stack>
        </div>
        <div class="auth-shortcut-pop" if="{{hasAuthShortcutConfig && isAuthShortcutPopShow && !isAuthShortcutNewStyle && !isOpenScreenShow}}" @click="vagueClick">
            <div class="auth-content">
                <div class="auth-close">
                    <image @click="fnCloseAuthShortcut" src="https://xsmfdq.kkyd.cn/images/hmxs/auth-shortcut-close.png"></image>
                </div>
                <text class="auth-title">{{authShortcutInfo.titleTip}}</text>
                <text class="auth-desc {{authShortcutInfo.color ? 'auth-desc-color' : ''}}">{{authShortcutInfo.contentTip}}</text>
                <div class="auth-btn">
                    <onekey-shortcut-new 
                        btnwidth="686px" 
                        btnheight="90px" 
                        btnfontsize="32px" 
                        btnradius="44px" 
                        btncolor="#FFFFFF" 
                        btnbgcolor="#6D28F4"
                        buttexto="{{authShortcutInfo.btnTip}}"
                        buttextv="{{authShortcutInfo.btnTip}}"
                        cut-support="{{cutSupport}}" 
                        chapter-index="{{chapterIndex}}"
                        position="afterauth"
                        book-id="{{ bookId }}"
                        @oneshortcomplete="{{oneshortComplete}}">
                    </onekey-shortcut-new>
                </div>
            </div>
        </div>
        <div class="auth-shortcut-pop-new" if="{{hasAuthShortcutConfig && isAuthShortcutPopShow && isAuthShortcutNewStyle && !isOpenScreenShow}}" @click="vagueClick">
            <stack class="auth-content-stack">
                <image class="auth-content-bg" src="https://xsmfdq.kkyd.cn/images/hmxs/auth-shortcut-bg.png"></image>
                <image class="auth-content-new-close" @click="fnCloseAuthShortcut" src="https://xsmfdq.kkyd.cn/images/hmxs/auth-shortcut-new-close.png"></image>
                <div class="auth-content-wrap {{authShortcutInfo.awardNum ? 'auth-content-wrap-extra' : ''}}">
                    <block if="authShortcutInfo.awardNum" for="authShortcutInfo.awardArr">
                        <text class="auth-content-title {{authShortcutInfo.awardNum == $item ? 'auth-content-title-extra' : 'auth-content-title-light'}}">{{$item}}</text>
                    </block>
                    <block else>
                        <text class="auth-content-title">{{authShortcutInfo.awardTip}}</text>
                    </block>
                </div>
                <div class="auth-content-btn">
                    <onekey-shortcut-new 
                        btnwidth="448px" 
                        btnheight="110px" 
                        btnfontsize="48px" 
                        btnradius="66px" 
                        btncolor="#9D3E08" 
                        btnbgcolor="#FFD287"
                        buttexto="{{authShortcutInfo.btnTip}}"
                        buttextv="{{authShortcutInfo.btnTip}}"
                        cut-support="{{cutSupport}}" 
                        chapter-index="{{chapterIndex}}"
                        position="afterauth"
                        extra="award"
                        book-id="{{ bookId }}"
                        @oneshortcomplete="{{oneshortComplete}}">
                    </onekey-shortcut-new>
                </div>
            </stack>
        </div>
        <div class="click-pop-wrap" if="isClickShow" @click="fnOtherClick">
            <image class="click-pop-close" src="https://xsmfdq.kkyd.cn/images/ad-close-extra.png" @click="fnCancleClick"></image>
            <div class="click-pop-box">
                <text class="click-pop-content">即将跳转到第三方页面或应用</text>
                <div class="click-pop-btn">
                    <text class="click-pop-cancel" @click="fnCancleClick">取消</text>
                    <text class="click-pop-confirm" @click="fnConfirmClick">确认</text>
                </div>
            </div>
        </div>
        <div class="download-pop-wrap" if="isDownloadShow" @click="fnOtherClick">
            <image class="download-pop-close" src="https://xsmfdq.kkyd.cn/images/ad-close-extra.png" @click="fnCancleDownload"></image>
            <div class="download-pop-box" if="currentAdInfo.app_info_url && currentAdInfo.app_info_url != ''">
                <text class="download-pop-title">应用详情</text>
                <web class="download-pop-web" src="{{currentAdInfo.app_info_url}}"></web>
                <text class="download-pop-confirm" @click="fnConfirmDownload">立即下载</text>
                <text class="download-pop-cancle" @click="fnCancleDownload">放弃下载</text>
            </div>
            <div class="download-pop-box" else>
                <text class="download-pop-title">应用详情</text>
                <div class="download-pop-item" if="currentAdInfo.brand_name">
                    <text class="download-pop-item-title">应用程序：</text>
                    <text class="download-pop-item-content">{{currentAdInfo.brand_name}}</text>
                </div>
                <div class="download-pop-item" if="currentAdInfo.app_size">
                    <text class="download-pop-item-title">大小：</text>
                    <text class="download-pop-item-content">{{currentAdInfo.app_size}}</text>
                </div>
                <div class="download-pop-item" if="currentAdInfo.app_version">
                    <text class="download-pop-item-title">版本：</text>
                    <text class="download-pop-item-content">{{currentAdInfo.app_version}}</text>
                </div>
                <div class="download-pop-item" if="currentAdInfo.publisher">
                    <text class="download-pop-item-title">开发者：</text>
                    <text class="download-pop-item-content">{{currentAdInfo.publisher}}</text>
                </div>
                <div class="download-pop-item" @click="fnChangeWebShow" if="currentAdInfo.privacy_link">
                    <text class="download-pop-item-title">隐私政策：</text>
                    <image class="download-pop-arrow {{isWebShow ? 'download-pop-arrow-default' : 'download-pop-arrow-turn'}}" src="https://xsmfdq.kkyd.cn/images/ad-web-arrow.png"></image>
                </div>
                <web class="download-pop-web" if="isWebShow && currentAdInfo.privacy_link" src="{{currentAdInfo.privacy_link}}"></web>
                <div class="download-pop-item" @click="fnChangeAppShow" if="currentAdInfo.permission_link">
                    <text class="download-pop-item-title">应用权限：</text>
                    <image class="download-pop-arrow {{isAppShow ? 'download-pop-arrow-default' : 'download-pop-arrow-turn'}}" src="https://xsmfdq.kkyd.cn/images/ad-web-arrow.png"></image>
                </div>
                <web class="download-pop-web" if="isAppShow && currentAdInfo.permission_link" src="{{currentAdInfo.permission_link}}"></web>
                <text class="download-pop-confirm" @click="fnConfirmDownload">立即下载</text>
                <text class="download-pop-cancle" @click="fnCancleDownload">放弃下载</text>
            </div>
        </div>
        <div class="close-pop-wrap" if="isClosePopShow" @click="fnOtherClick" @appear="fnClosePopAppear">
            <stack class="close-pop-stack">
                <div class="close-pop-box">
                    <div class="close-pop-item" @click="fnRouterToMember">
                        <image class="close-pop-icon" src="https://xsmfdq.kkyd.cn/images/ad-close-pop-vip.png"></image>
                        <text class="close-pop-text">购买VIP免广告</text>
                    </div>
                    <div class="close-pop-line"></div>
                    <div class="close-pop-item" @click="fnConfirmClose">
                        <image class="close-pop-icon" src="https://xsmfdq.kkyd.cn/images/ad-close-pop-action.png"></image>
                        <text class="close-pop-text">关闭本次广告</text>
                    </div>
                    <div class="close-pop-line"></div>
                    <div class="close-pop-item" @click="fnShowComplaintPop">
                        <image class="close-pop-icon" src="https://xsmfdq.kkyd.cn/images/hmxs/complaint-ad.png"></image>
                        <text class="close-pop-text">举报广告</text>
                    </div>
                </div>
                <image class="close-pop-image" src="../Common/images/ad-close.png" @click="fnClosePopClose"></image>
            </stack>
        </div>
        <ad-union
            if="canLoadAdWall && hasLoadChapter"
            ad-unit-ids="{{ preLoadAds }}"
            ad-type="wall"
            ad-alias="adWallCache"
            is-cache-info="{{ isCacheInfo }}"
            other-info="{{ adWallParams }}"
            ad-wall-token="{{ adWallTip }}"
        ></ad-union>
        <block if="canReadVideoShow">
            <stack>
                <div class="read-video-mask" if="hasReadVideoShow"></div>
                <ad-union
                    ad-unit-id="{{ readVideoId }}" 
                    ad-type="video"
                    ad-alias="readVideo"
                    video-show="{{isReadVideoShow}}"
                    video-ad-show="{{isReadAdShow}}"
                    ad-init-function="readVideoInit"
                    video-close-function="readVideoClose"
                    ad-close-function="readAdClose"
                    onvideo-show="fnVideoShow"
                    onvideo-close="fnVideoClose"
                    onvideo-ad-show="fnVideoAdShow"
                    onvideo-ad-close="fnVideoAdClose"
                    onvideo-end="fnVideoEnd"
                    onvideo-load="fnVideoLoad"
                    onbrand-video-show="fnBrandVideoShow"
                    other-info="{{ readVideoInfo }}"
                    is-cache-info="{{ isCacheInfo }}"
                    request-time="{{ videoAdLoadLimit }}"
                    current-page="{{ currentPage }}"
                ></ad-union>
            </stack>
        </block>
        <ad-union
            if="insertVideoSwitch"
            ad-unit-id="{{ insertVideoId }}" 
            ad-type="video"
            ad-alias="insertVideo"
            video-show="{{isInsertVideoShow}}"
            video-ad-show="{{isInsertAdShow}}"
            ad-init-function="insertVideoInit"
            video-close-function="insertVideoClose"
            ad-close-function="insertAdClose"
            onvideo-show="fnVideoShow"
            onvideo-close="fnVideoClose"
            onvideo-ad-show="fnVideoAdShow"
            onvideo-ad-close="fnVideoAdClose"
            onvideo-end="fnVideoEnd"
            onbrand-video-show="fnBrandVideoShow"
            other-info="{{ insertVideoTactics }}"
            current-page="{{ currentPage }}"
        ></ad-union>
        <ad-union
            if="awardVideoSwitch"
            ad-unit-id="{{ awardVideoId }}" 
            ad-type="video"
            ad-alias="readAwardVideo"
            video-show="{{isAwardVideoShow}}"
            video-ad-show="{{isAwardAdShow}}"
            ad-init-function="awardVideoInit"
            video-close-function="awardVideoClose"
            ad-close-function="awardAdClose"
            onvideo-show="fnVideoShow"
            onvideo-close="fnVideoClose"
            onvideo-ad-show="fnVideoAdShow"
            onvideo-ad-close="fnVideoAdClose"
            onvideo-end="fnVideoEnd"
            onbrand-video-show="fnBrandVideoShow"
            other-info="{{ awardAdInfo }}"
            current-page="{{ currentPage }}"
        ></ad-union>
        <ad-union
            if="preVideoSwitch"
            ad-unit-id="{{ preVideoId }}" 
            ad-type="video"
            ad-alias="preVideo"
            video-show="{{isPreVideoShow}}"
            video-ad-show="{{isPreAdShow}}"
            ad-init-function="preVideoInit"
            video-close-function="preVideoClose"
            ad-close-function="preAdClose"
            onvideo-show="fnVideoShow"
            onvideo-close="fnVideoClose"
            onvideo-ad-show="fnVideoAdShow"
            onvideo-ad-close="fnVideoAdClose"
            onvideo-end="fnVideoEnd"
            onbrand-video-show="fnBrandVideoShow"
            other-info="{{ preVideoTactics }}"
            current-page="{{ currentPage }}"
        ></ad-union>
        <ad-union
            if="preNextVideoSwitch"
            ad-unit-id="{{ preNextVideoId }}" 
            ad-type="video"
            ad-alias="preNextVideo"
            video-show="{{isPreNextVideoShow}}"
            video-ad-show="{{isPreNextAdShow}}"
            ad-init-function="preNextVideoInit"
            video-close-function="preNextVideoClose"
            ad-close-function="preNextAdClose"
            onvideo-show="fnVideoShow"
            onvideo-close="fnVideoClose"
            onvideo-ad-show="fnVideoAdShow"
            onvideo-ad-close="fnVideoAdClose"
            onvideo-end="fnVideoEnd"
            onbrand-video-show="fnBrandVideoShow"
            other-info="{{ preNextAdInfo }}"
            current-page="{{ currentPage }}"
        ></ad-union>
        <ad-union
            if="listenVideoSwitch"
            ad-unit-id="{{ listenVideoId }}" 
            ad-type="video"
            ad-alias="listenVideo"
            video-show="{{isListenVideoShow}}"
            video-ad-show="{{isListenAdShow}}"
            ad-init-function="listenVideoInit"
            video-close-function="listenVideoClose"
            ad-close-function="listenVideoAdClose"
            onvideo-show="fnVideoShow"
            onvideo-close="fnVideoClose"
            onvideo-ad-show="fnVideoAdShow"
            onvideo-ad-close="fnVideoAdClose"
            onvideo-end="fnVideoEnd"
            onbrand-video-show="fnBrandVideoShow"
            other-info="{{ listenVideoAdInfo }}"
            current-page="{{ currentPage }}"
        ></ad-union>
        <div class="back_ad_pop" if="backAdSwitch && isBackAdPopShow">
            <ad-union
                ad-unit-id="{{ backAdId }}"
                ad-type="back"
                ad-alias="readBack"
                book-id="{{ bookId }}"
                book-name="{{ bookName }}"
                chapter-id="{{ chapterId }}"
                chapter-name="{{ chapterName }}"
                chapter-index="{{ chapterIndex }}"
                other-info="{{ backAdTactics }}"
                read-times="{{ readTotalTime }}"
                back-loading="{{ isBackAdLoad }}"
                brand-ad-switch="{{ brandAdSwitch }}"
                exit-app="{{ needExitApp && isExitApp }}"
                current-page="{{ currentPage }}"
                is-vertical-button="{{ isVerticalBackButton }}"
                is-ad-show="{{ true }}"
                onad-back="fnBackAdPopClose"
            ></ad-union>
        </div>
        <!-- 顶部激励墙入口 -->
        <top-adwall-entry
            if="!adWallReduceAd.isExpired"
            is-night="{{ setupJson.bNight }}"
            expired-time="{{ adWallReduceAd.expiredTime }}"
            is-show-wall-entry="{{ !!adWallCacheInfo && adWallCacheInfo.awardType === 5 && adWallReduceAd.maxCount !== -1 && adWallReduceAd.currentCount !== -1 && (adWallReduceAd.currentCount < adWallReduceAd.maxCount || adWallReduceAd.isRedisExpired) }}"
            @fn-enter-ad-wall="fnEnterReduceAdWall"
        ></top-adwall-entry>
        <!-- 激励墙入口弹窗 -->
        <adwall-entry-popup
            if="adWallEntryPopup.show && !isWarning && !isShortpop"
            award="{{ adWallEntryPopup.award }}"
            max-count="{{ adWallReduceAd.maxCount }}"
            @fn-close="fnAdWallEntryPopupClose"
            @fn-enter-ad-wall="fnAdWallEntryPopupConfirm"
        ></adwall-entry-popup>
        <back-gdt book-id="{{ bookId }}"></back-gdt>
        <back-baidu if="isBaidu" styletop="1"></back-baidu>
        <complaint-pop-up if="isShowComplaintPopUp" complaint-ad-info="{{ currentAdCloseInfo }}" @appear="fnComplaintPopUpExposure" @fn-close="fnCloseComplaintPopUp"></complaint-pop-up>
        <listen-pop
            if="showListenPop && listenPayFlag" 
            listen-task="{{ listenTask }}"
            @listen-video="fnListenVideoLoad"
            @listen-award="fnListeAward"
            @listen-pop-close="fnListenPopClose"
        ></listen-pop>
        <ad-union
            if="aliPayRedVideoInfo.aliPayRedVideoSwitch"
            ad-unit-id="{{ aliPayRedVideoId }}" 
            ad-type="video"
            ad-alias="aliPayRedVideo"
            video-show="{{ aliPayRedVideoInfo.isAliPayRedVideoShow }}"
            video-ad-show="{{ aliPayRedVideoInfo.isAliPayRedAdShow }}"
            ad-init-function="aliPayRedVideoInit"
            video-close-function="aliPayRedVideoClose"
            ad-close-function="aliPayRedAdClose"
            onvideo-show="fnVideoShow"
            onvideo-close="fnVideoClose"
            onvideo-ad-show="fnVideoAdShow"
            onvideo-ad-close="fnVideoAdClose"
            onvideo-end="fnVideoEnd"
            onbrand-video-show="fnBrandVideoShow"
            other-info="{{ aliPayRedVideoTactics }}"
            current-page="{{ currentPage }}"
        ></ad-union>
    </div>
</template>

<style lang="less">
    @keyframes ListShow {
        from {
            transform: translateY(100%);
        }
        to {
            transform: translateY(0);
        }
    }
    .banner-wrap {
        width: 100%;
        height: 188px;
        .banner-stack {
            flex-direction: column;
            justify-content: flex-end;
            width: 100%;
            height: 188px;
            .banner-back {
                width: 100%;
                height: 146px;
            }
            .banner-page-info {
                margin-bottom: 146px;
                width: 100%;
                height: 42px;
                align-items: center;
                justify-content: center;
                padding: 0px 20px;
                .page-info-box {
                    width: 100%;
                    height: 42px;
                    align-items: center;
                    justify-content: space-between;
                    .page-info {
                        height: 42px;
                        line-height: 42px;
                        font-size: 24px;
                        color: #333333;
                        lines: 1;
                        text-overflow: ellipsis;
                    }
                    .page-info-night {
                        color: rgba(255, 255, 255, 0.2);
                    }
                }
                .menu-box {
                    justify-content: center;
                    align-items: center;
                    height: 32px;
                    padding: 0 8px;
                    border: 2px solid rgba(69, 65, 61, 0.6);
                    border-radius: 20px;
                    .img {
                        width: 24px;
                        height: 24px;
                        margin-right: 4px;
                    }
                    .text {
                        color: rgba(51, 51, 51, 0.9);
                        font-size: 24px;
                    }
                    .night-text {
                        color: rgba(255, 255, 255, 0.2);
                    }
                }
                .night-menu-box {
                    border: 2px solid rgba(255, 255, 255, 0.2);
                }
            }
        }
    }
    .auth-shortcut-pop {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        align-items: flex-end;
        justify-content: center;
        .auth-content {
            flex-direction: column;
            align-items: center;
            width: 100%;
            background-color: #FFFFFF;
            border-top-left-radius: 24px;
            border-top-right-radius: 24px;
            animation-name: ListShow;
            animation-duration: 400ms;
            animation-timing-function: ease-out;
            padding-bottom: 30px;
            .auth-close {
                margin-top: 8px;
                margin-bottom: 18px;
                width: 100%;
                height: 54px;
                padding-right: 8px;
                justify-content: flex-end;
                image {
                    width: 54px;
                    height: 54px;
                }
            }
            .auth-title {
                margin-bottom: 8px;
                width: 686px;
                font-size: 36px;
                font-weight: bold;
                color: #333333;
                height: 50px;
                line-height: 50px;
                lines: 1;
                text-overflow: ellipsis;
                text-align: center;
            }
            .auth-desc {
                margin-bottom: 64px;
                width: 686px;
                font-size: 28px;
                color: #FA5805;
                height: 40px;
                line-height: 40px;
                lines: 1;
                text-overflow: ellipsis;
                text-align: center;
            }
            .auth-desc-color {
                color: #AAAAAA;
            }
            .auth-btn {
                margin-bottom: 32px;
            }
        }
    }
    .auth-shortcut-pop-new {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        align-items: center;
        justify-content: center;
        .auth-content-stack {
            flex-direction: column;
            width: 640px;
            height: 880px;
            background-color: transparent;
            align-items: center;
            .auth-content-new-close {
                align-self: flex-end;
                width: 54px;
                height: 54px;
            }
            .auth-content-bg {
                width: 640px;
                height: 880px;  
            }
            .auth-content-wrap {
                margin-top: 265px;
                width: 100%;
                height: 80px;
                justify-content: center;
            }
            .auth-content-wrap-extra {
                margin-top: 238px;
                width: 100%;
                height: 120px;
                align-items: flex-end;
                justify-content: center;
            }
            .auth-content-title {
                height: 80px;
                line-height: 80px;
                font-size: 60px;
                font-weight: bold;
                color: #CF290F;
                text-align: center;
            }
            .auth-content-title-extra {
                height: 120px;
                line-height: 120px;
                font-size: 88px;
                padding: 0px 8px;
            }
            .auth-content-title-light {
                height: 60px;
                line-height: 60px;
                font-size: 48px;
                margin-bottom: 20px;
            }
            .auth-content-btn {
                margin-top: 712px;
            }
        }
    }
    .close-pop-wrap {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        align-items: center;
        justify-content: center;
        .close-pop-stack {
            flex-direction: column;
            width: 646px;
            background-color: #FFFFFF;
            border-radius: 15px;
        }
        .close-pop-image {
            margin-left: 584px;
            margin-top: 8px;
            width: 54px;
            height: 54px;
        }
        .close-pop-box {
            flex-direction: column;
            width: 646px;
            border-radius: 15px;
            padding: 16px 48px 0px 48px;
            .close-pop-item {
                width: 100%;
                height: 112px;
                align-items: center;
                .close-pop-icon {
                    margin-right: 24px;
                    width: 48px;
                    height: 48px;
                }
                .close-pop-text {
                    height: 45px;
                    font-size: 32px;
                    color: #333333;
                    line-height: 45px;
                }
            }
            .close-pop-line {
                width: 100%;
                height: 1px;
                background-color: #EAEAEF;
            }
        }
    }
    .pre-video-pop {
        flex-direction: column;
        position: fixed;
        left: 30px;
        bottom: 208px;
        width: 690px;
        height: 198px;
        border-radius: 16px;
        animation-name: ListShow;
        animation-duration: 600ms;
        animation-timing-function: ease-out;
        .pre-video-pop-image {
            width: 690px;
            height: 198px;
        }
        .pre-video-pop-close {
            align-self: flex-end;
            margin-top: 24px;
            margin-right: 24px;
            border-radius: 32px;
            width: 32px;
            height: 32px;
            background-color: rgba(255, 255, 255, .6);
            font-size: 24px;
            color: #000000;
            line-height: 32px;
            text-align: center;
        }
    }
    .pre-video-package {
        flex-direction: column;
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        align-items: center;
        justify-content: center;
        .pre-video-close {
            align-self: flex-end;
            margin-right: 95px;
            margin-bottom: 24px;
            width: 64px;
            height: 64px;
        }
        .pre-video-stack {
            flex-direction: column;
            width: 560px;
            height: 724px;
            align-items: center;
            .pre-video-bg {
                width: 560px;
                height: 724px;
            }
            .pre-video-box {
                margin-top: 208px;
                justify-content: center;
                align-items: center;
                height: 126px;
                .pre-video-num {
                    margin-right: 12px;
                    height: 126px;
                    line-height: 126px;
                    font-size: 140px;
                    font-weight: bold;
                    color: #FFDDAE;
                }
                .pre-video-text {
                    margin-top: 6px;
                    width: 44px;
                    height: 120px;
                    font-size: 44px;
                    font-weight: bold;
                    color: #FFE8AE;
                    line-height: 60px;
                }
            }
            .pre-video-btn {
                margin-top: 490px;
                width: 406px;
                height: 124px;
                justify-content: center;
                align-items: center;
                .pre-video-btn-image {
                    width: 406px;
                    height: 124px;
                }
                .pre-video-btn-text {
                    height: 56px;
                    font-size: 40px;
                    font-weight: bold;
                    color: #DB5A00;
                    line-height: 56px;
                }
            }
        }
    }
    .pre-award-pop {
        flex-direction: column;
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        align-items: center;
        justify-content: center;
        .pre-award-stack {
            flex-direction: column;
            width: 700px;
            height: 766px;
            align-items: center;
            .pre-award-image {
                width: 700px;
                height: 766px;
            }
            .pre-award-close {
                align-self: flex-end;
                margin-top: 42px;
                margin-right: 70px;
                width: 54px;
                height: 54px;
            }
            .pre-award-box {
                margin-top: 262px;
                justify-content: center;
                align-items: center;
                height: 126px;
                .pre-award-num {
                    margin-right: 12px;
                    height: 126px;
                    line-height: 126px;
                    font-size: 126px;
                    font-weight: bold;
                    color: #F5271C;
                }
                .pre-award-text {
                    margin-top: 12px;
                    width: 40px;
                    height: 104px;
                    font-size: 40px;
                    font-weight: bold;
                    color: #F5271C;
                    line-height: 52px;
                }
            }
            .pre-award-withdraw {
                margin-top: 540px;
                height: 42px;
                font-size: 30px;
                color: #C36338;
                line-height: 42px;
                text-decoration: underline;
            }
            .pre-award-btn {
                margin-top: 606px;
                width: 500px;
                height: 88px;
                justify-content: center;
                align-items: center;
                .pre-award-btn-image {
                    width: 500px;
                    height: 88px;
                }
                .pre-award-btn-text {
                    height: 56px;
                    font-size: 40px;
                    color: #FFF7EA;
                    line-height: 56px;
                }
            }
        }
    }
    .back_ad_pop {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: rgba(0, 0, 0, .7);
    }
    .page_wrap {
        flex-direction: column;
        width: 100%;
        height: 100%;
    }
    .tab-container {
        padding-top: 90px;
        width: 100%;
        height: 100%;
        flex: 1;
        .tab {
            width: 100%;
            height: 100%;
            flex: 1;
            background-color: transparent;
            .page-wrapper {
                flex-direction: column;
                width: 100%;
                height: 100%;
                padding: 0px 30px;
                background-color: transparent;
                .page-text {
                    color: #333333;
                    lines: 1;
                    text-overflow: clip;
                }
                .page-text-title {
                    color: #333333;
                    lines: 1;
                    text-overflow: ellipsis;
                    font-weight: bold;
                }
                .page-text-block {
                    width: 100%;
                    flex: 1;
                }
            }
            .page-wrapper-block {
                flex-direction: column;
                width: 100%;
                height: 100%;
                flex: 1;
                padding-bottom: 188px;
            }
        }
    }
    .page-wrapper-ad,.page-wrapper-rec {
        position: fixed;
        left: 0px;
        top: 90px;
        flex-direction: column;
        width: 100%;
        align-items: center;
        justify-content: flex-end;
        margin-bottom: 188px;
        background-color: transparent;
        .insert-tips {
            margin-bottom: 20px;
            height: 40px;
            font-size: 32px;
            line-height: 40px;
            text-align: center;
            color: #555555;
        }
        .night-insert-tips {
            color: #999999;
        }
        .next-btn {
            margin-top: 24px;
            margin-bottom: 24px;
            align-items: center;
            justify-content: center;
            width: 388px;
            height: 92px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 46px;
            .next-image {
                margin-left: 24px;
                margin-right: 16px;
                width: 36px;
                height: 36px;
            }
            .next-text {
                height: 92px;
                font-size: 32px;
                color: #555555;
                line-height: 92px;
            }
            .night-next-text {
                color: #999999;
            }
        }
        .next-btn-night {
            opacity: .6;
        }
        .insert-video-box {
            margin-top: 24px;
            margin-bottom: 24px;
            justify-content: center;
            align-items: center;
            width: 606px;
            height: 92px;
            .insert-video-image {
                height: 92px;
                object-fit: contain;
            }
            .insert-video-text {
                height: 92px;
                font-size: 32px;
                color: #F97053;
                line-height: 92px;
                text-align: center;
                text-decoration: underline;
            }
        }
    }
    .reader-mask {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        margin-bottom: 146px;
        background-color: rgba(0, 0, 0, .7);
        .reader-mask-image {
            margin-top: 180px;
            margin-left: 35px;
            width: 680px;
        }
    }
    .read-video-mask {
        position: fixed;
        width: 100%;
        height: 100%;
        background-color: #ffffff;
    }
    .book-wrap {
        width: 686px;
        height: 320px;
        background-color: rgba(255, 255, 255, 0.2);
        margin-bottom: 42px;
        padding: 32px 24px 24px;
        flex-direction: column;
        border-radius: 24px;
        .title{
            margin-bottom: 24px;
            align-items: center;
            image{
                width: 32px;
                height: 32px;
            }  
            text{
                height: 40px;
                line-height: 40px;
                text-align: center;
                margin-left: 8px;
                font-weight: 400;
                font-size: 28px;
            }
        }
        .book {
            height: 200px;
            .cover {
                width: 150px;
                height: 200px;
                border-radius: 8px;
            }
            .book-detail {
                padding: 9px 24px;
                flex-direction: column;
                justify-content: space-between;
                .book-name-btn {
                    justify-content: space-between;
                    align-items: center;
                    width: 464px;
                    .book-name {
                        width: 272px;
                        font-size: 32px;
                        font-family: PingFangSC-Medium, PingFang SC;
                        font-weight: 500;
                        padding: 6px 0;
                        lines: 1;
                        text-overflow: ellipsis;
                    }
                    .btn {
                        width: 168px;
                        height: 56px;
                        line-height: 56px;
                        color: rgba(250, 88, 5, 1);
                        font-size: 28px;
                        text-align: center;
                        border: 1px solid #FA5805;
                        border-radius: 32px;
                    }
                    .btn-night-on-book-shelf {
                        color: rgba(255, 255, 255, 0.3);
                        border: 1px solid rgba(255, 255, 255, 0.3);
                    }
                    .on-book-shelf {
                        color: #aaa;
                        border: 1px solid #aaa;
                    }
                    .btn-night {
                        color: rgba(250, 88, 5, 0.7);
                        border: 1px solid rgba(250, 88, 5, 0.6);
                    }
                }
                .des {
                    width: 464px;
                    height: 66px;
                    font-size: 24px;
                    font-family: PingFangSC-Regular, PingFang SC;
                    font-weight: 400;
                    line-height: 33px;
                    lines: 2;
                    text-overflow: ellipsis;
                }
                .tag {
                    justify-content: flex-start;
                    .tag1,
                    .tag2 {
                        padding:0 12px;
                        height: 34px;
                        background-color: rgba(102, 102, 102, 0.1);
                        border-radius: 8px;
                        font-size: 24px;
                        font-family: PingFangSC-Regular, PingFang SC;
                        font-weight: 400;
                        line-height: 33px;
                        margin-right: 8px;
                        text-align: center;
                    }
                }
            }
        }

        .change-btn-bright {
            border: 1px solid #fa5805;
            background-color: rgba(250, 99, 5, 0.08);
        }
        .change-btn-night {
            background-color: rgba(250, 99, 5, 0.04);
            border: 1px solid rgba(250, 88, 5, 0.6);
        }

        .change-btn {
            width: 638px;
            height: 80px;
            border-radius: 44px;
            justify-content: center;
            align-items: center;
            .change-image {
                width: 32px;
                height: 32px;
                margin-right: 8px;
            }
            .change-text {
                font-size: 28px;
                font-family: PingFangSC-Medium, PingFang SC;
                font-weight: 500;
            }
        }
    }
    .book-wrap-night {
        background-color: rgba(255, 255, 255, 0.04);
    }
   /* load 弹层部分 */
    .load_img_div {width:100%;justify-content: center;}
    .load_img {width:140px;height:140px;}
    .dialog_loading {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        flex-direction: column;
        text-align: center;
    }
    .logo-warp{
        align-items: center;
        margin: 30px 0 10px 10px;
    }
    .logo-warp stack{
        width: 65px;
        height: 65px;
        margin-left: 6px;
    }
    .logo-warp image{
        width: 65px;
        height: 65px;
        border-radius: 6px;
    }
    .logo-warp div{
        width: 65px;
        height: 65px;
        background-color:rgba(0, 0, 0, .5);
    }
    .dia_txt {flex-direction: column;width:100%;height:100%;text-align: center;}
    .top_t {height:400px}
    .dia_txt text {flex-direction: column; width:100%;text-align: center;}

    .dia_reload_btn {
        margin: 0 15px;
        justify-content: center;
        height: 80px;
        background-color: #FF802B;
        border-radius: 40px;
        position: fixed;
        left: 135px;
        right: 135px;
        top: 826px;
        /* flex: 1; */
    }
    .dia_reload_btn text {
        font-size: 30px;
        color: rgba(255, 255, 255, 1);
        lines: 1; text-overflow: ellipsis;
    }
    .sobr_box{
        width: 100%;
        background-color: #ffffff;
        border-top-left-radius: 36px;
        border-top-right-radius: 36px;
        flex-direction: column;
        align-items: center;
    }

    .sobr_tit{
        width: 100%;
        padding: 30px 30px 30px 84px;
        height: 114px;
    }
    .sobrt_txt{
        flex: 1;
        height:54px;
        font-size:30px;
        text-align: center;
        color:#737373;
        line-height:54px; 
    }

    .sobrt_close{
        height: 54px;
        width: 54px;
        background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_20.png);
    }
    .sobr_title{
        padding: 0 30px;
        height:60px;
        font-size:36px;
        text-align: center;;
        font-weight:bold;
        color:#444444;
        line-height:60px;
    }

    .sobr_why_txt{
        width: 100%;
        padding: 40px 30px;
        height: 152px;
        font-size:48px;
        text-align: center;
        font-weight:bold;
        color:#ff5b60;
        line-height:72px;
    }

    .sobr_free_box{
        padding: 76px 0;
        width: 610px;
        height: 200px;
        border-top-color: #dfdfdf;
        border-top-width: 1px;
        align-items: center;
        justify-content: center;
    }
    .sobrf_text{
        margin-right: 16px;
        height:48px;
        font-size:30px;
        color:#444444;
        line-height:48px;
    }
    .sobrf_but{
        margin-left: 16px;
        width:140px;
        height:48px;
        border-radius:24px;
        border:1px solid #f97053;
        font-size:28px;
        text-align: center;
        color:rgba(249,112,83,1);
        line-height:46px;
    }
    .sobr_share_but{
        width:100%;
        height:90px;
        background:linear-gradient(90deg,rgba(255,182,115,1) 0%,rgba(254,112,90,1) 100%); 
        font-size:36px;
        text-align: center;
        font-weight:bold;
        color:#ffffff;
        line-height:90px;
    }
    .share_popup_box {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        flex-direction: column;
    }    
    

    .sob_xq {
        flex: 1;
    }
    .sob_box {
        height: 370px;
        flex-direction: column;
        background-color: #ffffff;
        border-top-left-radius: 32px;
        border-top-right-radius: 32px;
    }
    .sob_main {
        flex: 1;
        height: 272px;
        border-top-left-radius: 32px;
        border-top-right-radius: 32px;
        background-color: #ffffff;
        justify-content: space-around;
    }
    .sobm_li {
        height: 100%;
        padding: 30px 10px 0;
        flex-direction: column;
        align-items: center;
    }
    .sobml_img {
        margin-top: 15px;
        margin-bottom: 20px;
        height: 96px;
        width: 96px;
    }

    .sobm_li text {
        height: 40px;
        font-size: 26px;
        color: #444444;
        line-height: 40px;
    }
    .sob_close {
        padding-bottom: 40px;
        width: 100%;
        height: 128px;
        background-color: #f6f6f6;
        font-size: 36px;
        text-align: center;
        line-height: 88px;
    }

    .back_popup_box {
        position: fixed;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        align-items: center;
        justify-content: center;
    }
    .back_main {
    padding: 0px 55px 0px;
    width: 100%;
    flex-direction: column;
    background-color: rgba(255,255,255,0);
    }
    .back_close_box {
    height: 94px;
    width: 100%;
    justify-content: flex-end;
    }
    .back_close {
    height: 54px;
    width: 54px;
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_10.png);
    }
    .back_content {
        padding: 0px;
        /* width: 100%; */
        flex-direction: column;
        align-items: center;
        background-color: #FFF4E0;
        border-radius: 16px;
        padding-bottom: 30px;
        .back-title{
            font-size: 36px;
            color:#333333;
            font-weight: bold;
            margin-top: 30px;
        }
        .back_content_img{
            width: 640px;
            height: 394px;
            margin-top: 30px;
            margin-bottom: 30px;
        }
        .back-btn{
            width: 540px;
            height: 90px;
            background-color: #E74260;
            font-size: 36px;
            font-weight: bold;
            color: #ffffff;
            text-align: center;
            border-radius: 90px;
        }
    }
    .sign_popup_box {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        align-items: center;
    }    

    .spb_main {
    padding: 0 75px 94px;
    width: 100%;
    flex-direction: column;
    }
    .spb_close_box {
    height: 94px;
    width: 100%;
    justify-content: flex-end;
    }
    .spb_close {
    height: 54px;
    width: 54px;
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_10.png);
    }
    .spb_content {
    padding: 40px;
    width: 100%;
    background-color: #ffffff;
    border-radius: 36px;
    flex-direction: column;
    align-items: center;
    }
    .spb_h1 {
    height: 72px;
    width: 100%;
    text-align: center;
    font-size: 48px;
    font-weight: bold;
    color: #444444;
    line-height: 72px;
    }
    .spb_h1 .span_2 {
    color: #f97053;
    }

    .spb_desc {
    height: 60px;
    width: 100%;
    text-align: center;
    font-size: 36px;
    color: #785459;
    line-height: 60px;
    }
    .spb_desc .span_2 {
    color: #f97053;
    }

    .spb_bginfo {
    margin-top: 50px;
    margin-bottom: 40px;
    height: 260px;
    width: 360px;
    }
    .spbbg_1 {
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_11.png);
    }
    .spbbg_2 {
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_12.png);
    }
    .spbbg_3 {
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_13.png);
    }
    .spbbg_4 {
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_14.png);
    }

    .spb_but {
        margin-left: 20px;
        margin-right: 20px;
    width: 240px;
    height: 90px;
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_24.png);
    }
    .spb_but_2{
    background-image: url(https://xsmfdq.kkyd.cn/html/images/new_my/icon_23.png);
    }

    .read_stack {
        width: 100%;
        height: 100%;
    }
    .read_box {
        flex-direction: column;
        flex: 1;
        width: 100%;
        height: 100%;
        padding: 0 30px;
    }

    .read_tit {
        padding: 60px 0 30px 0;
        flex: 1;
        flex-direction: column;
        align-items: flex-start;
    }

    .read_tit text {
        font-size: 44px;
        color: #1d1b1b;
        line-height: 62px;
    }

    .read_content {
        flex: 1;
        flex-direction: column;
    }

    .text_indent_span {
        font-size: 34px;
        color: transparent;
        line-height: 56px;
    }

    .read_content text {
        padding: 10px 0;
        font-size: 36px;
        color: #333;
        line-height: 56px;
    }
     .read_content .high_light{
        background-color: rgba(0, 0, 0, .2);
    }
    .read_content .high_light_night{
        background-color: rgba(255, 255, 255, .2);
    }
    .read_next_chapter {
        margin: 64px 32px 48px;
        width: 686px;
        height: 80px;
        background-color: rgba(250, 88, 5, 1);
        border-radius: 40px;
        font-size: 32px;
        color: rgba(255, 255, 255, 1);
        text-align: center;
        line-height: 80px;
    }
    .read_next_chapter_night {
        margin: 64px 32px 48px;
        width: 686px;
        height: 80px;
        background-color: rgba(250, 88, 5, .6);
        border-radius: 40px;
        font-size: 32px;
        color: rgba(255, 255, 255, 0.6);
        text-align: center;
        line-height: 80px;
    }
    .read_other {
        margin-bottom: 48px;
        width: 686px;
        height: 40px;
    }
    .read_parent_chapter,
    .read_other_border,
    .read_directory,
    .read_share_but {
        text-align: center;
        height: 40px;
        font-size: 28px;
        color: rgba(250, 88, 5, 1);
        line-height: 40px;
    }
    .read_parent_chapter_night,
    .read_other_border_night,
    .read_directory_night,
    .read_share_but_night {
        text-align: center;
        height: 40px;
        font-size: 28px;
        color: rgba(250, 88, 5, 0.6);
        line-height: 40px;
    }
    .read_parent_chapter, .read_parent_chapter_night, .read_directory, .read_directory_night, .read_share_but, .read_share_but_night {
        width: 228px;
    }
    .read_other_border, .read_other_border_night {
        width: 1px;
    }
    .click-pop-wrap {
        position: fixed;
        top: 0px;
        left: 0px;
        width: 750px;
        flex: 1;
        height: 100%;
        flex-direction: column;
        align-items: flex-end;
        justify-content: center;
        background-color: rgba(0, 0, 0, .6);
        .click-pop-close {
            margin-right: 106px;
            margin-bottom: 24px;
            width: 54px;
            height: 54px;
            resize-mode: stretch;
            object-fit: fill;
        }
        .click-pop-box {
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin-right: 106px;
            width: 538px;
            background-color: #FFFFFF;
            border-radius: 8px;
            .click-pop-content {
                margin-top: 108px;
                margin-bottom: 96px;
                width: 445px;
                font-size: 34px;
                font-weight: 400;
                color: #444444;
                line-height: 48px;
            }
            .click-pop-btn {
                width: 490px;
                height: 88px;
                margin-bottom: 40px;
                justify-content: space-around;
                .click-pop-cancel {
                    width: 236px;
                    height: 88px;
                    background-color: #F2F2F2;
                    border-radius: 8px;
                    text-align: center;
                    line-height: 88px;
                    font-size: 32px;
                    font-weight: 500;
                    color: #888888;
                }
                .click-pop-confirm {
                    width: 236px;
                    height: 88px;
                    background-color: #FB761F;
                    border-radius: 8px;
                    text-align: center;
                    line-height: 88px;
                    font-size: 32px;
                    font-weight: 500;
                    color: #FFFFFF;
                }
            }
        }
    }
    .download-pop-wrap {
        position: fixed;
        top: 0px;
        left: 0px;
        width: 750px;
        flex: 1;
        height: 100%;
        flex-direction: column;
        align-items: flex-end;
        justify-content: center;
        background-color: rgba(0, 0, 0, .6);
        .download-pop-close {
            margin-right: 106px;
            margin-bottom: 24px;
            width: 54px;
            height: 54px;
            resize-mode: stretch;
            object-fit: fill;
        }
        .download-pop-box {
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin-right: 106px;
            width: 538px;
            background-color: #FFFFFF;
            border-radius: 8px;
            padding: 0px 32px;
            .download-pop-title {
                margin-top: 40px;
                margin-bottom: 40px;
                height: 50px;
                font-size: 36px;
                font-weight: 500;
                color: #444444;
                line-height: 50px;
            }
            .download-pop-item {
                margin-bottom: 24px;
                width: 100%;
                /* height: 37px; */
                align-items: center;
                justify-content: space-between;
                .download-pop-item-title {
                    flex-shrink: 0;
                    margin-right: 24px;
                    height: 37px;
                    font-size: 26px;
                    color: #888888;
                    line-height: 37px;
                }
                .download-pop-item-content {
                    /* height: 37px; */
                    font-size: 26px;
                    font-weight: 500;
                    color: #444444;
                    line-height: 37px;
                    /* lines: 1;
                    text-overflow: ellipsis; */
                    text-align: right;
                }
                .download-pop-arrow {
                    width: 26px;
                    height: 12px;
                    resize-mode: stretch;
                    object-fit: fill;
                }
                .download-pop-arrow-default {
                    transform: rotate(0deg);
                }
                .download-pop-arrow-turn {
                    transform: rotate(180deg);
                }
            }
            .download-pop-web {
                width: 474px;
                height: 266px;
                border: 1px solid #C7C7C7;
                background-color: #ffffff;
            }
            .download-pop-confirm {
                margin-top: 40px;
                margin-bottom: 16px;
                width: 454px;
                height: 88px;
                background-color: #FB761F;
                border-radius: 8px;
                font-size: 32px;
                font-weight: 500;
                color: #FFFFFF;
                line-height: 88px;
                text-align: center;
            }
            .download-pop-cancle {
                margin-bottom: 40px;
                height: 37px;
                font-size: 26px;
                font-weight: 400;
                color: #888888;
                line-height: 37px;  
            }
        }
    }
</style>

<script>
    // 2021-08-25 10000+
    import app from '@system.app';
    import router from '@system.router';
    import prompt from '@system.prompt'
    import device from '@system.device';
    import fetch from '@system.fetch';
    import storage from '@system.storage';
    import file from '@system.file';
    import shortcut from '@system.shortcut';
    import share from '@system.share';
    import shareSe from '@service.share';
    import _ from '../Common/js/common.js'  
    import request from '@system.request'
    import notification from '@system.notification';
    import UUID from '../Common/js/uuid'
    import audio from '@system.audio'
    import wxpay from '@service.wxpay';
    import network from '@system.network'
    import account from '@service.account'
    import pkg from '@system.package'
    
    // 广告APP标识
    const AD_TOKEN = 'ut22402g'
    let resident
    try {
        resident = require('@system.resident')
    } catch (error) {
        console.log(error)
    }
    export default {
        protected: {
            prePage: '',            // 来源页面 目录/其他
            isFromUserStay: 0,      // 是否用户挽留进入
            isAutoListen: false,    // 是否自动听书
        },
        private: {
            config:null,
            device:{
                ei: '',
                mac: '',
                brand: '',
                model: '',
                utdid: '',
                utdidTmp:'',
                oaid:''
            },
            userId:'',
            ctime:'',
            t:'',
            hasRecharge:true,
            isWarning:false,
            isWarn:false,
            warningLevel:1,
            orderShow:false,
            brand:'',
            isToRecharge: false, // 是否跳转到充值页
            buttonTip:null,
            buttonTipList:null,
            successTip:'',
            successTipTop:'',
            successTipBot:'',
            delVbc:0,
            payAdvance:false,
            textLinkList: [], // 章末文字链列表
            textLinkIndex: -1, // 当前索引
            beforePayVo:{},
            showAdvanceSign:false,
            fontSizeIndex: 0,
            colorIndex: 0,
            hasDashboradShow: false,
            obuttomShareVoList: [],
            opopShareVoList:[],
            butShareshow:false,
            isNeedImeiAuth: true, // 是否授权
            localPush:{},
            localPushUt:{},
            sceneVal:'',
            needPlayAudio: false, // 是否需要播放空白MP3
            isSupportVivoPush: false, // 是否支持vivoPush
            vivoPush: null, // vivoPush实例
            cutSupport: {},//是否支持意见加桌组件，因为有多个厂商 所以用对象表示
            onekeyDestext:'', //vivo加桌组件描述文案
            onekeyBtnText:'',//一键加桌组件按钮文案,
            rpbt:[],
            nrtt:[],
            oncePriceShow: false, // 整本购买弹窗
            canOncePrice: false, // 整本购买信息
            oncePriceInfo: '', // 整本购买信息
            giveUpPopShow: false, // 整本挽留弹窗
            oncePriceExtraInfo: '', // 2151回调信息
            omapOrigin: '',
            omapCname: '',

            // 配置
            hasGetAdSetting: false, // 获取广告配置
            isGetAdSettingError: false, // 获取广告配置失败
            hasGetSetting: false, // 获取配置 2150
            hasGetServer: false, // 获取配置 2154
            isGetSettingError: false, // 网络产生错误 2150
            isGetServerError: false, // 网络产生错误 2154
            hasGetProp: false, // 是否获取屏幕信息
            isChargeBook: false, // 是否是付费书籍
            canListen: true, // 听书支持
            listenPayFlag: false, // 听书会员支持
            dzmfVipType: false, // 免费会员类型
            dzmfListenVipFlag: false, // 听书会员类型
            hasSetupJsonLoad: true, // 阅读页面配置需要刷新

            // 页面参数
            isLoadChapter: false, // 加载章节中
            hasLoadChapter: false, // 是否加载完章节
            readStartTime: '', // 阅读时长开始
            shenceReportTime: '', // 阅读时长开始
            readTotalTime: 0, // 阅读总时长
            currentReportTime: 0, // 当前章节已上报时长
            minReportTime: 60, // 章节最小上报时长 
            maxReportTime: 180, // 章节最小上报时长
            readTask: {}, // 阅读计时任务
            // 阅读时长奖励配置值对象(新版)
            readAwardObj: {
               readAwardInitText: '', // 策略下发初始文案形式
               readAwardIconUrl: '', // 阅读计时任务入口奖励图标Url
               isNewAwardStyle: false, // 是否是新版配置样式
            },
            readAwardText: '', // 阅读计时任务入口文案
            readTaskId: '', //阅读任务id
            readTaskAll: [],  //阅读计时任务(多段)
            readTaskInfo: {},  //阅读任务完成弹窗内容
            awardAdInfo: {}, // 阅读任务后续激励视频详情
            preNextAdInfo: {}, // 章首激励视频详情
            listenVideoAdInfo: {}, // 听书激励视频详情
            isReadProgressShow: false, // 挂件是否展示
            readRewardPopShow: false,    //阅读计时任务领取弹窗
            sysTime: '', // 系统时间
            chapterMiddleIndex: -1, // 章节中间位置index
            scrollPosition: 0, // 滚动距离
            scrollToLoadPosition: false, // 中部广告加载增加距离判断
            isFirstLoadOpen: true, // 是否首次打开开屏
            isFirstLoadVideo: true, // 是否首次打开激励视频
            openScreenCanBack: false, // 开屏是否可以返回
            needDoubleOpenAdShow: false, // 双开屏展示
            readVideoInfo: false, // 视频信息
            canReadVideoShow: false, // 请求视频
            canReadVideoLoad: false, // 加载视频
            readVideoLoading: false, // 视频加载中
            hasReadVideoShow: false, // 视频是否展示
            canShowPop: true, // 能否展示开屏
            readTimes: 0, // 本书阅读次数
            preAdWall: false, // 即将进入广告墙
            isSupportNewReader: false, // 是否支持翻页
            noAdTime: 0, // 免广告时间
            canShowNewReaderMask: false, // 是否需要展示引导
            isNewReaderMask: false, // 翻页阅读引导
            maxChapter: 0, // 最大章节数目
            isVideoPlay: false, // 视频播放过
            showTimes: 0, // 页面曝光次数
            canHideReport: true, // 息屏上报屏蔽
            doubleClick: false, // 用户挽留防止多次退出
            userStayChapter: 0, // 用户挽留章节数 
            userStay: false, // 旧版阅读挽留弹窗
            userStayDetail: false, // 新版阅读挽留弹窗
            isNewUser: false, // 用户挽留新用户判断
            userStayType: 1, // 用户挽留样式
            isBackAdPopShow: false, // 退出阅读广告弹窗
            isBackAdLoad: false, // 退出阅读广告加载中
            backDialogTimes: 0, // 退出阅读加桌展示次数
            maxBackDialogTimes: -1, // 退出阅读加桌最大展示次数
            isFirstRenderBook: true, // 首次渲染内容
            isFirstAdWall: true, // 首次执行广告墙
            isClosePopShow: false, // 关闭弹窗显示
            currentAdCloseInfo: {}, // 关闭信息
            noAdVipSwitch: false, // 免广告开关
            brandAdSwitch: false, // 支持新版厂商广告开关
            backDialog: {}, // 退出参数配置
            isNeedEnterAdWall: false, // 是否强制进入广告墙
            adWallCacheInfo: '', // 广告墙缓存信息
            defaultChannelCode: 'dz_hmxs', // 默认渠道
            nowchapterId: '', // 当前章节id
            isAuthShortcutNewStyle: false, // 授权后加桌新版样式
            authShortcutInfo: {}, // 授权后加桌信息
            isAuthShortcutPopShow: false, // 授权后加桌弹窗
            orderChapterId: '', // 订购章节id
            hasAuthShortcutConfig: false, // 授权后配置获取
            isPreVideoPackageShow: false , // 章首红包显示
            isPreVideoPopShow: false, // 章首弹窗显示
            preVideoPopCount: 3, // 章首弹窗倒计时
            preVideoPopTimeout: null,
            isPreVideoAwardShow: false, // 章首奖励弹窗显示
            preVideoPopBg: {
                night: '#313135',
                color3: '#FDD5A7',
                color0: '#F7F7F7',
                color1: '#EBF6E4',
                color2: '#FFD9E4',
            },
            isReadTaskRecive: false, // 领取阅读奖励
            isPreAdBlockShow: false, // 章首广告显示
            isPreAdPage: false, // 章首广告显示
            isSwiperToNext: false, // 切换章节
            isInsertAdPage: false, // 插页广告显示
            currentInsertAd: '', // 当前插页广告位
            currentInsertCount: 0, // 当前渲染索引
            currentInsertIndex: -1, // 当前插页索引
            insertMinPage: -1, // 插页加载最小页数
            insertMaxPage: -1, // 插页加载最大页数
            hasTouchMove: false, // 是否翻页
            touchStartPosition: 0, // 滑动距离
            needStopOperator: false, // 需要阻止翻页行为
            isNoAd: false, // 阅读页免广告
            isCloseAddDesk: false,
            isAddDeskBtnClose: false,
            isAddDeskImageClose: false,
            isInBookShelf: false, // 是否已经加入书架
            isShowComplaintPopUp: false,  // 举报弹窗参数
            bookshelfInfo: {}, // 书架信息
            bookshelfIndex: -1, // 当前书籍书架索引
            hasShortcut: false, // 是否加桌
            hasMenuShow: false, // 菜单当日展示过
            isBaidu: false, // 百度拉起开关
            hasReadTypeSwitch: false, // 翻页判断完成
            hideShortcutInPre: false, // 章首不展示加桌
            hideOnekeyShortcutInPre: false, // 章首不展示一键加桌

            // 广告参数
            adWallToken: 'hmxswall01', // 广告墙Token
            topAdId: '5001198607', // 顶部广告位id
            middleAdId: '5001198809', // 中部广告位id
            bottomAdId: '5001198706', // 底部广告位id
            preAdId: '5001233102', // 章首广告位id
            awardVideoId: '5001232705', // 阅读任务激励视频广告位id
            insertVideoId: '5001232810', // 插屏激励视频广告位id
            readVideoId: '5001203505', // 阅读返回激励视频广告位id
            insertAdId: ['5001232911'], // 插页广告广告位id
            backAdId: '5001240815', // 退出阅读广告广告位id
            rewardAdId: '5001279904', // 阅读奖励信息流广告位id
            preVideoId: '5001279611', // 章首激励视频广告位id
            preNextVideoId: '5001199101', // 章首激励视频广告位id
            listenVideoId: '5001199101', // 听书视频广告位id
            preVideoSwitch: false, // 章首激励视频开关
            preNextVideoSwitch: false, // 章首激励视频开关
            listenVideoSwitch: false, // 听书激励视频开关
            preAdSwitch: false, // 章首广告开关
            topAdSwitch: false, // 顶部广告开关
            middleAdSwitch: false, // 中部广告开关
            bottomAdSwitch: false, // 底部广告开关
            insertAdSwitch: false, // 插屏广告开关
            insertVideoSwitch: false, // 插屏激励视频开关
            awardVideoSwitch: false, // 阅读任务激励视频开关
            backAdSwitch: false, // 退出阅读广告开关
            rewardAdSwitch: false, // 阅读奖励信息流开关
            isTopAdShow: false, // 顶部广告显示
            isMiddleAdShow: false, // 中部广告显示
            isBottomAdShow: false, // 底部广告显示
            isOpenScreenShow: false, // 是否显示开屏
            isReadVideoShow: false, // 阅读返回激励视频展示
            isReadAdShow: false, // 阅读返回激励视尾帧展示
            topAdTactics: {}, // 顶部广告策略信息
            middleAdTactics: {}, // 顶部广告策略信息
            bottomAdTactics: {}, // 顶部广告策略信息
            insertAdTactics: {}, // 信息流广告策略信息
            preAdTactics: {}, // 信息流广告策略信息
            backAdTactics: {}, // 退出阅读广告策略
            rewardAdTactics: {}, // 阅读奖励信息流策略
            middleAdloadPosition: 0, // 加载所需滚动距离
            bottomAdTimes: 30, // 底部广告轮播时间
            bottomAdPreTimes: 5, // 底部广告预加载时间
            bannerAdRepeatSwitch: false, // 底部广告轮询开关
            isBannerAdRepeat: false, // 底部广告是否轮询
            insertAdConfig: false, // 插页配置
            insertAdSpace: 5, // 插页广告间隔
            insertAdPreLoad: 2, //  插页广告预加载
            videoAdLoadLimit: 3000, // 阅读返回激励视超时时长，默认3000ms
            backAdLoadTime: 3000, // 退出阅读广告加载时间
            currentAdInfo: {}, // 当前缓存广告信息
            isAdPopShow: false, // 广告弹窗显示
            isClickShow: false, // 广告点击提示
            isDownloadShow: false, // 广告下载提示
            isWebShow: false,
            isAppShow: false,
            isCacheInfo: true, // 是否是缓存信息
            adWallParams: '', // 广告墙配置
            canLoadAdWall: false, // 是否下发广告墙
            preLoadAds: [], // 广告墙ids
            adWallTip: null, // 广告墙上报唯一标识
            adWallReduceAd: {
                isExpired: true,                        // 免广时长是否过期
                timestamp: 0,                           // 该接口请求成功时的时间戳
                maxCount: -1,                           // 时间间隔内进入激励墙的最大次数
                currentCount: -1,                       // 时间间隔内进入激励墙当前次数
                expiredTime: 0,                         // 免广截止时间（时间戳毫秒） 
                surplusTimes: 0,                        // 剩余免广时长（秒）
                canShowWallEntryBtn: false,             // 是否展示顶部激励墙入口按钮
                redisSurplusTimes: 0,                   // redis过期剩余时长
                isRedisExpired: false,                  // redis是否过期
            },
            adWallEntryPopup: {
                show: false,                            // 是否显示激励墙入口弹窗
                award: [],                              // 奖励
            },
            isPreVideoShow: false, // 章首激励视频展示
            isPreAdShow: false, // 章首激励视频尾帧展示
            isPreNextVideoShow: false, // 章首激励视频展示
            isPreNextAdShow: false, // 章首激励视频尾帧展示
            isListenVideoShow: false, // 听书激励视频展示
            isListenAdShow: false, // 听书激励视频尾帧展示
            isInsertVideoShow: false, // 插屏激励视频展示
            isInsertAdShow: false, // 插屏激励视频尾帧展示
            insertVideoTactics: {}, // 插屏激励视频策略信息
            isInsertVideoLoading: false, // 插屏激励视频加载
            insertVideoTaskId: false, // 插页视频任务
            insertVideoNums: 0, // 插页视频次数
            canInsertVideoShow: true, // 插页激励视频限制
            preVideoTaskId: false, // 章首激励视频任务
            preVideoNums: 0, // 章首激励视频次数
            preVideoAwardNums: 100, // 章首激励视频奖励金币数
            canPreVideoShow: true, // 章首激励视频限制
            hasPreVideoPopShow: false, // 本章是否展示过章首激励视频
            firstContentShow: false, // 内容初次展示
            preVideoPopLimit: 0, // 章首激励视频弹窗提示次数
            preVideoCurrentPopLimit: 0, // 当前章首激励视频弹窗提示次数
            preVideoImage: '', // 章首激励视频图片
            preVideoStart: 0, // 章首激励视频起始章节
            preVideoSpace: 0, // 章首激励视频间隔章节
            preVideoTactics: {}, // 章首激励视频详情
            isPreVideoLoading: false, // 章首激励视频加载
            isPreNextVideoLoading: false, // 章首激励视频加载
            readTipShowTimes: 0, // 阅读提示展示次数
            readTipCurrentShowTimes: 0, // 当前阅读提示展示次数
            insertVideoTouchRatio: 0, // 插页激励误点击比率
            insertVideoTouchLimit: 0, // 插页激励误点击次数
            insertVideoCurrentTouchLimit: 0, // 当前插页激励误点击次数
            insertVideoImage: '', // 插页激励视频图片
            isInsertVideoTouch: false, // 插页激励视频触碰
            isInsertVideoClick: false, // 插页激励视频点击
            isAwardVideoShow: false, // 阅读任务激励视频展示
            isAwardAdShow: false, // 阅读任务激励视频尾帧展示
            needExitApp: false, // 需要退出应用
            isExitApp: false, // 开启退出应用
            isVerticalBackButton: false, // 返回按钮样式是否为竖版上下排列

            // 翻页参数
            propObj: {
                width: 0,
                height: 0,
            },
            readType: 'list', // 阅读模式
            hasReadType: false, // 是否固化翻章方式
            readTypeSwitch: true, // 翻章选项开关
            contentArr: [], // 章节内容
            swiperInit: false, // swiper初始化
            showSwiper: false, // swiper展示
            showSlider: false, // slider展示
            hasPreChapter: false, // 是否有上一章
            hasNextChapter: false, // 是否有下一章
            chapterState: 'next', // 章节状态 pre/next
            pageNum: 0, // 当前页数
            currentPage: 0, // 当前页数
            clickInterval: 0, // 间隔
            remainPage: 0, // 上一章节计算页数
            readerCount: 0, // 渲染索引
            isFirstLoadReader: true, // 是否首次渲染
            hasLoadReader: false, // 渲染过阅读器
            hasInsertAd: false, // 渲染过插页广告

            needRequestRec:false, // 是否需要请求章末推荐接口
            hasRequestRec: false, // 是否已经发送章末推荐请求
            canLastPageRec: true, // 能否展示章末推荐
            isShowRecommend:false, // 是否展示章末推荐书籍
            hasShowRec: false, // 章末推荐 是否 已经渲染过
            canRec: false,
            // 章末推荐配置
            chapterEndRec: {
                startChapter: '', // 起始章节
                chapterInterval: '', // 章节间隔
            },
            dbRecommend:{}, // 章末推荐数据
            isRecDelayShow: '',
            recClickTimer: null,
            
            // 听书参数
            timbreList: [], // 音色列表
            speedList: [], // 语速列表
            defaultTimbre: '', // 默认音色
            defaultSpeed: '', // 默认语速
            ttsToken: '', // TTS 实时接口token
            isRequestTts: false, // 语音接口请求
            ttsPreloadNum: 2, // 听书预加载
            isListenTaskLoading: false, // 听书奖励领取中
            extraListenSwitch: false, // 临时听书开关
            extraListenTime: 0, // 临时听书截止时间
            showListenPop: false, // 听书弹窗
            // 听书任务
            listenTask: {
                taskId: '',
                hasFree: false, // 首次免费
                freeTimeLast: 0, // 免费时长
                remainTimes: 0, // 剩余次数
                taskTimeLast: 0, // 免费时长
                isExpired: false, // 听书过期
                memberBtnStyle: false,
                videoBtnStyle: false,
                memberBtnText: '',
                videoBtnText: '',
                freeEndText: '',
                freeBtnText: '',
                freeText: '',
            },

            // 章末红包参数
            isShowRedEnvelopes: false,           // 是否展示章末红包任务
            redTaskExpireTime: 0,                // 红包任务过期时间
            // 章末红包任务
            chapterEndRedTask: {
                isReady: false,                  // 数据准备完成
                taskTitle: '',                   // 红包任务标题
                taskId: '',                      // 任务ID
                beginIndex: '',                  // 开始章节
                showInterval: '',                // 展示章节间隔
                coolingTime: 0,                  // 冷却时间
                clickCompletedNum: 0,            // 完成奖励次数
                awardArray: [],                  // 红包数组
                callbackUrl: '',                 // 域名
                zfbAppId: '',                    // 当前应用支付宝平台上的appId
            },
            aliPayRedVideoId: '5001199101' ,     // 支付宝红包视频广告位Id
            aliPayRedTitle: '',                  // 红包任务标题
            countTime: 0,                        // 倒计时时长
            taskCoolStartTime: 0,                // 倒计时冷却开始时间戳
            redVideoIndex: -1,                   // 视频索引
            deeplinkIndex: -1,                   // 支付宝拉起索引
            redSelectedIndex: -1,                // 红包点击位序

            // 章末支付宝红包激励视频信息
            aliPayRedVideoTactics: {},           // 章末支付宝红包激励视频策略信息
            aliPayRedVideoInfo: {
                aliPayRedVideoSwitch: false,     // 章末支付宝红包激励视频开关
                isAliPayRedVideoShow: false,     // 章末支付宝红包视频是否展示
                isAliPayRedAdShow: false,        // 章末支付宝红包视频尾帧是否展示
                isAliPayRedVideoLoading: false,  // 章末支付宝红包视频加载
            },
            //  支付宝红包参数
            isZhiFuBaoBind: false,               // 支付宝是否绑定
            clickCountDownInterval: null,        // 支付宝红包点击定时器
            hasTryPullAliPay: false,             // 是否尝试拉起支付宝     
        },
        public: {
            uuid:'',
            diaLoadingShow:true,
            diaLoadErrShow:false,
            chapterContent: [],
            preChapterId: '',
            nextChapterId: '',
            nextChapterName:'',
            directoryChapterId: '',
            sequence: true,
            userHeaderJson: '',
            isAdd:'',
            bookName:'',
            onBackPressToPage:'',
            appName:'',
            chapterIndex:1,
            sharebg:'spbbg_4',
            shareshow:false,
            sitenum:1,
            sharetabshow:false,
            isbutshare:false,
            isshareB:2,
            isshareP:2,
            renderFist:true,
            shareActionTime: 0,
            oshareAction: false,
            shareEndTime: 0,
            scallbackTime: 5,
            oissign:false,
            sgetprovider:'',
            ogetavailableplatforms:'',
            opopShareVo:{},
            obuttomShareVo:{},
            osharenext:{
                ochapterId:'',
                sharenext:''
            },
            // 阅读页设置
            setupJson: {
                bgColorIndex: 3,
                bgColor: 'rgba(246,230,195,1)',
                loadImg: '../Common/images/load_yellow.gif',
                fontSize: 48,
                bNight: false,
                lineheight: 86,
            },
            bShowDashboard:false,
            nightColor:'rgba(29,29,31,1)',
            nightFontColor:'#7E8286',
            nightloadImg:'../Common/images/load_night.gif',
            exitback:false,
            readNum:{ // 2150 系统配置相关
                nowReadNum:0,   // 记录当前读了几章
                serverReadNum:0,
                readQuitNum:0,
            }, 
            readInText:'',
            readOutText:'',
            systemInText:'',
            backBtnDialog:false,   //加桌弹窗的展示
            isShortCutShow:true,
            isFirsInt:true,// 第一次进入页面

            channelCode:'dz_hmxs',
            jumpPage:'Index',
            bookId: '',
            chapterId: '',
            chapterName: '',
            pageFrom:'',
            refererPage:'',
            getBookNum:0, // 获取书籍内容次数
            getUserNum:0,// 获取注册次数
            chapternull:'',
            fromUserStayPop:false,
            bookInfo:{},
            bookList:[],
            // 章末文字链
            textLink: null,
            // 章末文字链运营位名称
            textLinkOperationName: '',
            textLinkUserTacticsVo: {},
            // 悬浮挂件运营位
            readPageWidget: {}, // 挂件对象
            hanggingHolderOperationName: '',
            hanggingHolderUserTacticsVo: {},
            // 章末文字链是否已展示
            textLinkShouldShow: false,
            // 阅读页挂件是否显示
            hangingHolderShow: false,
            // 阅读页挂件曝光打点开关
            hangingHolderShenceOn: true,
            isBookMainShow:false,// 书籍内容是否显示
            canBack:false,
            isFirstRend:true,
            jobId:'',
            NotificationTaskId:'',
            preloadNum:0,
            isNeedpreload:true,
            isBtnshow:true,
            rechargeShow:false,
            rechargeObj:{},
            errorTimeout:null,
            refreshPage:false,
            orderObj:{},
            autoPay:'',
            confirmPay:1,
            sid:'',
            isAuthorize:0,
            isOlder:1,
            authShow:false,
            calledPlatform:'',
            oppoBrow:false,
            partArr:[],
            audioArr:[],
            isPlaying:false,
            hasListenNum:0,
            curPartIndex:0,
            isListen:false,
            minIndex:0,
            maxIndex:-1,
            hasPlayed:false,
            isReqReturn:false,
            curTimbre:'1',
            hasToTimbre:false,
            listenTime:0,
            coloseTimeout:null,
            listenSwitch: false,
            ischangeset:false,
            isGoOn:true,
            payType:'',
            agingNum:0,
            apiFailNum:0,
            hasClickStop:false,
            SourcePosition:'',
            shenceData:{},
            stayOperation:{},
            stayTacticsVo:{},
            isAuthShortcutShow:false,
            hasAuthShortcut:false,
            isShortpop:false,
            shortType:'1',
            hasShowSuccess:false,
            shortbtnType:0,
            btnText:'',
            btnSysText:'',
            irtt:[],
            authShortcut:0,
            hasAuthed:false,
            shareSite:'',
            authTips:'',
            hasJumpChapter:false,
            first_reading:'',
            shortAwrad:false,
            firstNext:true,
            netShortAward:0,
            timeDif:0,
            nextShortText:'',
            nextShortType:-1,
            nextShortSign:0,
            fromPlace:'',
            reqReturnTime:0,
            isPrePlaying:false,
            omap:'',
            isUpdateOmap:1,
            NotificationTime:'',
            isRequestingExit:false,
            needAdvancePay: false,
            advanceSign: 0,
            source: '', //追更push,有值不更新omap,

            // 广告参数
            isAdShow: 0,
            oppoLock: 0,
        },
        toggleBtn(){
            this.isBtnshow = false
        },
        // 点击关闭阅读页挂件
        routeHangingClose(){
            let that = this
            that.$app.readHangingHolderClose = false
            if(that.readPageWidget.startChapterId != undefined && that.readPageWidget.endChapterId != undefined){
                that.hangingHolderShow = (that.chapterIndex >= that.readPageWidget.startChapterId && that.readPageWidget.endChapterId >= that.chapterIndex) && that.$app.readHangingHolderClose
            }else{
                that.hangingHolderShow = false
            }
        },
        // 中部广告滚动距离判断
        fnScrollPositionHandle (event) {
            if(event.scrollState == 1 || event.scrollState == 2) {
                this.scrollPosition += event.scrollY
                if(this.scrollPosition > this.middleAdloadPosition) {
                    this.scrollToLoadPosition = true
                }
            }
        },
        closeUserStay(){
            this.userStay = false
            this.userStayDetail = false
            this.fnShowShortcut(0)
        },
        fnPrevChpter(){
            console.log('-----fnPrevChpter-----')
            if(this.isNeedEnterAdWall && !this.isNoAd) {
                setTimeout(() => {
                    this.fnRouterToAdWall()
                }, 200)
                return
            }
            this.confirmPay = 1
            this.fnLodeChapterInfo(this.bookId,this.preChapterId,'prev')            
        },
        fnNextChapter(confirmPay,autoPay){
            console.log('-----fnNextChapter-----')
            let that = this
            if(that.isNeedEnterAdWall && !this.isNoAd) {
                setTimeout(() => {
                    that.fnRouterToAdWall()
                }, 200)
                return
            }
            if(confirmPay){
                that.confirmPay = 2
            }else{
                that.confirmPay = 1
            }
            if(autoPay){
                that.autoPay = autoPay
            }
            if(that.nextShortType==5){
                let _infotype = that.$app.dataJson.infotype || 'nfind';
                if(_infotype == 'shortcut'){
                    // console.log('已创建桌面图标')
                    that.fnLodeChapterInfo(that.bookId,confirmPay?that.orderChapterId:that.nextChapterId,confirmPay?that.orderDirection:'next')
                }else{
                    shortcut.hasInstalled({
                        success:function(res){
                            if(res){
                                that.fnLodeChapterInfo(that.bookId,confirmPay?that.orderChapterId:that.nextChapterId,confirmPay?that.orderDirection:'next')
                            }else{
                                that.nextShortcut(confirmPay)
                            }
                        },
                        fail:function(data,code){
                            that.fnLodeChapterInfo(that.bookId,confirmPay?that.orderChapterId:that.nextChapterId,confirmPay?that.orderDirection:'next')
                            that.$app.$def.quickappLog([703, {
                                qmap:{
                                    source:"shortcut_hasInstalled_fail",
                                    thisUri:that.$page.uri,
                                    thisPage:"Read",
                                    data,
                                    code,
                                }
                            }, 'catch_error'], that)
                        }
                    })
                }
                
            }else{
                that.fnLodeChapterInfo(that.bookId,confirmPay?that.orderChapterId:that.nextChapterId,confirmPay?that.orderDirection:'next')
            }
        },
        nextShortcut(confirmPay){
            let that = this
            that.stopListen()
            that.$app.$def.quickappLog([703, {
                qmap:{
                    site: '1',
                    page: '3',
                    sorce:'next_shortcut'
                }
            }, 'shortcut'], that)
            shortcut.install({
                message: that.nextShortText||that.systemInText,
                success: function () {
                    if(that.nextShortSign){
                        that.fnLodeChapterInfo(that.bookId,confirmPay?that.orderChapterId:that.nextChapterId,confirmPay?that.orderDirection:'next')
                    }
                     that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                        IsSuccess: true,
                        PositionName: '阅读页下一章添桌',
                        ChaptersNum: that.chapterIndex,
                        Instruction: that.nextShortText || that.systemInText,
                        StateCode: 'return'
                    }); 
                    //来源写入变量
                    that.$app.dataJson = Object.assign({}, {infotype:'shortcut'});
                    prompt.showToast({
                        message: '成功创建桌面图标'
                    });
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site: '2',
                            page: '3',
                            sorce:'next_shortcut'
                        }
                    }, 'shortcut'], that)
                    that.$app.$def.requestData(that,{
                        interface: `/glory/fastapp/2107`,
                        data: {
                            isas:1
                        },
                        succ: function (res) {
                            if(res.data.freeLimitAll){
                                that.$app.shortSuccessText = res.data.freeLimitAll
                            }
                            that.showShortSuccess()
                        },
                        error: function (code) {
                            that.showShortSuccess()
                        }
                    })
                    that.isShortCutShow = false
                    that.fnTellServer(1);
                },
                fail: function (data, code) {
                     that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                        IsSuccess: false,
                        PositionName: '阅读页下一章添桌',
                        ChaptersNum: that.chapterIndex,
                        Instruction: that.nextShortText || that.systemInText,
                        StateCode: 'return',
                        MsgSendCode: code,
                        MsgSendContent: data,
                    }); 
                    prompt.showToast({
                        message: '创建桌面图标失败'
                    })
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site: '3',
                            page: '3',
                            source:'shortcut_install_next_fail',
                            thisUri: that.$page.uri,
                            thisPage: 'Read',
                            data,
                            code,
                        }
                    }, 'catch_error'], that)
                },
                complete(errmsg){
                    if(!that.nextShortSign){
                        that.fnLodeChapterInfo(that.bookId,confirmPay?that.orderChapterId:that.nextChapterId,confirmPay?that.orderDirection:'next')
                    }
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site: '5',
                            page: '3',
                            errmsg:`${errmsg}`,
                            sorce:'next_shortcut'
                        }
                    }, 'shortcut'], that)
                }
            })
            that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                PositionName: '阅读页下一章添桌',
                ChaptersNum: that.chapterIndex,
                Instruction: that.nextShortText || that.systemInText,
                StateCode: 'submit',
                DesktopState: that.$app.isAddDesktop ? 'Deleted' : 'Neversaved'
            }); 
        },
        fnGetBookshelf() {
            let that = this
            storage.get({
                key: 'bookshelf',
                success: function(data) {
                    if (data) {
                        try {
                            let bookshelfInfo = JSON.parse(data)
                            that.bookshelfInfo = bookshelfInfo
                            let bookshelfList = that.bookshelfInfo.content
                            if (bookshelfList && bookshelfList.length) {
                                that.bookshelfIndex = bookshelfList.findIndex(item => item.bookId == that.bookId)
                                if (that.bookshelfIndex != -1) {
                                    that.fnSortBookshelf()
                                }
                            }
                        } catch(e) {}
                    }
                }
            })
        },
        fnSortBookshelf() {
            let bookshelfList = this.bookshelfInfo.content
            let currentBookInfo = bookshelfList.splice(this.bookshelfIndex, 1)
            this.bookshelfInfo.content = currentBookInfo.concat(bookshelfList)
            this.fnSaveBookshelf()
        },
        fnSaveBookshelf() {
            let that = this;
            if(!(that.bookshelfInfo && that.bookshelfInfo.content && that.bookshelfInfo.content.length)) {
                return
            }
            if(that.bookshelfInfo.content[0].bookId != that.bookId) {
                return
            }
            that.bookshelfInfo.content[0].chapterId = that.chapterId
            storage.set({
                key: 'bookshelf',
                value: JSON.stringify(that.bookshelfInfo),
                success: function() {
                    console.log('书架缓存存储成功')
                },
                fail: function(data, code) {
                    that.$app.$def.quickappLog([703, {
                        qmap: {
                            source: "storage_set_bookshelf_fail",
                            thisUri: that.$page.uri,
                            thisPage: "Read",
                            data,
                            code,
                        }
                    }, 'catch_error'], that)
                }
            })
        },
        preLoadChapter(ignoreChapterIds,isShenceRead){
            let that = this
            let data = {}
            let isPreload = 0;
            let sourceT = '';
            if(ignoreChapterIds){
                if(ignoreChapterIds[0]){
                    data = { isBr: 0, bookId: that.bookId,chapterId:that.chapterId,ignoreChapterIds:ignoreChapterIds,autoPay:that.autoPay,uuid:that.$app.sourceInfo['uuid'],pullMode:that.$app.sourceInfo['pullMode'],omap:JSON.stringify(that.omap),isUpdate:that.isUpdateOmap,SourcePosition:that.SourcePosition }
                }else{
                    data = { isBr: 0, bookId: that.bookId,chapterId:that.chapterId,autoPay:that.autoPay,uuid:that.$app.sourceInfo['uuid'],pullMode:that.$app.sourceInfo['pullMode'],omap:JSON.stringify(that.omap),isUpdate:that.isUpdateOmap,SourcePosition:that.SourcePosition }
                }
                isPreload = 1;

            }else{
                data = { isBr: 0, bookId: that.bookId,chapterId:that.chapterId,autoPay:that.autoPay,uuid:that.$app.sourceInfo['uuid'],pullMode:that.$app.sourceInfo['pullMode'],omap:JSON.stringify(that.omap),isUpdate:that.isUpdateOmap,SourcePosition:that.SourcePosition }
                isPreload = 0;
                
            }
            if(isPreload){
                sourceT='preload_chapter';
            }else{
                sourceT='get2151';
            }

            let _infotype = that.$app.dataJson.infotype || 'nfind';
            if(_infotype == 'shortcut'){
                // console.log('已创建桌面图标')
                that.$app.$def.quickappLog([701, {
                    qmap:{
                        preload:isPreload,
                        bookId:that.bookId,
                        chapterId:that.chapterId,
                        sid:that.sid,
                        isas:'shortcut',
                        sorce:sourceT,
                        cindex:that.chapterIndex,
                        oaid:that.$app && that.$app.oaid || ''
                    },
                    omap:that.omap
                }], that)
            }else{
                // 打点 是否添加桌面 阅读PV
                shortcut.hasInstalled({
                    success: function (ret) {
                        //是否添加到桌面   0否  1是
                        let isas = 0;
                        if (ret) {
                            isas = 1;
                        }
                        that.$app.$def.quickappLog([701, {
                            qmap:{
                                preload:isPreload,
                                bookId:that.bookId,
                                chapterId:that.chapterId,
                                sid:that.sid,
                                isas:isas,
                                sorce:sourceT,
                                cindex:that.chapterIndex,
                                oaid:that.$app && that.$app.oaid || ''
                            },
                            omap:that.omap
                        }], that)
                    },
                    fail(data, code) {
                        //阅读页pv打点
                        that.$app.$def.quickappLog([701,{
                            qmap:{
                                preload:isPreload,
                                bookId:that.bookId,
                                chapterId:that.chapterId,
                                sid:that.sid,
                                isas:0,
                                sorce:sourceT,
                                source:'shortcut_hasInstalled_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                cindex:that.chapterIndex,
                                oaid:that.$app && that.$app.oaid || ''
                            },
                            omap:that.omap
                        },'catch_error'], that);
                    },
                    complete(errdata, errcode) {}
                });
            }
            
            data.hmManualAddFlag = 1, // 670支持手动加书架，此字段服务端用于版本判断
            that.$app.$def.requestData(that,
                {
                    url:'/Read',
                    interface: '/glory/fastapp/2152',
                    data: data,
                    succ: function (res) {
                        that.isUpdateOmap = 0
                        let value = res.data
                        let directory = []
                        that.preloadNum = value.preloadNum
                        // 记录系统时间
                        if(res.data && res.data.sysTime) {
                            that.sysTime = res.data.sysTime
                        }
                        if(value.chapterInfo.length){
                            value.chapterInfo.forEach((chapterInfo,index) => {
                                chapterInfo.warnTip = value.warnTip
                                chapterInfo.isJp = value.isJp
                                chapterInfo.bookId = value.bookId
                                chapterInfo.preloadNum = value.preloadNum
                                chapterInfo.expireTime = value.lfTime||0
                                chapterInfo.bookName = value.bookName
                                chapterInfo.maxChapter = value.maxChapter
                                that.fnSetReadfile(chapterInfo)
                                let aDirectory = {cid:chapterInfo.chapterId,cindex:chapterInfo.chapterIndex}
                                directory.push(aDirectory)
                            })
                            that.fnSetDirectory(directory)
                        }
                        //重写omap   大数据打点优先级：实时 > 固定   神策打点优先级： 固定 > 实时 
                        if(res.data&&res.data.omap){
                            if (that.omap && Object.keys(that.omap).length == 0) {
                                that.omap = JSON.parse(res.data.omap)
                            }
                            let omap = JSON.parse(res.data.omap)
                            that.fnGetSorcePosition(omap)
                        }
                        // 书架判断
                        that.isInBookShelf = !!(res.data && res.data.isInBookShelf);
                        if(res.data.autoAdd === 1) {
                            that.isInBookShelf = true;
                            if(that.fromPlace != 'login') {
                                prompt.showToast({
                                    message: '已为您自动加入书架'
                                });
                            }
                        }
                        if(isShenceRead){
                            //神策相关数据
                            that.shenceData.IsVIP=res.data.isVip
                            that.shenceData.FirstType=res.data.firstType
                            that.shenceData.SecondType=res.data.secondType
                            that.shenceData.ThirdType=res.data.thirdType
                            that.shenceData.PayType=res.data.payType
                            that.shenceData.Author=res.data.author
                            that.shenceData.MAXChapter=res.data.maxChapter
                            that.shenceData.ChaptersPayType=res.data.chaptersPayType
                            that.shenceData.ChaptersCoins=res.data.chaptersCoins
                            that.shenceData.BookFinishStatus=res.data.bookFinishStatus
                            that.shenceData.BookStatus=res.data.bookStatus
                            that.shenceData.SensitivityLevel=res.data.sensitivityLevel
                            that.shenceData.UpdateTime=res.data.updateTime
                            that.shenceData.first_reading=res.data.first_reading
                            let uptime = (new Date(that.shenceData.UpdateTime)).getTime()
                            let curtime = new Date().getTime()
                            let tdiff = that.getDuration(curtime-uptime)
                            console.log(tdiff)
                            that.shenceData.TimeDifference=tdiff

                            that.$app.shenceLog.log(that,'track','ReadBook', {
                                IsVIP:that.shenceData.IsVIP,
                                ReadType:that.isListen?'语音阅读':'文字阅读',
                                BookID:that.bookId,
                                BookName:that.bookName,
                                ChaptersNum:that.chapterIndex,
                                ChaptersID:that.chapterId,
                                ChaptersName:that.chapterName,
                                FirstType:that.shenceData.FirstType,
                                SecondType:that.shenceData.SecondType,
                                ThirdType:that.shenceData.ThirdType,
                                PayType:that.shenceData.PayType,
                                Author:that.shenceData.Author,
                                MAXChapter:Number(that.shenceData.MAXChapter),
                                TimeDifference:that.shenceData.TimeDifference,
                                ChaptersPayType:that.shenceData.ChaptersPayType,
                                ChaptersCoins:that.shenceData.ChaptersCoins,
                                BookFinishStatus:that.shenceData.BookFinishStatus,
                                BookStatus:that.shenceData.BookStatus,
                                SensitivityLevel:that.shenceData.SensitivityLevel?(that.shenceData.SensitivityLevel+''):'-1',
                                UpdateTime:that.shenceData.UpdateTime,
                                Duration:0,
                                FirstReading:that.shenceData.first_reading,
                                BgColor:that.setupJson['bNight'] ? that.nightColor : that.setupJson.bgColor,
                                FontSize:that.setupJson.fontSize,
                                Timbre:that.$app.listenJson.timbre,
                                FlipType:(that.isSupportNewReader && that.readType == 'page')?'左右翻章':'跳转翻章',
                                Origin: that.omapOrigin,
                                ColumnName: that.omapCname
                            });
                        }
                        that.fnHangingHolder()
                    },
                    error: function (code) {              

                    }
                }
            )
        },
        fnCallDashboard(){
            let that = this
            if(that.needAdvancePay){
                return
            }
            if(this.bShowDashboard) {
                this.hasDashboradShow = true
            }
            this.bShowDashboard = !this.bShowDashboard;
            if(this.bShowDashboard && !this.hasMenuShow) {
                this.fnSetMenuShowCache()
            }
            that.$app.$def.quickappLog([702, {
                qmap: {
                    site: '1',
                    bid: that.bookId,
                    cid: that.chapterId,
                    sid:that.sid,
                    play: that.bShowDashboard
                }
            }, 'call_dashboard'], that)
        },
        fnGetSetupFromStorage() {
            let that = this;
            that.$app.$def.getStorageFile(that, {
                key: 'setupJson',
                success: (data) => {
                    let res = data ? JSON.parse(data) : '';
                    if (data) {
                        that.setupJson = res;
                        setTimeout(() => {
                            that.hasSetupJsonLoad = false
                        }, 0)
                        setTimeout(() => {
                            that.hasSetupJsonLoad = true
                        }, 200)
                    }
                }
            })
        },
        //表示ViewModel的数据已经准备好，可以开始使用页面中的数据
        onInit(e) {
            let that = this;
            that.$app.$def.fnCreateAd.call(that);            // 创建当前页面的广告存储对象
            that.$app.lastOpenPage = ''
            that.defaultChannelCode = that.$app.$data.channelCode;
            that.fnGetSetupFromStorage();
            that.fnShortcutHandle()
            that.fnSupportNewReader()
            that.fnGetProperty()
            that.fnGetReadType()
            that.fnGetReadTimes()
            that.fnGetNewReaderMask()
            that.fnGetBackDialogTimes()
            that.fnGetDeviceInfo()
            that.fnGetInsertVideoCache()
            that.fnGetPreVideoCache()
            that.fnGetMenuShowCache()
            if(that.pageFrom === '/BookDetail') {
                that.$app.bookDetailScroll = true
            }
            //修复SourcePosition,之前的值废弃，采用omap中的值
            that.SourcePosition = ''
            // 阅读退出推荐书籍
            that.userStay = false;
            that.userStayDetail = false;
            // 一键加桌判断
            that.cutSupport = that.$app.$def.fnCheckOnekeycutSup(that)
            // vivopush支持判断
            try {
                if(account.getProvider().toLowerCase() == 'vivo' && that.$app.$def.fnVivoPushSupport(that)) {
                    account.isLogin({
                        success: function (data) {
                            if(data.isLogin) {
                                try {
                                    that.vivoPush = require('@system.vivopush')
                                    if(that.vivoPush && that.vivoPush.getstate) {
                                        that.vivoPush.getstate({
                                            success: function() {
                                                that.isSupportVivoPush = true
                                            }
                                        })
                                    }
                                }catch(e) { console.log(e) }
                            }
                        }
                    })
                }
            } catch(e) { console.log(e) }
            // 开屏广告展示判断
            if(that.isAdShow && that.isAdShow == 1 && that.isFirstLoadOpen) {
                that.isFirstLoadOpen = false
                that.isOpenScreenShow = true
            }
            if(that.oppoLock && that.oppoLock == 1) {
                that.needExitApp = true
            }
            try {
                if(that.omap != '' && typeof(that.omap) == 'string') {
                    that.omap = JSON.parse(that.omap)
                }
            } catch(e) {}
            if(that.NotificationTaskId){
                that.isUpdateOmap = 0
                that.omap = {}
            }
            if(that.jobId&&that.source==''){
                let trigger_time = that.$app.$def.getLogTime()
                that.omap = {
                    origin:'push',
                    action:'2',
                    channel_id:that.jobId,
                    channel_name:'推送',
                    channel_pos:0,
                    column_id:that.jobId,
                    column_name:'推送',
                    column_pos:0,
                    content_id:that.bookId,
                    content_pos:0,
                    content_type:'2',
                    trigger_time:trigger_time
                }
                that.$app.$def.quickappLog([702, {
                    omap:that.omap
                }, 'book_click'], that)
            }
            that.fnGetSorcePosition()
            that.fnCheckScStart()
            that.$app.$def.getOaid().then(oaid => {
                that.$app.isGetOaid = true
                that.$app.oaid = oaid
            }).catch(() => {})
            //获取来源
            //获取书籍来源分别处理缓存
            that.getisAutopay()
            let ogetinfo = app.getInfo();
            that.config=that.$app.$data;
            that.errorTimeout = setTimeout(function(){
                that.diaLoadErrShow = true
                that.refreshPage = true
                that.$app.$def.quickappLog([703, {
                    qmap:{
                        bid:that.bookId,
                        cid:that.chapterId,
                        sid:that.sid,
                        type:'show'
                    }
                }, 'weak_net'], that)
                that.$app.$def.requestData(that,{
                    interface: '/glory/fastapp/2174',
                    data: { page: that.$page.path,event:'weak_net',content:JSON.stringify({bid:that.bookId,cid:that.chapterId,sid:that.sid})},
                    succ: function (res) {
                        console.log(res)
                    }
                })
            },3000)
            // 获取章节内容
            that.fnLodeChapterInfo(that.bookId, that.chapterId)
            // 注册用户
            that.getUserIdLogic();
            that.sequence = false;
            that.appName=that.$app.$data.name;
            // 阅读时长开始
            that.readStartTime = parseInt(new Date().getTime() / 1000)
            that.shenceReportTime = parseInt(new Date().getTime() / 1000)
            //分享功能支持判断
            that.sgetprovider = shareSe.getProvider();
            shareSe.getAvailablePlatforms({
                success(data) {
                    that.ogetavailableplatforms = data.platforms;
                },
                fail(data, code) {
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            source:"shareSe_getAvailablePlatforms_fail",
                            thisUri:that.$page.uri,
                            thisPage:"Read",
                            data,
                            code,
                        }
                    }, 'catch_error'], that)
                }
            })
             if(that.uuid){
                that.$app.$def.quickappLog([703, {
                    qmap:{
                    uuid:that.uuid,
                    sorce:'read'
                    }
                }, 'uuid'], that)
            }

            that.$app.$def.quickappLog([703, {
                qmap:{
                    page:'3',
                    infotype:ogetinfo.source.type,
                    extra:ogetinfo.source.extra
                }
            }, 'source'], that)

            // 是否显示加桌面按钮
            that.isShortCutShow = !that.shareshow && !that.sharetabshow && !that.bShowDashboard && !that.backBtnDialog && !that.diaLoadingShow;

            if(that.jobId||that.NotificationTaskId){
                that.$app.$def.requestData(that,{
                    interface: `/glory/fastapp/2170`,
                    data: {
                        jobId:that.jobId?that.jobId:that.NotificationTaskId,
                        type:that.jobId?1:0
                    }
                })
                 that.$app.$def.quickappLog([703, {
                    qmap:{
                        jobId:that.jobId?that.jobId:that.NotificationTaskId,
                        type:that.jobId?1:0,
                        page:'Read'
                    }
                },'Read'],that);
            }
            if(that.NotificationTaskId){
                that.$app.shenceLog.log(that,'track','NotificationClick', {
                    NotificationId:`${that.NotificationTaskId}#${that.$app.headerJson.userId}#${that.NotificationTime}`,
                    NotificationTaskId:that.NotificationTaskId,
                    NotificationTime:parseInt(that.NotificationTime)
                }); 
                that.$app.$def.quickappLog([703, {
                    qmap:{
                        site: '3'
                    }
                }, 'notification'], that)
            }
            if(!(that.isAdShow && that.isAdShow == 1)){
                that.fnImeiAuth()
            }
            that.$off('exitListen')
            that.$off('pauseAudio')
            that.$on('exitListen',that.exitListen);
            that.$on('pauseAudio',that.fnAudioToPage)
            that.$watch('isRequestTts', 'fnTtsLoadLog')
            that.$watch('isPlaying', 'fnTtsLoadLog')
        },
        fnImeiAuth(){
            let that = this
            if(that.isAuthorize==1&&that.isOlder==0){
                that.getImei()
            }else{
                if(that.fromPlace=='login'){
                    that.afterAuthShortcut()
                }
                that.$app.$def.appSourceinfoLog(that)
            }
        },
        fnTtsLoadLog(){
            let that = this
            if(that.isListen && !that.isPlaying && that.isRequestTts && !that.ischangeset) {
                that.$app.$def.quickappLog([703, {
                    qmap: {
                        site: '3'
                    }
                }, 'requestTTS'], that)
            }
        },
        shortConfirm(){
            let that = this
            that.isWarning = false;
            shortcut.install({
                message: that.nextShortText||that.systemInText,
                success: function () {
                     that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                        IsSuccess: true,
                        PositionName: '阅读页警告弹窗',
                        ChaptersNum: that.chapterIndex,
                        Instruction: that.nextShortText || that.systemInText,
                        StateCode:'return'
                    }); 

                    //来源写入变量
                    that.$app.dataJson = Object.assign({}, {infotype:'shortcut'});
                    prompt.showToast({
                        message: '成功创建桌面图标'
                    });
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site: '2',
                            page: '3',
                            sorce:'warning_shortcut'
                        }
                    }, 'shortcut'], that)
                    that.$app.$def.requestData(that,{
                        interface: `/glory/fastapp/2107`,
                        data: {
                            isas:1
                        },
                        succ: function (res) {
                            if(res.data.freeLimitAll){
                                that.$app.shortSuccessText = res.data.freeLimitAll
                            }
                            that.showShortSuccess()
                        },
                        error: function (code) {
                            that.showShortSuccess()
                        }
                    })
                    that.fnTellServer(1);
                },
                fail: function (data, code) {
                     that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                        IsSuccess: false,
                        PositionName: '阅读页警告弹窗',
                        ChaptersNum: that.chapterIndex,
                        Instruction: that.nextShortText || that.systemInText,
                        StateCode: 'return',
                        MsgSendCode: code,
                        MsgSendContent: data,
                    }); 
                    prompt.showToast({
                        message: '创建桌面图标失败'
                    })
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site: '3',
                            page: '3',
                            sorce:'warning_shortcut',
                            source:'shortcut_install_fail',
                            thisUri: that.$page.uri,
                            thisPage: 'Read',
                            data,
                            code,
                        }
                    }, 'catch_error'], that)
                },
                complete(errmsg){
                    that.fnGetNextCut()
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site: '5',
                            page: '3',
                            errmsg:`${errmsg}`,
                            sorce:'warning_shortcut'
                        }
                    }, 'shortcut'], that)
                    storage.get({
                        key:'warningNum',
                        success:function(res){
                            if(res){
                                console.log(res)
                                res++
                                storage.set({
                                    key:'warningNum',
                                    value:res
                                })
                            }else{
                                storage.set({
                                    key:'warningNum',
                                    value:1
                                })
                            }
                           
                        }
                    })
                }
            })
            that.$app.shenceLog.log(that,'track','ButtonClick', {
                ButtonName: '阅读页警告加桌弹窗',
                ButtonContent: '去添加',
                BookID: that.bookId || ''
            });
            that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                PositionName: '阅读页警告弹窗',
                ChaptersNum: that.chapterIndex,
                Instruction: that.nextShortText || that.systemInText,
                StateCode: 'submit',
                DesktopState: that.$app.isAddDesktop ? 'Deleted' : 'Neversaved'
            }); 
            that.$app.$def.quickappLog([703, {
                qmap:{
                    site: '1',
                    page: '3',
                    sorce:'warning_shortcut'
                }
            }, 'shortcut'], that)
        },
        fnWarningClose() {
            this.isWarning = false;
        },
        downloadApk(){
            let that = this
            that.isWarning = false;
            storage.get({
                key:'apkUrl',
                success:function(res){
                    if(res){
                        console.log('已有apkurl，直接拉起安装')
                        router.push({
                            uri:res
                        })  
                    }else{
                        console.log('没有apkurl，下载并安装')
                        request.download({
                            url:'https://xsmfdq.kkyd.cn/app/apk/daquan_1.0.0.apk',
                            description:that.$app.$data.name,
                            filename:`${that.$app.$data.name}.apk`,
                            success:function(ret){
                                console.log(ret)
                                request.onDownloadComplete({
                                    token: ret.token,
                                    success: function(data) {
                                        console.log(data.uri)
                                        storage.set({
                                            key:'apkUrl',
                                            value:data.uri
                                        })
                                        router.push({
                                            uri:data.uri
                                        })                                 
                                    },
                                    fail: function(data, code) {
                                        console.log(`handling fail, code = ${code}`)
                                    }
                                })
                            },
                            fail: function (data, code) {
                                console.log(`handling fail, errCode = ${code}`)
                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        source:"request_download_fail",
                                        thisUri:that.$page.uri,
                                        thisPage:"Read",
                                        data,
                                        code,
                                    }
                                }, 'catch_error'], that)
                            }
                        })
                    }
                }
            })
            
        },
        rechargeShortcut(){
            let that = this
            let _infotype = that.$app.dataJson.infotype || 'nfind';
            if(_infotype == 'shortcut'){
                // console.log('已创建桌面图标')
            }else{
                shortcut.hasInstalled({
                    success:function(res){
                        if (!res) {
                            that.isWarning = true
                            that.$app.shenceLog.log(that,'track','PopupExposure', {
                                PositionName:'阅读页警告加桌弹窗',
                                ChaptersNum:that.chapterIndex,
                                DesktopState:that.$app.isAddDesktop?'Deleted':'Neversaved'
                            });
                        }
                    }
                })
            }
        },
        getUserStay(){
            let that = this
            that.$app.$def.requestData(that,
                {
                    url:'/Read',
                    interface: '/glory/fastapp/2153',
                    data: { bookId: that.bookId, version:1},
                    succ: function (res) {

                        // 新增阅读退出挽留书籍字段 1新版本单本书  3老版本多本书
                        if(res && res.data && res.data.styleType == 1 && res.data.bookVo){
                            that.isNewUser = true   
                            that.bookInfo = res.data.bookVo
                            that.userStayType = res.data.styleType
                            that.stayOperation = res.data.operationInfo
                            that.stayTacticsVo = res.data.userTacticsVo||{}
                        }else if (res && res.data && res.data.styleType == 3 && res.data.books[0]) {
                            that.isNewUser = true                            
                            that.bookList = res.data.books
                            that.userStayType = res.data.styleType
                            that.stayOperation = res.data.operationInfo
                            that.stayTacticsVo = res.data.userTacticsVo||{}
                        }else{
                            that.isNewUser = false
                        }
                    },
                    error: function (code) {
                            that.isNewUser = false
                    }
                }
            )
        },
        /**
         * 章节加载
         */
        fnLodeChapterInfo(bookId, nowchapterId, chapternull) {
            console.log('-----fnLodeChapterInfo-----')
            let that = this;
            if(that.isLoadChapter) {
                return
            }
            if(!(that.isSupportNewReader && that.readType == 'page')) {
                that.isLoadChapter = true
                setTimeout(() => {
                    that.isLoadChapter = false
                }, 1000)
            }
            if(that.isGetAdSettingError) {
                that.isGetAdSettingError = false
                that.fnGetAdSetting()
            }
            if(that.isGetSettingError) {
                that.isGetSettingError = false
                that.getServerUtil()
            }
            if(that.isGetServerError) {
                that.isGetServerError = false
                that.getServerInit()    
            }
            that.hasJumpChapter = true
            that.nowchapterId = nowchapterId
            that.chapterId = nowchapterId;
            that.chapternull = chapternull
            that.$app.$def.quickappLog([703, {
                qmap:{
                    site:'15',
                    ltype:that.isListen?1:2,
                    bid:that.bookId,
                    cid:that.chapterId,
                    sid:that.sid
                }
            }, 'listen_book'], that)

            if (!nowchapterId && chapternull == 'next') {
                that.stopListen()
                router.push({
                    uri:'/ReadEnd',
                    params:{
                        bookId:bookId,
                        bookName:that.bookName,
                        // omap: that.omap
                    }
                })
                return false;
            }
            if(chapternull == 'next'){
                that.$app.$def.quickappLog([702, {
                    qmap:{
                        bookId:bookId,
                        nowchapterId:nowchapterId,
                        sid:that.sid,
                        chapternull:chapternull
                    }
                }, 'read_next_btn'], that)
            }
            if(chapternull == 'prev'){
                that.$app.$def.quickappLog([702, {
                    qmap:{
                        bookId:bookId,
                        nowchapterId:nowchapterId,
                        sid:that.sid,
                        chapternull:chapternull
                    }
                }, 'read_next_btn'], that)
            }

            if (!nowchapterId && chapternull == 'prev') {
                that.$app.$def.quickappLog([702, {
                    qmap:{
                        bookId:bookId,
                        nowchapterId:nowchapterId,
                        sid:that.sid,
                        chapternull:chapternull
                    }
                }, 'read_prev_btn'], that)
                that.hasJumpChapter = false
                prompt.showToast({
                    message: '已经是第一章了',
                    duration: 0
                });
                return false;
            }
            that.directoryChapterId = nowchapterId;

            that.osharenext = {
                ochapterId:nowchapterId,
                sharenext:chapternull
            };
            if(that.sid){
                that.getBookMainOld(nowchapterId);
                return false;
            }
            console.log(JSON.stringify(that.$app.headerJson))
            if(JSON.stringify(that.$app.headerJson) != "{}") {
                try {
                    console.log(that.$app.headerJson.userId)
                    let headerUid = that.$app.headerJson.userId
                    if(headerUid){
                        that.rendPreload(headerUid,nowchapterId)
                    }else{
                        that.getBookMainOld(nowchapterId);
                    }
                } catch (error) {
                    that.getBookMainOld(nowchapterId);
                }
                
            }else{
                let p = that.getHeaderJson();
                p.then(data=>{
                    try {
                        let headerUid = JSON.parse(data).userId
                        if(headerUid){
                            that.$app.headerJson=JSON.parse(data)
                            that.rendPreload(headerUid,nowchapterId)
                        }else{
                            that.getBookMainOld(nowchapterId);
                        }
                    }catch{
                        that.getBookMainOld(nowchapterId);
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                page:'1',
                            }
                        }, 'read_getHeaderJson_err'], that)
                    }
                },err=>{
                    that.getBookMain(nowchapterId);
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            page:'2',
                        }
                    }, 'read_getHeaderJson_err'], that)
                })
                that.$app.$def.quickappLog([703, {
                    qmap:{
                        page:'3',
                    }
                }, 'read_getHeaderJson_err'], that)
            }
        },
        rendPreload(headerUid,nowchapterId){
            let that = this
            that.getIsCancle().then(()=>{
                that.fnGetReadfile().then(res=>{
                    try {
                        let dataObj = JSON.parse(res)
                        let date = new Date().getTime()
                        let bookUIid = dataObj.userId
                        console.log(dataObj)
                        if(headerUid&&headerUid == bookUIid){
                            if(!dataObj.chapterInfo.expireTime||date<dataObj.chapterInfo.expireTime){
                                let chapterString = JSON.stringify(dataObj.chapterInfo.content)
                                let chapterLength = chapterString.length
                                if(!dataObj.chapterInfo.nextChapterId||!dataObj.chapterInfo.content||chapterLength<=100||chapterString.indexOf('<html>')!=-1||chapterString.indexOf('<body>')!=-1||chapterString.indexOf('<br>')!=-1){
                                    //没有章节内容
                                    let url = `internal://files/books/b${that.bookId}/${that.chapterId}.text`
                                    that.fnDeleteFile(url)
                                    that.isNeedpreload = false
                                    that.getBookMainOld(nowchapterId);
                                    that.$app.$def.quickappLog([703, {
                                        qmap:{
                                            bid:that.bookId,
                                            cid:that.chapterId,
                                            sid:that.sid,
                                            site:'2'
                                        }
                                    }, 'cache_error'], that)
                                    return false
                                }
                                // 初始化广告/翻章
                                that.fnInitParams()
                                that.fnInitAdParmas()
                                that.isShortCutShow = true;
                                clearTimeout(that.errorTimeout)
                                that.diaLoadingShow = false;
                                that.diaLoadErrShow = false;
                                that.chapterName = dataObj.chapterInfo.chapterName;
                                that.chapterContent = dataObj.chapterInfo.content
                                that.preChapterId = dataObj.chapterInfo.preChapterId;
                                that.nextChapterId = dataObj.chapterInfo.nextChapterId;
                                if(!that.isFirstRend){
                                    that.$element('readList') && that.$element('readList').scrollTo({ index: 0 });
                                }
  
                                if(that.isListen||that.hasPlayed){
                                    // audio.stop()
                                    audio.pause()
                                    that.isPlaying = false
                                    that.hasPlayed=false
                                    that.hasListenNum = 0
                                    that.audioArr = []
                                    that.minIndex=0
                                    that.maxIndex=-1
                                    if(that.isListen){
                                        setTimeout(function(){
                                            that.divideChapter()
                                        },500)
                                    }
                                }
                                that.isRequestingExit = false
                                that.chapterId = dataObj.chapterInfo.chapterId
                                that.chapterIndex = dataObj.chapterInfo.chapterIndex;
                                that.maxChapter = dataObj.chapterInfo.maxChapter;
                                that.isWarn = dataObj.chapterInfo.warnTip;                     
                                that.preloadNum = dataObj.chapterInfo.preloadNum; 
                                that.bookName = dataObj.chapterInfo.bookName;
                                // 渲染书籍以外的其它内容
                                that.renderBookOth()
                                that.needAdvancePay = false
                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        contentLength:that.chapterContent.length,
                                        sorce:'cache',
                                        bid:that.bookId,
                                        sid:that.sid,
                                        cid:that.chapterId
                                    }
                                }, 'chapter_content'], that)
                                that.fnGetDirectory().then(res=>{
                                    try{
                                        let directory = JSON.parse(res.text).directory
                                        let ignoreChapterIds = []
                                        directory.forEach((cur,index)=>{
                                            if(0<cur.cindex-that.chapterIndex&&cur.cindex-that.chapterIndex<=that.preloadNum){
                                                console.log(cur.cindex-that.chapterIndex)
                                                ignoreChapterIds.push(cur.cid)
                                            }
                                        })
                                        that.preLoadChapter(ignoreChapterIds,true)
                                    }catch{
                                        that.$app.$def.quickappLog([703, {
                                            qmap:{
                                                bid:that.bookId,
                                                sid:that.sid,
                                                cid:that.chapterId
                                            }
                                        }, 'directory_error'], that)
                                        let url = `internal://files/books/b${that.bookId}/`
                                        that.fnDeleteBookFile(url)
                                        that.getBookMainOld(nowchapterId);
                                    }
                                })
                            }else{
                                //清当前章节缓存
                                let url = `internal://files/books/b${that.bookId}/${that.chapterId}.text`
                                that.fnDeleteFile(url)
                                that.isNeedpreload = false
                                that.getBookMainOld(nowchapterId);
                            }
                        }else{
                            //清当前书籍缓存
                            let url = `internal://files/books/b${that.bookId}/`
                            that.fnDeleteBookFile(url)
                            that.getBookMainOld(nowchapterId);
                        }
                    } catch (error) {
                        console.log(error)
                        console.log('渲染出错重新请求')
                        //清当前章节缓存
                        let url = `internal://files/books/b${that.bookId}/${that.chapterId}.text`
                        that.fnDeleteFile(url)
                        that.isNeedpreload = false
                        that.getBookMainOld(nowchapterId);
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                error:error,
                                bid:that.bookId,
                                cid:that.chapterId,
                                sid:that.sid,
                                site:'1'
                            }
                        }, 'cache_error'], that)
                    }
                },err=>{
                    console.log('文件不存在')
                    that.getBookMainOld(nowchapterId);
                })
            },err=>{
                console.log('禁止读缓存')
                that.getBookMainOld(nowchapterId);
            })
        },
        getBookMainOld(nowchapterId){
            // 来源  注册用户进入
            let that = this;
            let curRequestTime = new Date().getTime()
            that.getBookTime = curRequestTime
            that.$app.$def.requestData(that,
                {
                    url:'/Read',
                    interface: '/glory/fastapp/2151',
                    data: {
                        isBr: 0,
                        bookId: that.bookId,
                        chapterId: nowchapterId,
                        sid: that.sid,
                        confirmPay: that.confirmPay,
                        autoPay: that.autoPay,
                        uuid: that.$app.sourceInfo['uuid'],
                        pullMode: that.$app.sourceInfo['pullMode'],
                        omap: JSON.stringify(that.omap),
                        isUpdate: that.isUpdateOmap,
                        chapterEndStyle: 1,
                        isRead: 1,
                        hmManualAddFlag: 1, // 670支持手动加书架，此字段服务端用于版本判断
                    },
                    succ: function (res) {
                        that.apiFailNum=0
                        if(curRequestTime!=that.getBookTime){
                            return false
                        }
                        if(res.retCode==100){
                            that.canBack = true
                        }else{
                            that.isUpdateOmap = 0
                            that.getBookNum = 0;
                            that.renderBookMain(res);
                        }
                    },
                    fail:function(){
                        that.getBookMainErr('getBookMainOld');
                        that.apiFailNum++
                        console.log('================that.apiFailNum==============')
                        console.log(that.apiFailNum)
                        if(that.apiFailNum==3){
                            that.$app.$def.changeApi(that).then((res)=>{
                                console.log('自动重试')
                                setTimeout(function(){
                                    that.fnLodeChapterInfo(that.bookId, that.chapterId)
                                },1000)
                            })
                            that.apiFailNum = 0
                        }
                    }
                }
            )
        },
        getBookMain(nowchapterId){
            // 来源  推广非注册用户 
            let that = this;
            let _headerJson={
                domain: 3,
            }

            fetch.fetch({
                method: "POST",
                url:that.$app.api+"/glory/fastapp/2151?"+that.config.appVer,
                header: _headerJson,
                data: JSON.stringify({
                    isBr: 0,
                    bookId: that.bookId,
                    chapterId: nowchapterId,
                    sid: that.sid,
                    confirmPay: that.confirmPay,
                    autoPay: that.autoPay,
                    uuid: that.$app.sourceInfo['uuid'],
                    pullMode: that.$app.sourceInfo['pullMode'],
                    omap: JSON.stringify(that.omap),
                    isUpdate: that.isUpdateOmap,
                    chapterEndStyle: 1,
                    isRead: 1,
                    hmManualAddFlag: 1, // 670支持手动加书架，此字段服务端用于版本判断
                }),
                success: function (ret) {
                    if(ret.code == 200){
                        that.isUpdateOmap = 0
                        let res=JSON.parse(ret.data);
                        that.getBookNum = 0;
                        that.renderBookMain(res);
                    }else{
                        that.getBookMainErr('getBookMain');
                    }
                },
                fail: function (data, code) {
                    that.getBookMainErr('getBookMain',data,code);
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            source:"fetch_2151data_fail",
                            thisUri:that.$page.uri,
                            thisPage:"Read",
                            data,
                            code,
                        }
                    }, 'catch_error'], that)
                }
            })
        },
        getBookMainErr(getName,data,code){
            let that = this;
            let _data = data ? data : '';
            let _code = code ? code : '';
            that.canBack = true
            clearTimeout(that.errorTimeout)
            that.diaLoadingShow = true;
            that.diaLoadErrShow = false;

            that.$app.$def.requestData(that,{
                interface: '/glory/fastapp/2174',
                data: { page: that.$page.path,event:'net_error',content:JSON.stringify({bid:that.bookId,cid:that.chapterId,sid:that.sid,getBookNum:that.getBookNum})},
                succ: function (res) {
                    console.log(res)
                }
            })

            that.refreshPage = false
            that.$app.$def.quickappLog([703,{
                qmap:{
                    chapterIndex:that.chapterIndex,
                    bookId:that.bookId,
                    chapterId:that.chapterId,
                    sid:that.sid,
                    getBookNum:that.getBookNum,
                    data:_data,
                    code:_code,
                }
            },'read_2151_error'], that);
            if(that.getBookNum == 0){
                that.getBookNum = 1;
                // 分来源不同，自动重试一次
                if(getName == 'getBookMain'){
                    setTimeout(function(){
                        that.getBookMain(that.chapterId)
                    }, 2000);
                }
                if(getName == 'getBookMainOld'){
                    setTimeout(function(){
                        that.getBookMainOld(that.chapterId)
                    }, 2000);
                }
            }else{
                // 第二次自动请求  -- 失败后 --  手动刷新
               that.diaLoadingShow = true; 
               that.diaLoadErrShow = true; 
            }
        },
        renderBookMain(res){
            let that = this;
            // 记录系统时间
            if(res.data && res.data.sysTime) {
                that.sysTime = res.data.sysTime
            }
            //重写omap  大数据打点优先级：实时 > 固定   神策打点优先级： 固定 > 实时
            if(res.data&&res.data.omap){
                if(that.omap && Object.keys(that.omap).length == 0) {
                    that.omap = JSON.parse(res.data.omap)
                }
                let omap = JSON.parse(res.data.omap)
                that.fnGetSorcePosition(omap)
            }
            that.chapterIndex = res.data.chapterIndex;
            that.maxChapter = res.data.maxChapter;
                clearTimeout(that.errorTimeout)
                that.diaLoadingShow = false;
                that.diaLoadErrShow = false;
                // 是否显示加桌面按钮
                that.isShortCutShow = true;

            if (res.retCode == 0) {
                // 书架判断
                that.isInBookShelf = !!(res.data && res.data.isInBookShelf);
                if(res.data.autoAdd === 1) {
                    that.isInBookShelf = true;
                    if(that.fromPlace != 'login') {
                        prompt.showToast({
                            message: '已为您自动加入书架'
                        });
                    }
                }
                // 是否支持整本购买
                if(res.data.fpTip) {
                    that.canOncePrice = true
                    that.oncePriceInfo = res.data.oncePriceVo
                    that.oncePriceExtraInfo = res
                }else {
                    that.canOncePrice = false
                    that.oncePriceInfo = ''
                    that.oncePriceExtraInfo = ''
                }
                if(res.data.status==5){
                    that.stopListen()
                    that.orderObj.price = res.data.orderPage.price
                    that.orderObj.coin = res.data.orderPage.totalNum
                    that.orderObj.chapter = res.data.orderPage.chapterName,
                    that.orderObj.unit = res.data.orderPage.unit
                    that.orderObj.bookname = res.data.orderPage.bookName
                    that.orderObj.viptips = res.data.orderPage.vipTips
                    that.orderChapterId = res.data.orderPage.chapterId
                    that.orderDirection = that.chapternull
                    that.directoryChapterId = res.data.orderPage.chapterId
                    //余额是否充足
                    that.orderObj.enough = true
                    if(that.canOncePrice) {
                        that.fnOncePriceShow()
                    }else {
                        that.orderShow = true
                    }
                    return
                }
                //书籍已下架
                if(res.data.status==6){
                    that.stopListen()
                    router.push({
                        uri:'/ReadEnd',
                        params:{
                            bookId: that.bookId,
                            bookName: res.data.bookName,
                            // omap: that.omap
                        }
                    })

                    //书籍已下架打点
                    that.$app.$def.quickappLog([703,{
                        qmap:{
                            end:'2',
                            chapterIndex:that.chapterIndex,
                            bookId:that.bookId,
                            sid:that.sid,
                            chapterId:that.chapterId
                        }
                    },'read_end'], that);
                    return false;
                }
                //正常阅读
                if (res.data.chapterInfo && (res.data.status != 5 && res.data.status != 4)) {
                    // 初始化广告/翻章
                    that.fnInitParams()
                    that.fnInitAdParmas()
                    if(res.data.beforePayVo){
                        that.needAdvancePay = true
                    }else{
                        that.needAdvancePay = false
                    }
                    that.chapterName = res.data.chapterInfo[0].chapterName;
                    that.chapterContent = res.data.chapterInfo[0].content;
                    that.preChapterId = res.data.preChapterId;
                    that.nextChapterId = res.data.nextChapterId;
                    if(!that.isFirstRend){
                        that.$element('readList') && that.$element('readList').scrollTo({ index: 0 });
                    }
                    that.isRequestingExit = false
                    that.chapterId=res.data.chapterInfo[0].chapterId
                    that.directoryChapterId=res.data.chapterInfo[0].chapterId
                    that.isAdd=res.data.isAdd;
                    that.bookName=res.data.bookName;
                    that.chapterIndex=res.data.chapterIndex
                    that.maxChapter = res.data.maxChapter
                    that.isWarn = res.data.warnTip;
                    that.bookId = res.data.bookId
                    //听书
                    if(that.isListen||that.hasPlayed){
                        // audio.stop()
                        audio.pause()
                        that.isPlaying = false
                        that.hasPlayed=false
                        that.hasListenNum = 0
                        that.audioArr = []
                        that.minIndex=0
                        that.maxIndex=-1
                        if(res.data.beforePayVo){
                            that.stopListen()
                        }
                        if(that.isListen&&!res.data.beforePayVo){
                            setTimeout(function(){
                                that.divideChapter()
                            },500)
                        }
                    }


                    //神策相关数据
                    that.shenceData.IsVIP=res.data.isVip
                    that.shenceData.FirstType=res.data.firstType
                    that.shenceData.SecondType=res.data.secondType
                    that.shenceData.ThirdType=res.data.thirdType
                    that.shenceData.PayType=res.data.payType
                    that.shenceData.Author=res.data.author
                    that.shenceData.MAXChapter=res.data.maxChapter
                    that.shenceData.ChaptersPayType=res.data.chaptersPayType
                    that.shenceData.ChaptersCoins=res.data.chaptersCoins
                    that.shenceData.BookFinishStatus=res.data.bookFinishStatus
                    that.shenceData.BookStatus=res.data.bookStatus
                    that.shenceData.SensitivityLevel=res.data.sensitivityLevel
                    that.shenceData.UpdateTime=res.data.updateTime
                    that.shenceData.first_reading=res.data.first_reading
                    let uptime = (new Date(that.shenceData.UpdateTime)).getTime()
                    let curtime = new Date().getTime()
                    let tdiff = that.getDuration(curtime-uptime)
                    console.log(tdiff)
                    that.shenceData.TimeDifference=tdiff


                    let chapterInfo = res.data.chapterInfo[0]
                    chapterInfo.warnTip =  res.data.warnTip
                    chapterInfo.isJp = res.data.isJp
                    chapterInfo.isafd = res.data.isafd || 0
                    chapterInfo.chapterIndex = res.data.chapterIndex
                    chapterInfo.nextChapterId = res.data.nextChapterId
                    chapterInfo.preChapterId = res.data.preChapterId
                    chapterInfo.bookId = res.data.bookId
                    chapterInfo.expireTime = res.data.lfTime||0
                    chapterInfo.preloadNum = res.data.preloadNum
                    chapterInfo.bookName = res.data.bookName
                    chapterInfo.maxChapter = res.data.maxChapter
                    if(!res.data.beforePayVo){
                        that.fnSetReadfile(chapterInfo)
                        if(that.isNeedpreload){
                            let directory = []
                            let aDirectory = {cid:chapterInfo.chapterId,cindex:chapterInfo.chapterIndex}
                            directory.push(aDirectory)
                            that.fnSetDirectory(directory)
                        }
                    }


                    
                    let firstReading = '' 
                    if(that.isFirstRend){
                        firstReading = that.first_reading?that.first_reading:that.shenceData.first_reading
                    }else{
                        firstReading = that.shenceData.first_reading
                    }
                    // 渲染书籍以外的其它内容
                    that.renderBookOth()

                    //提前付费
                    if(res.data.beforePayVo){
                        that.beforePayVo = res.data.beforePayVo
                        that.payAdvance = true
                        shortcut.hasInstalled({
                            success:function(res){
                                let install = 'Notsaved'
                                if(res){
                                    install = 'Saved'
                                }
                                that.$app.shenceLog.log(that,'track','PopupExposure',{
                                    ChaptersNum:that.chapterIndex,
                                    PositionName:'提前付费弹窗',
                                    DesktopState:install,
                                    Title:'阅读页'
                                })
                            }
                        })
                    }
                    that.needAdvancePay = false
                    that.$app.shenceLog.log(that,'track','ReadBook', {
                        IsVIP:that.shenceData.IsVIP,
                        ReadType:that.isListen?'语音阅读':'文字阅读',
                        BookID:that.bookId,
                        BookName:that.bookName,
                        ChaptersNum:that.chapterIndex,
                        ChaptersID:that.chapterId,
                        ChaptersName:that.chapterName,
                        FirstType:that.shenceData.FirstType,
                        SecondType:that.shenceData.SecondType,
                        ThirdType:that.shenceData.ThirdType,
                        PayType:that.shenceData.PayType,
                        Author:that.shenceData.Author,
                        MAXChapter:Number(that.shenceData.MAXChapter),
                        TimeDifference:that.shenceData.TimeDifference,
                        ChaptersPayType:that.shenceData.ChaptersPayType,
                        ChaptersCoins:that.shenceData.ChaptersCoins,
                        BookFinishStatus:that.shenceData.BookFinishStatus,
                        BookStatus:that.shenceData.BookStatus,
                        SensitivityLevel:that.shenceData.SensitivityLevel?(that.shenceData.SensitivityLevel+''):'-1',
                        UpdateTime:that.shenceData.UpdateTime,
                        Duration:0,
                        FirstReading:firstReading,
                        BgColor:that.setupJson['bNight'] ? that.nightColor : that.setupJson.bgColor,
                        FontSize:that.setupJson.fontSize,
                        Timbre:that.$app.listenJson.timbre,
                        FlipType:(that.isSupportNewReader && that.readType == 'page')?'左右翻章':'跳转翻章',
                        Origin: that.omapOrigin,
                        ColumnName: that.omapCname,
                    });
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            contentLength:that.chapterContent.length,
                            sorce:'2151',
                            bid:that.bookId,
                            cid:that.chapterId,
                            sid:that.sid
                        }
                    }, 'chapter_content'], that)
                    if(that.isNeedpreload){
                        that.preLoadChapter('',false)
                    }
                    that.isNeedpreload = true
                    return false;
                }

                //看点不够
                if (res.data.status == 4 && res.data.orderPage) {
                    that.stopListen()
                    if(res.data.orderPage.action==1){
                        that.orderObj.price = res.data.orderPage.price
                        that.orderObj.coin = res.data.orderPage.totalNum
                        that.orderObj.chapter = res.data.orderPage.chapterName
                        that.orderObj.unit = res.data.orderPage.unit
                        that.orderObj.bookname = res.data.orderPage.bookName
                        that.orderObj.viptips = res.data.orderPage.vipTips
                        that.nowchapterId = res.data.orderPage.chapterId
                        that.directoryChapterId=res.data.orderPage.chapterId
                        //余额是否充足
                        that.orderObj.enough = false
                        if(that.canOncePrice) {
                            that.fnOncePriceShow()
                        }else {
                            that.orderShow = true
                        }
                        if(!that.chapterContent||that.chapterContent.length==0){
                            that.preChapterId = res.data.preChapterId;
                            that.nextChapterId = res.data.nextChapterId;
                            that.rechargeObj.price = res.data.orderPage.price
                            that.rechargeObj.coin = res.data.orderPage.totalNum
                            that.rechargeObj.chapter = res.data.orderPage.chapterName,
                            that.rechargeObj.unit = res.data.orderPage.unit
                            that.rechargeObj.amount = res.data.orderPage.price
                        }
                    }else{
                        //调起分享
                        that.getPopShare().then(popres=>{
                            console.log('popres.data',popres.data)
                            if(popres.data&&popres.data.wxShare!=2 && !that.shareshow && that.sgetprovider){
                                if(popres.data.shareVoList&&popres.data.shareVoList.length){
                                    that.opopShareVoList = popres.data.shareVoList
                                    // 屏蔽分享
                                    that.isshareP = popres.data.wxShare;
                                    that.sitenum = 1;
                                    that.sharebg = 'spbbg_4';
                                    that.shareshow = true;
                                    that.isbutshare = false;
                                    that.nextChapterName = res.data.orderPage.chapterName;
                                    that.scallbackTime = popres.data.callbackTime||5;
                                    if(that.isshareP!=2){
                                        let flagF = 0
                                        let flagC = 0
                                        let curIsshare = that.isshareP
                                        that.opopShareVoList.forEach((item,idx)=>{
                                            if(item.shareType==1){
                                                if(curIsshare==1||curIsshare==3){
                                                    flagF = 1
                                                    that.isshareP=3
                                                }
                                            }
                                            if(item.shareType==2){
                                                if(curIsshare==1||curIsshare==4){
                                                    flagC = 1
                                                    that.isshareP=4
                                                }
                                            }
                                        })
                                        if(!flagF&&!flagC){
                                            that.isshareP=2
                                            that.shareshow = false;
                                            if(that.canOncePrice) {
                                                that.fnOncePriceShow()
                                            }else {
                                                that.goRecharge(res)
                                            }
                                        }else if(flagF&&flagC){
                                            if(curIsshare==1){
                                                that.isshareP=1
                                            }
                                        }
                                    }
                                }else{
                                    if(that.canOncePrice) {
                                        that.fnOncePriceShow()
                                    }else {
                                        that.goRecharge(res)
                                    }
                                }
                            }else{//去充值
                                if(that.canOncePrice) {
                                    that.fnOncePriceShow()
                                }else {
                                    that.goRecharge(res)
                                }
                            }
                        })
                    }

                } else {
                    that.stopListen()
                    router.push({
                        uri:'/ReadEnd',
                        params:{
                            bookId: that.bookId,
                            bookName: res.data.bookName,
                            // omap: that.omap
                        }
                    })

                    //终章打点
                    that.$app.$def.quickappLog([703,{
                        qmap:{
                            end:'1',
                            chapterIndex:that.chapterIndex,
                            bookId:that.bookId,
                            sid:that.sid,
                            chapterId:that.chapterId
                        }
                    },'read_end'], that);
                }
            }else{
                //加载失败打点  retCode == 0
                that.$app.$def.quickappLog([703,{
                    qmap:{
                        chapterIndex:that.chapterIndex,
                        bookId:that.bookId,
                        sid:that.sid,
                        chapterId:that.chapterId,
                        retCode:res.retCode
                    }
                },'read_retCode'], that);

            }
        },
        goRecharge(res){
            let that = this
            that.shareshow = false;
            that.isToRecharge = true
            router.push({
                uri: '/Recharge',
                params: {
                    url: '/Read',
                    unit: res.data.orderPage.unit,
                    amount: res.data.orderPage.price,
                    bookId: that.bookId,
                    chapterId: res.data.orderPage.chapterId,
                    chapterIndex:that.chapterIndex,
                    pageFrom:that.pageFrom,
                    payType:that.payType,
                    SourcePosition:that.SourcePosition,
                    omap:that.omap,
                    isUpdateOmap:that.isUpdateOmap,
                    bookName: that.bookName
                }
            })
            setTimeout(function(){
                if(!that.chapterContent||that.chapterContent.length==0){
                    that.preChapterId = res.data.preChapterId;
                    that.nextChapterId = res.data.nextChapterId;
                    that.rechargeObj.price = res.data.orderPage.price
                    that.rechargeObj.coin = res.data.orderPage.totalNum
                    that.rechargeObj.chapter = res.data.orderPage.chapterName,
                    that.rechargeObj.unit = res.data.orderPage.unit
                    that.rechargeObj.amount = res.data.orderPage.price
                    that.nowchapterId = res.data.orderPage.chapterId
                    that.directoryChapterId=res.data.orderPage.chapterId
                    that.rechargeShow = true
                }
            },0)
            //看点不够打点
            that.$app.$def.quickappLog([703,{
                qmap:{
                    poor:'1',
                    chapterIndex:that.chapterIndex,
                    unit: res.data.orderPage.unit,
                    amount: res.data.orderPage.price,
                    bookId:that.bookId,
                    sid:that.sid,
                    chapterId:that.chapterId
                }
            },'read_poor'], that);
        },
        /**
         * 内容渲染完成后数据处理
         */
        renderBookOth() {
            let that = this;
            if (that.$app.readRecord[that.bookId]) {
                that.$app.readRecord[that.bookId] ++
            } else {
                that.$app.readRecord[that.bookId] = 1
            }
            that.fnSetHistoryStorage()
            that.currentReportTime = 0
            that.hasDashboradShow = false
            that.hasLoadChapter = true
            that.canPreVideoShow = true
            that.hasPreVideoPopShow = false
            that.firstContentShow = false
            that.chapterMiddleIndex = parseInt(that.chapterContent.length / 2)
            that.scrollPosition = 0
            that.scrollToLoadPosition = false
            if(!(that.isFirstRenderBook && that.prePage != 'Directory')) {
                that.readTimes++
                that.fnSetStorage('readTimes-' + that.bookId, that.readTimes)
            }
            that.isFirstRenderBook = false
            that.fnUpdateChapterState()
            that.fnSetRecParams()
            that.fnSetAdParams()
            that.fnInitReader()
            // 上报阅读时长
            if(that.preAdWall) {
                that.canHideReport = false
                setTimeout(() => {
                    that.canHideReport = true
                }, 1000)
            }
            that.fnReportReadDuration(true)
            that.fnSetAdWall()
            let isReget = true
            if(that.chapternull=='next'&&that.fromPlace=='login'&&that.firstNext&&that.netShortAward){
                that.firstNext = false
                that.shortAwrad = true
            }
            if(!that.renderFist){
                // 注册用户
                that.getUserIdLogic(1);
                // 底部广告轮播
                that.isBannerAdRepeat = true;
            }
            that.renderFist = false;
            if(that.nextShortType==4&&!that.shortAwrad){
                isReget = false
                that.fnshortcut();
            }
            if(that.nextShortType==6&&!that.shortAwrad){
                isReget = false
                that.rechargeShortcut()
            }
            if (that.isFirstRend) {
                that.fnGetBookshelf()
            } else {
                that.fnSaveBookshelf()
            }
            that.isFirstRend = false
            that.canBack = true
            // that.$page.setTitleBar({ text: res.data.chapterInfo[0].chapterName });
            if (that.chapterContent && (that.chapterContent[0] == that.chapterName)) {
                that.chapterContent.shift();
            }
            // 阅读数量符合预期数量时弹添加桌面
            that.readNum.nowReadNum = that.readNum.nowReadNum + 1;
            // 显示下一章按钮 
            that.isBookMainShow = true;
            that.fngetbtnText()
            that.fngetonebtnText()
            if(isReget){
                that.fnGetNextCut()
            }
            that.fnGetButtonTip()
            that.textLinkShouldShow = false
            that.textLink = {}
            that.textLinkOperationName = ''
            that.textLinkUserTacticsVo = {}
            that.selectTextLine(false)
            if(that.isShortCutShow&&!that.hasShowSuccess&&that.isBtnshow){
                that.$app.shenceLog.log(that,'track','PopupExposure', {
                    PositionName:'阅读页加桌浮窗',
                    ChaptersNum:that.chapterIndex,
                    DesktopState:that.$app.isAddDesktop?'Deleted':that.$app.isAddDesktop===false?'Neversaved':'Noresults'
                });
            }
            that.isLoadChapter = false
            that.fnAutoListenSwitch();                   // 自动听书
        },
        onReady() {
            setTimeout(() => {
                if(!this.hasGetProp) {
                    this.fnSetProperty(true)
                }
            })
            this.getAudioSet()
            this.payType = wxpay.getType();
            try {
                resident.start()
                console.log('启动后台运行')
            } catch (error) {
                console.log(error)
            }
            try {
                if(this.$app.isNeedHuaweiAudio) {
                    return
                }
                audio.getPlayState({
                    success: function(data) {
                        if(data.state=='play'){
                            audio.pause()
                        }
                    },
                    fail: function(data, code) {
                        console.log('handling fail, code=' + code)
                    }
                })
            } catch (error) {
                console.log(error)
            }
        },

        //页面被切换重新显示时调用
        onShow() {
            let that = this;
            // 开屏判断
            let currentOpenTime = new Date().getTime()
            if(that.$app.isOpenPageSwitch == 1 && that.$app.lastOpenPage == 'read' && currentOpenTime - that.$app.lastOpenTime > that.$app.openPageSpace && that.canShowPop && currentOpenTime - that.$app.leavePageTime > that.$app.leavePageSpace && !that.isVideoPlay) {
                that.$app.lastOpenTime = currentOpenTime
                that.$app.lastOpenPage = ''
                that.hasToTimbre = true
                that.pauseAudio()
                router.push({
                    uri: 'Pop',
                    params: {
                        fromPage: '/Read',
                    }
                })
                return
            }
            that.$broadcast('pageShowChange', true);
            that.fnNeedEnterAdWall()
            that.$app.isReadPageShow = true
            that.showTimes++
            that.isVideoPlay = false
            // advanceSign 0 未到签到页面 1到了签到页面，重新onshow需要刷新接口
            // payAdvance提前支付弹窗
            // showAdvanceSign是否显示去签到挽留
            if(that.advanceSign==1){
                that.payAdvance = false
                that.showAdvanceSign = false
                that.advanceSign=0
                that.fnLodeChapterInfo(that.bookId, that.chapterId)
            }
            // appAdvanceSign=1时表示支付成功，隐藏支付弹窗
            if(that.$app.appAdvanceSign==1){
                that.payAdvance = false
                that.$app.appAdvanceSign=0
            }
            if(that.$app.isOncePrice == 1) {
                that.giveUpPopShow = false
                that.oncePriceShow = false
                that.$app.isOncePrice = 0
                that.fnLodeChapterInfo(that.bookId, that.chapterId)
            }
            that.$app.lastOpenPage = 'read'
            that.$app.shenceLog.log(that, 'pageShow', '', {
                Title: '阅读页'
            });
            if(that.isListen&&that.hasPlayed&&!that.isRequestTts&&!that.hasToTimbre){
                try {
                    audio.getPlayState({
                        success: function(data) {
                            if(data.state=='pause'||data.state=='stop'){
                                that.isListen = false
                                that.isGoOn = false
                                network.unsubscribe()
                            }
                        },
                        fail: function(data, code) {
                            console.log('handling fail, code=' + code)
                        }
                    })
                } catch (error) {
                    console.log(error)
                }
            }
            if(that.curTimbre==that.$app.listenJson.timbre&&that.isListen&&that.hasToTimbre){
                that.hasToTimbre = false
                that.audioPlay()
                network.subscribe({
                    callback: function (data) {
                        if (data.type !== 'wifi' && data.type!== 'none') {
                            prompt.showToast({
                                message: '当前处在非WiFi环境，注意流量消耗哦！',
                                duration: 1
                            })
                        }
                    }
                })
            }else if(that.curTimbre!=that.$app.listenJson.timbre&&that.isListen&&that.hasToTimbre){
                that.hasToTimbre = false
                that.rePlayAudio()
                network.subscribe({
                    callback: function (data) {
                        if (data.type !== 'wifi' && data.type!== 'none') {
                            prompt.showToast({
                                message: '当前处在非WiFi环境，注意流量消耗哦！',
                                duration: 1
                            })
                        }
                    }
                })
            }else{
                that.hasToTimbre = false
            }

            //阅读页pv打点
            if(!that.isToRecharge) {                
                that.$app.$def.quickappLog([701,{
                    qmap:{
                        bookId:that.bookId,
                        chapterId:that.chapterId,
                        sid:that.sid,
                        source:'onShow',
                        oaid:that.$app && that.$app.oaid || ''
                    },
                    omap:that.omap
                }], that);
            }
            if(that.isToRecharge) {
                that.giveUpPopShow = false
            }
            that.isToRecharge = false
            
            new Promise((resolve, reject) => {
                that.$app.$def.getStorageFile(that,{
                    key:'headerJson',
                    success:function(data){
                        resolve(data);
                    }
                })

            }).then((res) => {
                if(res) {
                    that.userHeaderJson = JSON.parse(res);
                }
            })

            setTimeout(() => {
                that.canBack = true
            }, 1000);

            //分享开始
            if (that.oshareAction) {
                let send = 0;
                that.shareEndTime = Date.parse(new Date()) / 1000;
                send = that.shareEndTime - that.shareActionTime;
                if(that.shareEndTime == that.shareActionTime) {
                    send = that.scallbackTime
                }
                //分享成功
                if (send >= that.scallbackTime) {
                    if(!that.isbutshare){//下一章分享成功
                        that.$app.$def.requestData(that,
                            {
                                interface: '/glory/fastapp/2141',
                                data: { taskId: that.opopShareVo.taskId },
                                succ: function (res) {
                                    that.shareshow = false;
                                    that.fnLodeChapterInfo(that.bookId,that.osharenext.ochapterId,that.osharenext.sharenext);
                                    return false;
                                }
                            }
                        )
                    }else{//底部按钮分享成功
                        that.$app.$def.requestData(that,
                            {
                                interface: '/glory/fastapp/2146',
                                data: {
                                    action : that.obuttomShareVo['actionType'] || 11
                                },
                                succ: function (res) {
                                    if(res.data.status == 2){
                                        prompt.showToast({
                                            message: "恭喜完成分享，请前往任务中心领取奖励"
                                        })
                                    }else{
                                        prompt.showToast({
                                            message: "分享成功"
                                        })
                                    }
                                    
                                },
                                error: function (code) {
                                }
                            }
                        )
                    }
                    //分享打点
                    that.$app.$def.quickappLog([703, {
                        qmap: {
                            site: '6',
                            oissign:that.isbutshare,
                            page: '3',
                            send
                        }
                    }, 'read_share'], that)
                } else {//分享失败
                    if(!that.isbutshare){
                        that.sharebg = 'spbbg_2';
                        that.sitenum = 2;
                        that.shareshow = true;
                    }else{
                        prompt.showToast({
                            message: "分享失败"
                        })
                    }
                
                    //分享打点
                    that.$app.$def.quickappLog([703, {
                        qmap: {
                            site: '7',
                            oissign:that.isbutshare,
                            page: '3',
                            send
                        }
                    }, 'read_share'], that)
                }
                that.oshareAction = false;
                that.canShowPop = true
            }
            that.fnHangingHolder()
            // 活动充值重新请求配置
            if(that.$app.isFromWebhuodong) {
                setTimeout(() => {
                    that.getServerInit()
                }, 300)
            }
            that.$app.isFromWebhuodong = false
            // 支付宝授权判断
            if(that.isShowRedEnvelopes && that.hasTryPullAliPay && that.redSelectedIndex === that.deeplinkIndex) {
                that.fnIsBindAliPay()
            }
            // 支付宝红包冷却时间判断
            let nowTime = new Date().getTime()
            if (that.countTime > 0) {
                clearInterval(that.clickCountDownInterval)
                let isCooling = nowTime - that.taskCoolStartTime < that.chapterEndRedTask.coolingTime * 1000
                if (isCooling) {
                    let remainTime = that.chapterEndRedTask.coolingTime - Math.floor((nowTime - that.taskCoolStartTime) / 1000);
                    if (remainTime > 0) {
                        that.countTime = remainTime
                        that.clickCountDownInterval = setInterval(() => {
                            that.fnCountDown();
                        }, 1000);
                    } else {
                        that.aliPayRedTitle = that.chapterEndRedTask.taskTitle;
                        that.countTime = 0
                    }
                } else {
                    that.aliPayRedTitle = that.chapterEndRedTask.taskTitle;
                    that.countTime = 0 
                }
            }
        },
        onHide() {
            let that = this;
            that.$broadcast('pageShowChange', false);
            that.$app.isReadPageShow = false
            // 上报阅读时长
            if(that.canHideReport) {
                that.fnReportReadDuration(false)
            }
            that.$app.leavePageTime = new Date().getTime()
            that.$broadcast('fnReportDeepLink')
            if (that.oshareAction) {
                that.shareActionTime = Date.parse(new Date()) / 1000;
                //分享打点
                that.$app.$def.quickappLog([703, {
                    qmap: {
                        site: '5',
                        page: '3',
                    }
                }, 'read_share'], that)
            }
            that.$app.$def.quickappLog([703, {
                qmap: {
                    textPosition: that.scrollPosition,
                    hideTime:Date.parse(new Date()) / 1000
                }
            }, 'read_page_hide'], that)
        },
        //阅读任务-看视频再得金币
        fnStartReadVideo() {
            this.$broadcast('awardVideoInit')
        },
        //页面被销毁时调用，被销毁的可能原因有：用户从当前页面返回到上一页，或者用户打开了太多的页面，框架自动销毁掉部分页面，避免占用资源
        onDestroy(e) {
            try {
                this.$app.$def.fnDestoryAd.call(this);                  // 销毁当前页面的广告实例
                resident.stop()
            } catch (error) {
                console.log(error)
            }
            if(this.hasPlayed){
                audio.stop()
            }
            return true;
        },
        closeAdvance(){
            this.payAdvance = false
        },
        closeAdvanceSign(){
            this.showAdvanceSign = false
            this.$app.appAdvanceSign = 0
            this.readPageOnBackPress()
        },
        fnCloseOpenScreenPop() {
            this.isAdPopShow = false
        },
        fnShowOpenScreenPop() {
            this.isAdPopShow = true
        },
        //当用户点击返回实体按键、左上角返回菜单、调用返回API时触发该事件
        pageBackPress(){
            let that=this;
            if(that.showListenPop) {
                that.fnListenPopClose()
                return true
            }
            if(that.isAuthShortcutPopShow) {
                that.fnCloseAuthShortcut()
                return true
            }
            // 激励墙入口弹窗拦截
            if(that.adWallEntryPopup.show) {
                that.fnAdWallEntryPopupClose();
                return true;
            }
            if(that.isWarning) {
                that.isWarning = false
                return true
            }
            if(that.readRewardPopShow) {
                that.readRewardPopShow = false
                return true
            }
            if(that.isPreVideoPackageShow) {
                that.isPreVideoPackageShow = false
                return true
            }
            if(that.isPreVideoAwardShow) {
                that.isPreVideoAwardShow = false
                return true
            }
            // 上报阅读时长
            that.fnReportReadDuration(false)
            if(that.giveUpPopShow) {
                that.giveUpPopShow = false
                return true
            }
            if(that.oncePriceShow) {
                that.oncePriceShow = false
                that.noContentJump()
                return true
            }
            if(that.isAdPopShow) {
                that.isAdPopShow = false
                that.isClickShow = false
                that.isDownloadShow = false
                that.$broadcast('closeExtra')
                that.$broadcast('openScreenPopClose')
                return true
            }
            if(that.isOpenScreenShow && !that.openScreenCanBack) {
                return true    
            }
            if(that.isOpenScreenShow && that.openScreenCanBack && that.needDoubleOpenAdShow) {
                that.$broadcast('doubleOpenAdShow')
                return true    
            }
            if(that.isOpenScreenShow && that.openScreenCanBack) {
                that.$broadcast('clearOpenScreenInterval')
                that.isOpenScreenShow = false
                that.isNeedImeiAuth = false
                that.fnImeiAuth()
                return true  
            }
            if(that.canReadVideoShow && that.readVideoInfo) {
                let curTime = new Date().getTime()
                if(that.readVideoInfo && that.readVideoInfo.chapterIndex && that.chapterIndex < that.readVideoInfo.chapterIndex && curTime + that.timeDif <= that.readVideoInfo.registerAfterTime) {
                    that.canReadVideoLoad = true
                }
            }
            if(that.canReadVideoShow && that.canReadVideoLoad && that.isFirstLoadVideo) {
                if(that.sceneVal==3){
                    that.showNotification(that.localPush)
                    that.fnReportLocalpush(that.sceneVal)
                }
                that.isFirstLoadVideo = false
                that.readVideoLoading = true
                that.$broadcast('readVideoInit')
                that.readVideoTimeout = setTimeout(() => {
                    that.readVideoLoading = false
                    router.replace({
                        uri: '/Index',
                        params: {
                            pageFrom: 'read'
                        }
                    })
                }, that.videoAdLoadLimit)
                return true
            }
            if(that.readVideoLoading) {
                return true
            }
            if(that.isReadVideoShow){
                that.$broadcast('readVideoClose')
                return true;
            }
            if(that.isReadAdShow) {
                that.$broadcast('readAdClose')
                return true;
            }
            if(that.isAwardVideoShow){
                that.$broadcast('awardVideoClose')
                return true;
            }
             if(that.isAwardAdShow){
                that.$broadcast('awardAdClose')
                return true; 
            }
            if(that.isInsertVideoShow) {
                that.$broadcast('insertVideoClose')
                return true;
            }
            if(that.isInsertAdShow) {
                that.$broadcast('insertAdClose')
                return true;
            }
            if(that.isPreVideoShow) {
                that.$broadcast('preVideoClose')
                return true;
            }
            if(that.isPreAdShow) {
                that.$broadcast('preAdClose')
                return true;
            }
            if(that.isPreNextVideoShow) {
                that.$broadcast('preNextVideoClose')
                return true;
            }
            if(that.isPreNextAdShow) {
                that.$broadcast('preNextAdClose')
                return true;
            }
            if(that.isListenVideoShow) {
                that.$broadcast('listenVideoClose')
                return true;
            }
            if(that.isListenAdShow) {
                that.$broadcast('listenVideoAdClose')
                return true;
            }
            if(that.aliPayRedVideoInfo.isAliPayRedVideoShow) {
                that.$broadcast('aliPayRedVideoClose')
                return true;
            }
            if(that.aliPayRedVideoInfo.isAliPayRedAdShow) {
                that.$broadcast('aliPayRedAdClose')
                return true;
            }
            that.$app.readHangingHolderClose = true
            if(that.beforePayVo.retentionVO&&that.beforePayVo.type==1&&that.payAdvance){
                that.showAdvanceSign = true
                that.$app.shenceLog.log(that,'track','PopupExposure',{
                    PositionName:'提前付费挽留弹窗',
                    Title:'阅读页'
                })
                return
            }
            if(that.isListen){
                that.$app.readHangingHolderClose = that.hangingHolderShow
                if(that.isListen&&!that.isPlaying&&that.isRequestTts||that.isListen&&!that.isPlaying&&that.ischangeset){
                    that.isRequestingExit = true
                }else{
                    that.isRequestingExit = false
                }
                that.exitListen()
                return true
            }
            if(that.hasAuthShortcut){
                that.shortType = '3';
                that.isShortpop = true
                that.hasAuthShortcut = false
                return true
            }
            if(that.isShortpop){
                that.isShortpop = false
                return true
            }
            if(that.calledPlatform=='HeyTapBrowser'&&that.oppoBrow){
                router.back()
                return true
            }
            // 关闭弹窗关闭
            if(that.isClosePopShow) {
                that.isClosePopShow = false
                return true
            }
            // 举报弹窗关闭
            if(that.isShowComplaintPopUp) {
                that.isShowComplaintPopUp = false;
                return true;
            }
            // 退出阅读加桌拦截
            if(that.backBtnDialog) {
                return true
            }
            // 退出阅读广告加载拦截
            if(that.isBackAdPopShow) {
                if(that.needExitApp && that.isExitApp) {
                    that.$app.exit()
                    return true 
                }
                return true
            }
            if(that.fromUserStayPop){
                that.$app.$def.quickappLog([702, {
                    qmap:{
                        site: '5',
                        bid: that.bookId,
                        cid: that.chapterId,
                        sid:that.sid,
                        cindex:that.chapterIndex
                    }
                }, 'user_stay_pop'], that)
            }
            // 阅读页退出拦截
            shortcut.hasInstalled({
                success: function (ret) {
                    if (ret) {
                        if(that.backAdSwitch) {
                            that.fnBackAdPopShow()
                        } else {
                            that.fnUserStay()
                        }
                    } else {
                        if(that.backDialog && (that.backDialog.chapterId || that.backDialog.chapterId === 0) && that.chapterIndex >= that.backDialog.chapterId && !(that.maxBackDialogTimes > 0 && that.backDialogTimes >= that.maxBackDialogTimes)) {
                            let date = that.fnGetCurrentDate()
                            that.backDialogTimes++
                            that.fnSetStorage('backDialogTimes', JSON.stringify({
                                times: that.backDialogTimes,
                                date: date
                            }))
                            that.fnBackDialog()
                        } else {
                            if(that.backAdSwitch) {
                                that.fnBackAdPopShow()
                            } else {
                                that.readPageOnBackPress()
                            }
                        }
                    }
                },
                fail: function () {
                    if(that.backAdSwitch) {
                        that.fnBackAdPopShow()
                    } else {
                        that.readPageOnBackPress()
                    }
                }
            })
        },
        onBackPress(){
            let that = this
            setTimeout(function(){
                if(that.orderShow){
                    that.orderShow = false
                    that.noContentJump()                    
                    that.$app.$def.quickappLog([702, {
                        qmap: {
                            site: '5',
                            enough:that.orderObj.enough,
                            unit:that.orderObj.unit,
                            bookid:that.bookid
                        }
                    }, 'autopay'], that)
                }else{
                    if(that.canBack){
                        that.pageBackPress()
                    // 不使用系统返回，使用方法
                    }
                }
            },0)
            return true
        },
        showNotification(localPush){
            console.log('showNotification',localPush)
            let that = this
            if(that.$app.isNeedHuaweiAudio) {
                return
            }
            storage.get({
                key:'isPush',
                success(res){
                    if(res!=1){
                        let NotificationTime = new Date().getTime()
                        notification.show({
                            contentTitle: localPush.title,
                            contentText: localPush.content,
                            clickAction: {
                                uri: `/LoginVisitor?jumpPage=Read&bookId=${localPush.bookId}&NotificationTaskId=${localPush.jobId}&NotificationTime=${NotificationTime}`
                            }
                        })
                        that.$app.hasShowNote = true
                        that.$app.shenceLog.log(that,'track','NotificationShow', {
                            NotificationId: `${localPush.jobId}_${that.$app.headerJson.userId}_${NotificationTime}`,
                            NotificationTaskId: localPush.jobId,
                            NotificationTitle: localPush.title,
                            NotificationContent: localPush.content,
                            NotificationLink: `/LoginVisitor?jumpPage=Read&bookId=${localPush.bookId}&NotificationTaskId=${localPush.jobId}&NotificationTime=${NotificationTime}`,
                            NotificationTiming: '1',
                        }); 
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                site: '2'
                            }
                        }, 'notification'], that)
                    }
                        
                }
            })
        },
        fnShowShortcut(isAdd,isBtnClick){
            let that=this;
            let curDay=new Date().getDay();
            
            if(isAdd===1){
                let oPromise1=new Promise((resolve,reject)=>{
                    that.$app.$def.getStorageFile(that,{
                        key:'shortcutDay',
                        success:function(res){
                            resolve(res);
                        },
                        complete:function(res){
                            resolve(res);
                        }
                    })

                })
                let oPromise2=new Promise((resolve,reject)=>{
                    shortcut.hasInstalled({
                        success: function(res) {
                            resolve(res);
                        },
                        fail(data, code) {
                            // 如果是点击按钮  提示失败
                            if(isBtnClick){
                                prompt.showToast({
                                    message: '创建桌面图标失败'
                                })
                                that.readPageOnBackPress();
                            }
                            that.$app.$def.quickappLog([703, {
                                qmap:{
                                    source:"shortcut_hasInstalled_fail",
                                    thisUri:that.$page.uri,
                                    thisPage:"Read",
                                    data,
                                    code,
                                }
                            }, 'catch_error'], that)
                        },
                        complete(errdata, errcode) {}
                    })
                })
                Promise.all([oPromise1,oPromise2]).then((result)=>{
                    if(!result[1] && !that.exitback){
                        that.exitback = true;
                        shortcut.install({
                            message: that.systemInText,
                                success: function() {
                                that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                    IsSuccess: true,
                                    PositionName: '阅读页返回' + (isBtnClick ? '弹窗' : '') + '添桌',
                                    ChaptersNum: that.chapterIndex,
                                    Instruction: that.systemInText,
                                    StateCode: 'return'
                                }); 
                                //来源写入变量
                                that.$app.dataJson = Object.assign({}, {infotype:'shortcut'});
                                prompt.showToast({
                                    message: '成功创建桌面图标'
                                })
                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        site: '2',
                                        bid:that.bookId,
                                        cid:that.chapterId,
                                        sid:that.sid,
                                        page:'3',
                                        sorce:'read_shortcut'
                                    }
                                }, 'shortcut'], that)
                                that.$app.$def.requestData(that,{
                                    interface: `/glory/fastapp/2107`,
                                    data: {
                                        isas:1
                                    },
                                    succ: function (res) {
                                        if(res.data.freeLimitAll){
                                            that.$app.shortSuccessText = res.data.freeLimitAll
                                        }
                                        if(isBtnClick){
                                            that.readPageOnBackPress();
                                        }else{
                                            that.showShortSuccess()
                                        }
                                    },
                                    error: function (code) {
                                        if(isBtnClick){
                                            that.readPageOnBackPress();
                                        }else{
                                            that.showShortSuccess()
                                        }
                                    }
                                })
                                that.fnTellServer(1);
                                //router.back();
                            },
                            fail: function(data,code) {
                                // 如果是点击按钮  提示失败
                                that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                    IsSuccess: false,
                                    PositionName: '阅读页返回' + (isBtnClick ? '弹窗' : '') + '添桌',
                                    ChaptersNum: that.chapterIndex,
                                    Instruction: that.systemInText,
                                    StateCode: 'return',
                                    MsgSendCode: code,
                                    MsgSendContent: data,
                                }); 
                                if(isBtnClick){
                                    prompt.showToast({
                                        message: '创建桌面图标失败'
                                    })
                                    that.readPageOnBackPress();
                                }
                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        site: '3',
                                        bid:that.bookId,
                                        cid:that.chapterId,
                                        sid:that.sid,
                                        page:'3',
                                        sorce:'read_shortcut',
                                        source: 'shortcut_install_fail',
                                        thisUri: that.$page.uri,
                                        thisPage: 'Read',
                                        data,
                                        code
                                    }
                                }, 'catch_error'], that)

                            },
                            complete:function(errmsg){
                                that.$app.$def.setStorageFile(that,{
                                    key:'shortcutDay',
                                    value:curDay
                                })

                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        site: '5',
                                        bid:that.bookId,
                                        cid:that.chapterId,
                                        sid:that.sid,
                                        errmsg:`${errmsg}`,
                                        page:'3',
                                        sorce:'read_shortcut'
                                    }
                                }, 'shortcut'], that)
                            }
                        })
                        that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                            PositionName: '阅读页返回' + (isBtnClick ? '弹窗' : '') + '添桌',
                            ChaptersNum: that.chapterIndex,
                            Instruction: that.systemInText,
                            StateCode: 'submit',
                            DesktopState: that.$app.isAddDesktop ? 'Deleted' : 'Neversaved'
                        }); 
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                site: '1',
                                bid:that.bookId,
                                cid:that.chapterId,
                                sid:that.sid,
                                page:'3',
                                sorce:'read_shortcut'
                            }
                        }, 'shortcut'], that)
                    }else{
                        this.readPageOnBackPress();
                    }
                },()=>{
                    this.readPageOnBackPress();
                })
            }else{
                this.readPageOnBackPress();
            }
        },

        //如果入口为阅读页返回就去首页，否则回上一页
        readPageOnBackPress(){
            let that = this
            if(that.sceneVal==3){
                that.showNotification(that.localPush)
                that.fnReportLocalpush(that.sceneVal)
            }
            let routerlen = router.getLength();
            console.info(routerlen);
            if(routerlen <= 1|| that.NotificationTaskId){
                router.clear()
                router.replace({
                    uri:'/Index',
                    params:{
                        pageFrom:'read'
                    }
                })
            }else{
                router.back();                
            }
        },
        fnReportLocalpush(sceneVal){
            let that = this;
            that.$app.$def.requestData(that,
                {
                    interface: '/glory/fastapp/2175',
                    data: { sceneVal: sceneVal },
                    succ: function (res) {
                    }
                }
            )
        },
        routerurl(url) {
            let that = this;
            if(that.isNeedEnterAdWall && !this.isNoAd) {
                that.fnRouterToAdWall()
                return
            }
            this.hasToTimbre = true
            this.pauseAudio()
            router.push({
                uri: url,
                params: {
                    bookId: that.bookId,
                    chapterId: that.directoryChapterId,
                    pageFrom:that.pageFrom,
                    SourcePosition:that.SourcePosition,
                    omap:that.omap,
                    isUpdateOmap:that.isUpdateOmap,
                    chapterIndex:that.chapterIndex
                }
            })
        },
        fnAudioToPage(){
            this.hasToTimbre = true
            this.pauseAudio()
        },
        closepopupshow() {
            let that = this;
            that.shareshow = false;
            //分享打点
            that.$app.$def.quickappLog([703, {
                qmap: {
                    site: '12',
                    page: '3',
                    sitenum:that.sitenum,
                    oissign:that.isbutshare
                }
            }, 'read_share'], that)
        },
        closeBackBox() {
            let that = this;
            that.backBtnDialog = false;
            if(that.backAdSwitch) {
                that.fnBackAdPopShow()
            } else {
                that.readPageOnBackPress()
            }
        },
        clickShowShortCut() {
            // 调用添加桌面功能
            let that = this;
            that.fnShowShortcut(1,true);
            that.$app.shenceLog.log(that,'track','ButtonClick', {
                ButtonName: '阅读页返回加桌弹窗',
                ButtonContent: '我知道了',
                BookID: that.bookId || ''
            });
        },

        listshare(isbutshare) {
            let that = this;
            if(isbutshare){
                that.isbutshare = true;
                that.shareSite = isbutshare === 'dashborad' ? '菜单分享' : '阅读页底部分享'
            }else{
                that.isbutshare = false;
                that.shareSite = '书币不足分享'
            }
            if (that.isshareP == 1||that.isshareB == 1) {//如果是开关1=全部开启，点击分享按钮，则展示分享选择界面
                that.sharetabshow = true;
            } else if (that.isshareP == 3||that.isshareB == 3) {//如果是开关3=只分享到好友，点击分享按钮，直接拉起好友列表
                that.sharefriends()
            } else if (that.isshareP == 4||that.isshareB == 4) {//如果是开关4=只分享到朋友圈，点击分享按钮，直接拉起朋友圈
                that.sharecircle()
            }

            //分享打点
            that.$app.$def.quickappLog([702, {
                qmap: {
                    site: '1',
                    page: '3',
                    oissign:that.isbutshare
                }
            }, 'read_share'], that)
        },
        //分享到微信好友
        sharefriends() {
            let that = this;
            let osharevo = {}
            if(that.isbutshare){
                let shareArr = []
                that.obuttomShareVoList.forEach((item,idx)=>{
                    if(item.shareType==1){
                        shareArr.push(item)
                    }
                })
                console.log(shareArr)
                let random = Math.floor(Math.random() * shareArr.length)
                that.obuttomShareVo =  shareArr[random];
                osharevo = that.obuttomShareVo;
            }else{
                let shareArr = []
                that.opopShareVoList.forEach((item,idx)=>{
                    if(item.shareType==1){
                        shareArr.push(item)
                    }
                })
                console.log(shareArr)
                let random = Math.floor(Math.random() * shareArr.length)
                that.opopShareVo =  shareArr[random];
                osharevo = that.opopShareVo;
            }
            that.shareStatus(1)
            try {
                that.canShowPop = false
                // that.oshareAction = true;
                let shareUrl = that.fnReplaceUrl(osharevo.shareUrl)
                shareSe.share({
                    shareType: 0,
                    title: osharevo.title,
                    summary: osharevo.remark,
                    imagePath: osharevo.img,
                    targetUrl: shareUrl,
                    platforms: ['WEIXIN'],
                    success: function (data) {
                        that.oshareAction = true;
                        that.shareStatus(2)
                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '3',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'1',
                                osharevo
                            }
                        }, 'read_share'], that)
                        that.$app.shenceLog.log(that,'track','Share', {
                            ShareSite: that.shareSite || '',
                            SharePlatforms:'WEIXIN',
                            ShareType: 0,
                            ShareTitle: osharevo.title || '',
                            ShareSummary: osharevo.remark || '',
                            ShareTargetUrl: osharevo.shareUrl || '',
                            ShareChannelCode: osharevo.shareChannelCode || '',
                            Msg: '',
                            IsSuccess: true,
                        });
                    },
                    fail: function (data, code) {
                        that.oshareAction = false;
                        prompt.showToast({
                            message: '分享失败'
                        })

                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '4',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'1',
                                osharevo,
                                source: 'shareSe_share_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                        that.$app.shenceLog.log(that,'track','Share', {
                            ShareSite: that.shareSite || '',
                            SharePlatforms: 'WEIXIN',
                            ShareType: 0,
                            ShareTitle: osharevo.title || '',
                            ShareSummary: osharevo.remark || '',
                            ShareTargetUrl: osharevo.shareUrl || '',
                            ShareChannelCode: osharevo.shareChannelCode || '',
                            IsSuccess: false,
                            Msg: `failMess=${data},code=${code}`,
                        });
                    }
                })
            } catch (e) {
                that.canShowPop = false
                share.share({
                    type: 'text/html',
                    data: osharevo.title + '\r\n' + osharevo.remark + '\r\n<a href="' + osharevo.shareUrl + '">小说大全</a>',
                    success: function (data) {
                        that.oshareAction = true;
                        that.shareStatus(2)
                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '10',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'1',
                                osharevo
                            }
                        }, 'read_share'], that)
                    },
                    fail: function (data, code) {
                        that.oshareAction = false;
                        prompt.showToast({
                            message: '分享失败'
                        })

                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '11',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'1',
                                osharevo,
                                source: 'share_share_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                    }
                });
            }
            that.sharetabshow = false;

            //分享打点
            that.$app.$def.quickappLog([703, {
                qmap: {
                    site: '2',
                    page: '3',
                    oissign:that.isbutshare,
                    type:'1',
                    osharevo
                }
            }, 'read_share'], that)
        },
        //分享到微信朋友圈
        sharecircle() {
            let that = this;
            let osharevo = {}
            if(that.isbutshare){
                let shareArr = []
                that.obuttomShareVoList.forEach((item,idx)=>{
                    if(item.shareType==2){
                        shareArr.push(item)
                    }
                })
                let random = Math.floor(Math.random() * shareArr.length)
                that.obuttomShareVo =  shareArr[random];
                osharevo = that.obuttomShareVo;
            }else{
                let shareArr = []
                that.opopShareVoList.forEach((item,idx)=>{
                    if(item.shareType==2){
                        shareArr.push(item)
                    }
                })
                console.log(shareArr)
                let random = Math.floor(Math.random() * shareArr.length)
                that.opopShareVo =  shareArr[random];
                osharevo = that.opopShareVo;
            }
            that.shareStatus(1)
            try {
                that.canShowPop = false
                let shareUrl = that.fnReplaceUrl(osharevo.shareUrl)
                shareSe.share({
                    shareType: 0,
                    title: osharevo.title,
                    summary: osharevo.remark,
                    imagePath: osharevo.img,
                    targetUrl: shareUrl,
                    platforms: ['WEIXIN_CIRCLE'],
                    success: function (data) {
                        that.oshareAction = true;

                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '3',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'2',
                                osharevo
                            }
                        }, 'read_share'], that)
                        that.$app.shenceLog.log(that,'track','Share', {
                            ShareSite: that.shareSite || '',
                            SharePlatforms: 'WEIXIN_CIRCLE',
                            ShareType: 0,
                            ShareTitle: osharevo.title || '',
                            ShareSummary: osharevo.remark || '',
                            ShareTargetUrl: osharevo.shareUrl || '',
                            ShareChannelCode: osharevo.shareChannelCode || '',
                            Msg: '',
                            IsSuccess: true,
                        });
                    },
                    fail: function (data, code) {
                        that.oshareAction = false;
                        prompt.showToast({
                            message: '分享失败'
                        })

                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '4',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'2',
                                osharevo,
                                source: 'share_share_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                        that.$app.shenceLog.log(that,'track','Share', {
                            ShareSite: that.shareSite || '',
                            SharePlatforms: 'WEIXIN_CIRCLE',
                            ShareType: 0,
                            ShareTitle: osharevo.title || '',
                            ShareSummary: osharevo.remark || '',
                            ShareTargetUrl: osharevo.shareUrl || '',
                            ShareChannelCode: osharevo.shareChannelCode || '',
                            Msg: `failMess=${data},code=${code}`,
                            IsSuccess: false,
                        });
                    }
                })
            } catch (e) {
                that.canShowPop = false
                // that.oshareAction = true;
                share.share({
                    type: 'text/html',
                    data: osharevo.title + '\r\n' + osharevo.remark + '\r\n<a href="' + osharevo.shareUrl + '">小说大全</a>',
                    success: function (data) {
                        that.oshareAction = true;

                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '10',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'2',
                                osharevo
                            }
                        }, 'read_share'], that)
                    },
                    fail: function (data, code) {
                        that.oshareAction = false;
                        prompt.showToast({
                            message: '分享失败'
                        })

                        //分享打点
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '11',
                                page: '3',
                                oissign:that.isbutshare,
                                type:'2',
                                osharevo,
                                source: 'share_share_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                    }
                });
            }
            that.sharetabshow = false;

            //分享打点
            that.$app.$def.quickappLog([703, {
                qmap: {
                    site: '2',
                    page: '3',
                    oissign:that.isbutshare,
                    type:'2',
                    osharevo
                }
            }, 'read_share'], that)
        },
        closetabshow() {
            let that = this;
            that.sharetabshow = false;
            //分享打点
            that.$app.$def.quickappLog([702, {
                qmap: {
                    site: '13',
                    page: '3',
                    sitenum:that.sitenum,
                    oissign:that.isbutshare
                }
            }, 'read_share'], that)
        },
        getIsShortcut(){
            let that = this;
            shortcut.hasInstalled({
                success: function (ret) {
                    //是否添加到桌面   0否  1是
                    let isas = 0;
                    if (ret) {
                        isas = 1;
                        that.$app.$def.requestData(that,{
                            interface: `/glory/fastapp/2107`,
                            data: {
                                isas:isas
                            },
                            succ: function (data) {
                            },
                            error: function (code) {
                            }
                        })
                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '2',
                                page: that.frompage,
                                cIndex:that.chapterIndex,
                                sorce:'system_shortcut'
                            }
                        }, 'shortcut'], that)
                    }
                }
            });
        },
        /**
         * 获取运营位/任务信息
         */
        getServerInit() {
            let that = this;
            that.$app.$def.requestData(that,
                {
                    interface: '/glory/fastapp/2154',
                    data: {
                        isRead:1,
                        bookId:that.bookId,
                        sceneVal:2,
                        readPageWidget: 1,
                        textLink: 1,
                    },
                    succ: function (res) {
                        if(!res || !res.data) {
                            that.fnExceptionReport(2, '2154 接口错误')
                            return
                        }
                        // 获取阅读页返回及章末荐书策略
                        if(res.data.stageReadTask) {
                            that.awardVideoSwitch = true
                            that.isReadProgressShow = true
                            that.minReportTime = +res.data.stageReadTask.chapterMinReadTime
                            that.maxReportTime = +res.data.stageReadTask.chapterMaxReadTime
                            that.readTaskId = res.data.stageReadTask.taskId
                            that.readTaskAll = res.data.stageReadTask.stageReadAwardList
                            that.readTotalTime = res.data.stageReadTask.actualReadTime
                            that.readAwardObj = {
                                readAwardIconUrl: res.data.stageReadTask.taskEntryImgUrl || '' ,
                                isNewAwardStyle: res.data.stageReadTask.taskEntryStyle === 1 ,
                                readAwardInitText: res.data.stageReadTask.taskEntryTip || ''
                            }
                            that.fnChangeReadProgress(true)     
                        }
                        if(res.data.widgetVo && !res.data.stageReadTask) {
                            that.readTask = res.data.widgetVo
                        }
                        if(res.data.listenPayFlag) {
                            that.listenPayFlag = !!res.data.listenPayFlag
                        }
                        // 免费听书
                        if(res.data.ttsTaskVideoMap) {
                            let listenTask = res.data.ttsTaskVideoMap
                            that.listenTask.taskId = listenTask.taskId
                            if(listenTask.ttsFreeAvailableNumber) {
                                that.listenTask.hasFree = true
                                that.listenTask.freeTimeLast = listenTask.ttsFreeTime
                                that.listenTask.freeText = listenTask.ttsFreeDoc
                                that.listenTask.freeBtnText = listenTask.ttsFreeButtonDoc
                                that.listenTask.freeEndText = listenTask.ttsFreeEndDoc
                            }
                            if(listenTask.vipDeblocking1 === 1 || listenTask.vipDeblocking2 === 1) {
                                that.listenTask.memberBtnStyle = listenTask.vipDeblockingStyle === 0 ? true : false
                                that.listenTask.memberBtnText = listenTask.vipDeblockingDoc
                            }
                            if(listenTask.vipDeblocking1 === 2 || listenTask.vipDeblocking2 === 2) {
                                that.listenTask.remainTimes = listenTask.adPositionId ? listenTask.ttsVideoNumber : 0 
                                that.listenTask.taskTimeLast = listenTask.videoRewardTime
                                that.listenTask.videoBtnStyle = listenTask.videoDeblockingStyle === 0 ? true : false
                                that.listenTask.videoBtnText = listenTask.videoRewardDoc
                                that.listenVideoId = listenTask.adPositionId 
                                that.listenVideoAdInfo = {
                                    userTacticsVo: listenTask.userTactics
                                }
                                that.listenVideoSwitch = true
                            }
                        }
                        if(res.data.readInsertVideo) {
                            if(res.data.readInsertVideo.adPositionId) {
                                that.insertVideoId = res.data.readInsertVideo.adPositionId
                            }
                            if(res.data.readInsertVideo.userTactics) {
                                that.insertVideoTactics = {
                                    userTacticsVo: res.data.readInsertVideo.userTactics,
                                    operationInfo: res.data.readInsertVideo.operationInfo || {},
                                }
                            }
                            if(res.data.readInsertVideo.taskId && res.data.readInsertVideo.limitNum > 0) {
                                that.insertVideoTaskId = res.data.readInsertVideo.taskId
                                that.insertVideoNums = res.data.readInsertVideo.limitNum
                            } else {
                                that.insertVideoNums = 0
                            }
                            if(res.data.readInsertVideo.slidePageLimitNum) {
                                that.readTipShowTimes = res.data.readInsertVideo.slidePageLimitNum
                            }
                            if(res.data.readInsertVideo.missClickRatio) {
                                that.insertVideoTouchRatio = res.data.readInsertVideo.missClickRatio
                            }
                            if(res.data.readInsertVideo.missClickLimitCount) {
                                that.insertVideoTouchLimit = res.data.readInsertVideo.missClickLimitCount
                            }
                            if(res.data.readInsertVideo.imgUrl) {
                                that.insertVideoImage = res.data.readInsertVideo.imgUrl
                            }
                           
                            that.insertVideoSwitch = true
                        }
                        if(res.data.chapterHeadVideo) {
                            if(res.data.chapterHeadVideo.adPositionId) {
                                that.preVideoId = res.data.chapterHeadVideo.adPositionId
                            }
                            if(res.data.chapterHeadVideo.sendNumber) {
                                that.preVideoAwardNums = res.data.chapterHeadVideo.sendNumber || 100
                            }
                            if(res.data.chapterHeadVideo.userTactics) {
                                that.preVideoTactics = {
                                    userTacticsVo: res.data.chapterHeadVideo.userTactics,
                                    operationInfo: res.data.chapterHeadVideo.operationInfo || {},
                                }
                            }
                            if(res.data.chapterHeadVideo.taskId && res.data.chapterHeadVideo.limitNum > 0) {
                                that.preVideoTaskId = res.data.chapterHeadVideo.taskId
                                that.preVideoNums = res.data.chapterHeadVideo.limitNum
                            } else {
                                that.preVideoNums = 0
                            }
                            if(res.data.chapterHeadVideo.newUserPackageNum) {
                                that.preVideoPopLimit = res.data.chapterHeadVideo.newUserPackageNum
                            }
                            if(res.data.chapterHeadVideo.startChapter) {
                                that.preVideoStart = res.data.chapterHeadVideo.startChapter
                            }
                            if(res.data.chapterHeadVideo.spaceChapter) {
                                that.preVideoSpace = res.data.chapterHeadVideo.spaceChapter
                            }
                            if(res.data.chapterHeadVideo.imgUrl) {
                                that.preVideoImage = res.data.chapterHeadVideo.imgUrl
                            }
                            that.preVideoSwitch = true
                            that.fnPreVideoPopSwitch()
                        }
                        if(res.data.tactics){
                            let tactics = res.data.tactics
                            let hasTextLineList = false
                            let hasReadPageWidget = false
                            for(let i = 0;i<tactics.length;i++){
                                let tactic = tactics[i]
                                // 章末文字链策略
                                if(tactic.location == 16){
                                    if(tactic.textLinkList && tactic.textLinkList.length > 0) {
                                        hasTextLineList = true
                                        that.textLinkList = tactic.textLinkList
                                        that.selectTextLine(true)
                                    }
                                }
                                // 阅读页挂件-运营位
                                if(tactic.location == 17){
                                    that.readPageWidget = JSON.stringify(tactic.readPageWidget) == '{}' ? null : tactic.readPageWidget
                                    that.hanggingHolderOperationName = tactic.operationName || ''
                                    that.hanggingHolderUserTacticsVo = tactic.userTacticsVo||{}
                                    that.hangingHolderShenceOn = true;
                                    if(that.readPageWidget) {
                                        hasReadPageWidget = true
                                    }
                                    that.fnHangingHolder()
                                }
                            }
                            if(!hasTextLineList) {
                                that.textLinkList = []
                                that.textLinkShouldShow = false
                            }
                            if(!hasReadPageWidget) {
                                that.hangingHolderShow = false
                            }
                        }else {
                            that.textLinkList = []
                            that.textLinkShouldShow = false
                            that.hangingHolderShow = false
                        }
                        // 华为启动时直接推送，推送声音一直开启，先播放MP3使推送静默
                        if(res.data.hwvs) {
                            if(that.$app.isNeedHuaweiAudio && that.$app.headerJson && that.$app.headerJson.brand && (that.$app.headerJson.brand.toLowerCase() == 'huawei' || that.$app.headerJson.brand.toLowerCase() == 'honor')) {	
                                that.needPlayAudio = true
                                that.$app.isNeedHuaweiAudio = false		
                                audio.onended = function() {
                                    audio.stop()
                                }
                                audio.src = '../Common/test.mp3'
                                audio.play()
                            }else {
                                that.$app.isNeedHuaweiAudio = false
                            }
                        }else {
                            that.$app.isNeedHuaweiAudio = false
                        }
                        //本地常驻通知栏
                        if(res.data.localPush&&JSON.stringify(res.data.localPush)!='{}'){
                            that.localPush = res.data.localPush
                            that.localPushUt = res.data.localPushUt
                            that.sceneVal = res.data.sceneVal
                            if(that.sceneVal==2&&!that.$app.hasShowNote){
                                if(that.needPlayAudio) {
                                    that.needPlayAudio = false
                                    setTimeout(() => {
                                        that.showNotification(res.data.localPush)
                                    }, 1000)
                                }else {
                                    that.showNotification(res.data.localPush)
                                }
                            }
                        }
                        if(res.data.chapterEndRecoStartNum) {
                            that.chapterEndRec.startChapter = res.data.chapterEndRecoStartNum 
                        }
                        if(res.data.chapterEndRecoInterval) {
                            that.chapterEndRec.chapterInterval = res.data.chapterEndRecoInterval 
                        }
                        if(res.data.chapterEndRedTask && JSON.stringify(res.data.chapterEndRedTask) != '{}') {
                            that.fnInitCerData(res.data.chapterEndRedTask);
                        }
                        that.hasGetServer = true
                        that.fnSetRecParams()
                    },
                    fail: function () {
                        that.fnExceptionReport(2, '2154 网络错误')
                        network.getType({
                            success: function(data) {
                                if(data && data.type == 'none') {
                                    that.isGetServerError = true
                                }
                            }
                        })
                    }
                }
            )
        },
        /**
         * 获取配置参数
         */
        getServerUtil(){
            let that = this;
            that.$app.$def.requestData(that,
                {
                    interface: '/glory/fastapp/2150',
                    data: {isRead:1,bookId:that.bookId,sourceChannelCode:that.$app.sourceInfo['sourceCid']},
                    succ: function (res) {
                        if(!res || !res.data) {
                            that.fnExceptionReport(2, '2150 接口错误')
                            return
                        }
                        that.hasGetSetting = true
                        // 加桌关闭按钮开关
                        if (res.data && res.data.addDesk) {
                            if(res.data.addDesk.addDeskPosition.indexOf('readPage') > -1) {
                                if(res.data.addDesk.addDeskStyle.indexOf('button') > -1) {
                                    that.isAddDeskBtnClose = true
                                }
                                if(res.data.addDesk.addDeskStyle.indexOf('img') > -1) {
                                    that.isAddDeskImageClose = true
                                }
                            }
                        }
                        if (!that.$app.isSmSDKCreated) {
                            if (res.data && res.data.smInitFlag) {
                                that.$app.fnSmFlagInit(res.data);   // 数美开关初始化
                                that.$app.fnSmSDKCreate();          // 数美SDK初始化
                            }
                        }
                        if(res.data && res.data.dzmfVipType) {
                            that.dzmfVipType = res.data.dzmfVipType
                        }
                        if(res.data && res.data.dzmfListenVipFlag) {
                            that.dzmfListenVipFlag = res.data.dzmfListenVipFlag
                        }
                        if(res.data && res.data.canCharge) {
                            that.isChargeBook = true
                        }
                        if(res.data && res.data.menuShowType && that.fromPlace !== 'login') {
                            const menuShowType = res.data.menuShowType
                            if(menuShowType === 'every' && !that.isPreAdPage) {
                                that.bShowDashboard = true
                                that.fnSetMenuShowCache()
                            }
                            if(menuShowType === 'daily' && !that.hasMenuShow && !that.isPreAdPage) {
                                that.bShowDashboard = true
                                that.fnSetMenuShowCache()
                            }
                        }
                        // 免广告VIP开关
                        if(res.data && res.data.dzmfVIPShowFlag) {
                            that.noAdVipSwitch = true
                        }else {
                            that.noAdVipSwitch = false
                        }
                        if(res.data && res.data.brandAdSwitch) {
                            that.brandAdSwitch = true
                        }
                        // 返回视频判断
                        if(res.data && res.data.rbav && that.isAdShow && that.isAdShow == 1) {
                            if(res.data.rbav.adPositionId) {
                                that.readVideoId = res.data.rbav.adPositionId
                            }
                            if(res.data.rbav.loadTime) {
                                that.videoAdLoadLimit = res.data.rbav.loadTime
                            }
                            if(res.data.rbav.userTactics) {
                                res.data.rbav.userTacticsVo = res.data.rbav.userTactics
                            }
                            that.readVideoInfo = res.data.rbav
                            that.canReadVideoShow = true
                        }
                        // 判断是否下发广告墙配置
                        if(res.data && res.data.adWallParams) {
                            that.canLoadAdWall = true
                            that.adWallParams = res.data.adWallParams
                            if(res.data.adWallParams.adPositionId) {
                                that.adWallToken = res.data.adWallParams.adPositionId
                            }
                            that.adWallReduceAd.maxCount = that.adWallParams.receiveAwardMaxCount || 0;             // 间隔时间内可进入激励墙的最大次数
                            that.fnSetAdWall()
                            that.fnNeedEnterAdWall()
                        }
                        if(res.data.rpba) {
                            try {
                                let rpba = JSON.parse(res.data.rpba)
                                if(rpba.length) {
                                    that.backDialog = rpba[0]
                                }
                            } catch(e) { console.log(e) }
                        }
                        // 百度拉起开关
                        if(res.data.baiduBrow == '1') {
                            that.$app.isBaiduOpen = true
                            that.isBaidu = true
                        }
                        // 记录系统时间
                        if(res.data && res.data.currTime) {
                            that.sysTime = res.data.currTime
                        }
                        //加密方式
                        if(res.data.hmSwParam){
                            that.$app.swParam = res.data.hmSwParam
                        }else{
                            that.$app.swParam = ''
                        }
                        // 热启动开关
                        if(res.data.isWarmBoot) {
                            that.$app.isOpenPageSwitch = res.data.isWarmBoot
                        }
                        // 热启动间隔时间
                        if(res.data.spaceTime) {
                            that.$app.openPageSpace = res.data.spaceTime * 1000
                        }
                        // 离开页面间隔时间
                        if(res.data.leaveTime) {
                            that.$app.leavePageSpace = res.data.leaveTime * 1000
                        }
                        if(that.$app.hasAddcut&&res.data.changeChannelCode==1){
                            if(that.$app.sourceInfo['sourceCid']!=that.$app.$data.channelCode){
                                let SourceChannel =  that.$app.headerJson.channelCode
                                if(SourceChannel!=that.$app.sourceInfo['sourceCid']){
                                    that.$app.headerJson.triggerTime = that.$app.$def.getLogTime()
                                    that.$app.shenceLog.log(that,'track','ChangeChannel', {
                                        DesktopState:'Saved'
                                    });
                                }
                                that.$app.headerJson.channelCode = that.$app.sourceInfo['sourceCid']
                                that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
                                    ChannelCode: that.$app.headerJson.channelCode || ''
                                })
                                that.$app.$def.setStorageFile(that,{
                                    key:'headerJson',
                                    value:that.$app.headerJson
                                })
                            }
                        }
                        if(res.data.delVbc){
                            that.delVbc = res.data.delVbc
                        }
                        if(res.data.successTip){
                            that.successTip=JSON.parse(res.data.successTip)
                            that.fnSplitTip()
                        }
                        if(res.data.buttonTip&&res.data.buttonTip.length){
                            that.buttonTipList = res.data.buttonTip
                            that.fnGetButtonTip()
                        }

                        that.$app.isAddDesktop = !!res.data.isAddDesktop
                        
                        if(res.data.currTime){
                            let clientTime = new Date().getTime()
                            that.timeDif = res.data.currTime - clientTime
                        }
                        if(res.data.voicePn){
                            that.ttsPreloadNum = res.data.voicePn
                        }
                        if(res.data.irtt){
                            that.irtt = JSON.parse(res.data.irtt)
                            that.fngetbtnText()
                        }else{
                            that.btnText = '保存本书到手机，方便下次阅读';
                        }
                        if(res.data.nrtt){
                            that.nrtt = JSON.parse(res.data.nrtt)
                            that.fnGetNextCut()
                        }
                        if(res.data.rpbt){
                            that.rpbt = JSON.parse(res.data.rpbt)
                            that.fngetonebtnText()
                        }
                        // 章首加桌展示
                        that.hideShortcutInPre = res.data.irtt_ctspw === 0
                        that.hideOnekeyShortcutInPre = res.data.rpbt_ctspw === 0
                        // 授权后加桌
                        if(res.data.customAddDeskStyle) {
                            that.isAuthShortcutNewStyle = res.data.customAddDeskStyle.newStyle
                            that.authShortcutInfo = res.data.customAddDeskStyle
                            if(!that.isAuthShortcutNewStyle) {
                                that.authShortcutInfo.btnTip = that.authShortcutInfo.oldBtnTip
                            }
                            try {
                                if(that.authShortcutInfo.contentTip.indexOf('作者') > -1) {
                                    that.authShortcutInfo.color = true
                                }
                                if(that.authShortcutInfo.awardTip) {
                                    let awardTip = that.authShortcutInfo.awardTip
                                    let reg = /(\+[0-9.]+)|([0-9.]+)/
                                    let awardNum = awardTip.match(reg)[0]
                                    if(awardNum) {
                                        awardTip = awardTip.replace(awardNum, '##' + awardNum + '##')
                                        that.authShortcutInfo.awardArr = awardTip.split('##')
                                        that.authShortcutInfo.awardNum = awardNum
                                    }
                                }
                            } catch(e) {}
                            that.hasAuthShortcutConfig = true
                        } else {
                            that.hasAuthShortcutConfig = true
                        }
                        if(res.data.att){
                            that.authShortcut = res.data.att
                            that.authTips = res.data.artt
                            if(that.hasAuthed&&that.isAuthorize==1&&that.isOlder==0){
                                that.afterAuthShortcut()
                            }else if(that.hasAuthed){
                                if(that.fromPlace=='login'){
                                    that.afterAuthShortcut()
                                }
                            }
                        }
                        if(res.data.readNum){
                            that.readNum.serverReadNum = res.data.readNum;
                        }
                        if(res.data.readQuitNum){
                            that.readNum.readQuitNum = res.data.readQuitNum;
                        }
                        if(res.data.atap!=undefined){
                            that.netShortAward = res.data.atap
                        }
                        if(res.data.systemInText){
                            that.systemInText = res.data.systemInText;
                        }else{
                            that.systemInText = '将【'+that.$app.$data.name+'】添加到桌面，方便下次继续阅读！';
                        }
                        if(res.data.canclePrelad=='1'){
                            storage.set({
                                key:'canclePrelad',
                                value:1
                            })
                        }else{
                            storage.set({
                                key:'canclePrelad',
                                value:0
                            })
                        }
                        if(res.data.oppoBrow=='1'){
                            that.oppoBrow = true
                        }
                        // 听书配置
                        if(res.data.tones && res.data.tones.length) {
                            that.timbreList = res.data.tones
                        }
                        if(res.data.speeds && res.data.speeds.length) {
                            that.speedList = res.data.speeds
                        }
                        if(res.data.defaultTone) {
                            that.defaultTimbre = res.data.defaultTone
                        }
                        if(res.data.defaultSpeed) {
                            that.defaultSpeed = res.data.defaultSpeed
                        }
                        if(res.data.awardBdTtsToken) {
                            that.ttsToken = res.data.awardBdTtsToken
                            if(res.data.awardTtsTime) {
                                that.extraListenTime = new Date().getTime() + res.data.awardTtsTime * 1000
                                that.extraListenSwitch = true
                                that.fnAutoListenSwitch();                  // 自动听书
                            }
                        } else {
                            that.extraListenSwitch = false
                        }
                        if(res.data.bdTtsToken) {
                            that.ttsToken = res.data.bdTtsToken
                            that.listenSwitch = true
                            that.fnAutoListenSwitch();                  // 自动听书
                        } else {
                            that.listenSwitch = false
                        }
                        // 用户挽留章节数
                        if(res.data.readQuit) {
                            that.userStayChapter = res.data.readQuit
                        }
                        if(res.data.zhiFuBaoBindFlag) {
                            that.isZhiFuBaoBind = true;
                        }
                    },
                    fail: function () {
                        that.fnExceptionReport(2, '2150 网络错误')
                        network.getType({
                            success: function(data) {
                                if(data && data.type == 'none') {
                                    that.isGetSettingError = true
                                }
                            }
                        })
                        that.systemInText = '将【'+that.$app.$data.name+'】添加到桌面，方便下次继续阅读！';
                        that.btnText='保存本书到手机，方便下次阅读'
                    }
                }
            )
        },
        fnGetButtonTip(){
            if(this.buttonTipList&&this.buttonTipList.length){
                let randomNum = Math.floor(Math.random() * this.buttonTipList.length)
                this.buttonTip = this.buttonTipList[randomNum].split('#')
                console.log(this.buttonTip)
            }
        },
        fnSplitTip(){
            if(this.successTip&&this.successTip.length){
                this.successTip.forEach((cur,index)=>{
                    if(index==0){
                        this.successTipTop = cur.tip.split('#')
                    }
                    if(index==1){
                        this.successTipBot = cur.tip.split('#')
                    }
                })
            }
        },
        fnshortcut() {
            let that = this;            
            that.readNum.nowReadNum = 0;
            let _infotype = that.$app.dataJson.infotype || 'nfind';
            if(_infotype == 'shortcut'){
                // console.log('已创建桌面图标')
            }else{
                shortcut.hasInstalled({
                    success: function (ret) {
                        if (!ret) {
                            shortcut.install({
                                message: that.nextShortText||that.systemInText,
                                success: function () {
                                    that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                        IsSuccess: true,
                                        PositionName: '阅读页阅读一定数量添桌',
                                        ChaptersNum: that.chapterIndex,
                                        Instruction: that.nextShortText || that.systemInText,
                                        StateCode: 'return'
                                    }); 
                                    //来源写入变量
                                    that.$app.dataJson = Object.assign({}, {infotype:'shortcut'});
                                    prompt.showToast({
                                        message: '成功创建桌面图标'
                                    });
                                    that.$app.$def.quickappLog([703, {
                                        qmap:{
                                            site: '2',
                                            page: '3',
                                            sorce:'read_num_shortcut'
                                        }
                                    }, 'shortcut'], that)
                                    that.$app.$def.requestData(that,{
                                        interface: `/glory/fastapp/2107`,
                                        data: {
                                            isas:1
                                        },
                                        succ: function (res) {
                                            if(res.data.freeLimitAll){
                                                that.$app.shortSuccessText = res.data.freeLimitAll
                                            }
                                            that.showShortSuccess()
                                        },
                                        error: function (code) {
                                            that.showShortSuccess()
                                        }
                                    })
                                    that.fnTellServer(1);
                                },
                                fail: function (data, code) {
                                    that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                        IsSuccess: false,
                                        PositionName: '阅读页阅读一定数量添桌',
                                        ChaptersNum: that.chapterIndex,
                                        Instruction: that.nextShortText || that.systemInText,
                                        StateCode: 'return',
                                        MsgSendCode: code,
                                        MsgSendContent: data,
                                    }); 
                                    that.$app.$def.quickappLog([703, {
                                        qmap:{
                                            site: '3',
                                            page: '3',
                                            data,
                                            code,
                                            sorce:'read_num_shortcut',
                                            source: 'shortcut_install_fail',
                                            thisUri: that.$page.uri,
                                            thisPage: 'Read',
                                        }
                                    }, 'catch_error'], that)
                                },
                                complete(errmsg){
                                    that.fnGetNextCut()
                                    that.$app.$def.quickappLog([703, {
                                        qmap:{
                                            site: '5',
                                            page: '3',
                                            errmsg:`${errmsg}`,
                                            sorce:'read_num_shortcut'
                                        }
                                    }, 'shortcut'], that)

                                }
                            })
                            that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                PositionName: '阅读页阅读一定数量添桌',
                                ChaptersNum: that.chapterIndex,
                                Instruction: that.nextShortText || that.systemInText,
                                StateCode: 'submit',
                                DesktopState: that.$app.isAddDesktop ? 'Deleted' : 'Neversaved'
                            }); 
                            that.$app.$def.quickappLog([703, {
                                qmap:{
                                    site: '1',
                                    page: '3',
                                    sorce:'read_num_shortcut'
                                }
                            }, 'shortcut'], that)
                        }
                    }
                }) 
            }
            
        },
        getUserEndFn(){
            let that = this;
            that.fnGetAdSetting()
            that.getServerUtil()
            that.getServerInit()
            that.getIsShortcut()
            that.getUserStay()
            that.getBottomShare()
        },
        // 以下为注册新用户 star
        getUserIdLogic(cancleLog){
            let that = this;
            let p = that.getHeaderJson(cancleLog);
            p.then(data=>{ //读取headerJson成功
                if(data){
                    let headerJson=JSON.parse(data);
                    that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
                        ChannelCode: headerJson.channelCode || ''
                    })
                    headerJson.appStartScene = that.$app.startScene || 'other'
                    headerJson.sourceChannel = that.$app.sourceInfo && that.$app.sourceInfo.sourceCid || ''
                    headerJson.sourcePackageName = that.$app.sourcePackageName || ''
                    shortcut.hasInstalled({
                    success: function(res) {
                            if(res){
                                that.channelCode = headerJson.channelCode;
                            }else{
                                if(headerJson.channelCode && (that.channelCode=='' || that.channelCode==that.$app.$data.channelCode)){
                                    that.channelCode = headerJson.channelCode;
                                }
                            }
                            headerJson.channelCode = that.channelCode;
                            that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
                                ChannelCode: headerJson.channelCode || ''
                            })
                            that.$app.$def.setStorageFile(that,{
                                key:'headerJson',
                                value:headerJson
                            })
                            that.$app.headerJson = headerJson
                            if(headerJson.utdid){
                                that.device.utdid = headerJson.utdid;
                                if(headerJson.userId){ //有userId && 有真实的utdid 进入首页
                                    that.userId = headerJson.userId;
                                    if(that.isFirsInt){
                                        that.getUserEndFn();
                                        that.isFirsInt = false;
                                    }
                                    return;
                                }else{  //没有userId，用真实的utdid生成userId
                                    that.getUserId(that.device.utdid);
                                }
                            }else{
                                if(headerJson.userId){
                                    that.userId = headerJson.userId;
                                    if(headerJson.utdidTmp){ //没有真实的utdid && 有userId && 有临时utdid 进入首页
                                        if(that.isFirsInt){
                                            that.getUserEndFn();
                                            that.isFirsInt = false;
                                        }
                                        return;
                                    }else{ //没有真实的utdid && 有userId && 没有临时utdid 生成临时的utdid 重新生成userId
                                        let utdidTmp = that.createUtdidTmp();
                                        that.getUserId(utdidTmp);
                                    }
                                }else{ //没有真实的utdid && 没有userId && 没有真实的utdid 生成临时的utdid 生成userId
                                    if(headerJson.utdidTmp){
                                        that.getUserId(headerJson.utdidTmp);
                                    }else{
                                        let utdidTmp = that.createUtdidTmp();
                                        that.getUserId(utdidTmp);
                                    }
                                }
                            }
                        }
                    })
                }else{ //data为空字符串
                    let utdidTmp = that.createUtdidTmp();
                    that.getUserId(utdidTmp); //如果缓存没有headerJson数据，则生成临时的utdid去生成userId
                }
            },(data)=>{//读取headerJson失败
                let utdidTmp = that.createUtdidTmp();
                that.getUserId(utdidTmp); //如果读取headerJson失败，则生成临时的utdid去生成userId
            })
        },
        getHeaderJson(cancleLog){
            let that = this;
            return new Promise((resolve,reject)=>{
                that.$app.$def.getStorageFile(that,{
                    key:'headerJson',
                    success:function(data){
                        if(!cancleLog){
                            that.$app.$def.quickappLog([703, {
                                qmap:{
                                    page:'1',
                                    site:'1',
                                    headerJson:data
                                }
                            }, 'read_getHeaderJson'], that)
                        }
                        resolve(data);
                    },
                    fail:function(data, code){
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                page:'1',
                                site:'2',
                                headerJson:data,
                                source: 'getStorage_headerJson_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                        reject(code);
                    }
                })

            })
        },
        createUtdidTmp(){ //生成临时的utdid
            let utdidTmp = this.getUtdidTmp();
            this.device.utdidTmp = this.$app.$def.hex_md5(utdidTmp);
            return utdidTmp;
        },
        getUserId(utdidTmp){
            let that = this;
            let oGetAndroidId = new Promise((resolve,reject)=>{
                device.getUserId({
                    success: function(data) {
                        that.device.androidId = data.userId
                        resolve()
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                // id:data.userId,
                                site:'1'
                            }
                        }, 'getAndroidId'], that)
                        
                    },
                    fail: function(data, code) {
                        resolve()
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                code:code,
                                data:data,
                                site:'2'
                            }
                        }, 'getAndroidId'], that)
                        
                    }
                })
            })
            let oGetInfo = new Promise((resolve, reject) => {
                device.getInfo({
                    success: function (res) {
                        that.device.brand = res.brand;
                        that.device.model = res.model;
                        that.device.osvn = res.osVersionName
                        that.device.osvc = res.osVersionCode
                        that.device.scw = res.screenWidth
                        that.device.sch = res.screenHeight
                        that.device.pfvn = res.platformVersionName
                        that.device.pfvc = res.platformVersionCode
                        resolve(res);
                        //获取用户信息成功打点
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                page:'10',
                                site:'1',
                                channelCode:that.channelCode,
                                jumpPage:that.jumpPage,
                                bookId:that.bookId,
                                chapterId:that.chapterId,
                                sid:that.sid,
                                chapterName:that.chapterName,
                                uuid:that.uuid
                            }
                        }, 'device_getinfo'], that)
                    },
                    fail:function(data,code){
                        //获取用户信息失败打点
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                page:'10',
                                site:'2',
                                channelCode:that.channelCode,
                                jumpPage:that.jumpPage,
                                bookId:that.bookId,
                                chapterId:that.chapterId,
                                chapterName:that.chapterName,
                                uuid:that.uuid,
                                source: 'device_getInfo_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                    }
                })
            })
            Promise.all([oGetAndroidId,oGetInfo]).then((result) => {
                let headerJson = {}
               if(JSON.stringify(that.$app.headerJson) != "{}"&&(that.$app.headerJson.utdidTmp != ''||that.$app.headerJson.utdid != '')){
                    headerJson = that.$app.headerJson
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            site:'1',
                            headerJson:headerJson
                        }
                    }, 'app_herderJson'], that)
                }else{
                    headerJson={
                        brand:that.device.brand || 'empty',
                        model:that.device.model || 'empty',
                        osvn:that.device.osvn || 'empty',
                        osvc:that.device.osvc || 'empty',
                        scw:that.device.scw || 'empty',
                        sch:that.device.sch || 'empty',
                        pfvn:that.device.pfvn || 'empty',
                        pfvc:that.device.pfvc || 'empty',
                        utdidTmp: utdidTmp,
                        utdid: that.device.utdid,
                        domain: that.config.domain,
                        userId: that.userId,
                        t: that.t,
                        pname: that.config.pname,
                        channelCodeFee:that.channelCode, 
                        channelCode:that.channelCode, //新增和充值都用它标记
                        uuid:that.uuid,
                        readPref:'0',
                    }
                    headerJson.scDistinctId = that.$app.$def.sGetDistinctId()?that.$app.$def.sGetDistinctId():''
                    headerJson.triggerTime = that.$app.$def.getLogTime()
                    that.$app.$def.setStorageFile(that,{
                        key:'headerJson',
                        value:headerJson
                    })
                    headerJson.appStartScene = that.$app.startScene || 'other'
                    headerJson.sourceChannel = that.$app.sourceInfo && that.$app.sourceInfo.sourceCid || ''
                    headerJson.sourcePackageName = that.$app.sourcePackageName || ''
                    that.$app.headerJson = headerJson
                }
                that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
					ChannelCode: headerJson.channelCode || ''
				})
                if(that.device.utdid){
                    headerJson.utdid = that.device.utdid
                }
                if(!headerJson.pname){
                    return false;
                }
                
                let dataJson={
                    ei: that.device.ei,
                    domain: that.config.domain,
                    utdid: that.device.utdid || utdidTmp, //上行用utdid接收，有正式的传正式的 没有正式的传临时的
                    brand: that.device.brand,
                    model: that.device.model,
                    channelCode: that.channelCode,
                    bookId: that.bookId, 
                    chapterId: that.chapterId,
                    blackList:1,
                    androidId:that.device.androidId||'',
                    uuid:that.$app.sourceInfo['uuid'],
                    pullMode:that.$app.sourceInfo['pullMode'],
                    isAddBf: 0,
                };	
                fetch.fetch({
                    method: "POST",
                    url:that.$app.api+"/glory/fastapp/2101?"+that.config.appVer,
                    header: headerJson,
                    data: JSON.stringify(dataJson),
                    success: function (ret) {
                        if(ret.code==200){
                            let res=JSON.parse(ret.data);
                            if(res.retCode==0){
                                that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
                                    RegisterDate: (res.data && res.data.ctime) || new Date().getTime()
                                })
                                res.data && res.data.ctime && that.$app.$def.setStorageFile(that, {
                                    key: 'createTime',
                                    value: res.data.ctime,
                                })
                                that.$app.isNewUser = !!res.data.isNewUser;                          // 是否新用户
                                that.userId=res.data.userId;
                                that.ctime=res.data.ctime;
                                headerJson.userId=res.data.userId;
                                headerJson.channelCode=res.data.channelCode||that.$app.$data.channelCode;
                                that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
                                    ChannelCode: headerJson.channelCode || ''
                                })
                                that.$app.sensors.login(headerJson.userId);
                                headerJson.readPref=res.data.sex.toString();
                                that.getUserNum = 0;
                                if(res.data.isBlack){
                                    headerJson.utdid = ''
                                }
                                let p1 = new Promise((resolve,reject)=>{
                                    that.$app.$def.setStorageFile(that,{
                                        key:'headerJson',
                                        value:headerJson,
                                        complete:function(){
                                            resolve();
                                        }
                                    })
                                })
                                that.$app.headerJson = headerJson
                                let p2 = new Promise((resolve,reject)=>{
                                    that.$app.$def.setStorageFile(that,{
                                        key:'userId',
                                        value:res.data.userId,
                                        complete:function(){
                                            resolve();
                                        }
                                    })
                                })	
                                let p3 = new Promise((resolve,reject)=>{ //储存用户创建时间
                                    let oDate = new Date();
                                    let oTime = oDate.getTime();
                                    that.$app.$def.setStorageFile(that,{
                                        key:'installationTime',
                                        value:oTime,
                                        complete:function(){
                                            resolve();
                                        }
                                    })
                                })	
                                Promise.all([p1,p2,p3]).then(()=>{
                                    that.getUserEndFn();
                                    let {source} = app.getInfo()
                                    that.$app.$def.quickappLog([703, {
                                        qmap:{
                                            is2101:1,
                                            getUserNum:that.getUserNum,
                                            sourceType: source.type
                                        }
                                    }, 'read_2101_success'], that)
                                })
                            }else{
                                // that.routeIndex('/Preference');
                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        retCode:res.retCode,
                                        getUserNum:that.getUserNum
                                    }
                                }, 'read_2101_retCode'], that)
                                that.getUserNum = that.getUserNum+1;
                            }
                        }else{
                            // that.routeIndex('/Preference');
                            that.$app.$def.quickappLog([703, {
                                qmap:{
                                    code:ret.code
                                }
                            }, 'read_2101_code'], that)
                            that.getUserNum = that.getUserNum+1;
                        }						
                    },
                    fail: function (data, code) {
                        that.getUserEndFn();
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                data:data,
                                code:code,
                                getUserNum:that.getUserNum,
                                source: 'fetch_2101data_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read'
                            }
                        }, 'catch_error'], that);
                        that.getUserNum = that.getUserNum+1;
                    }
                })
            },()=>{
            })
        },
        getUtdidTmp(){
            var sChar = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
            var aChar = sChar.split('');
            aChar.sort(function() {
                return (0.5-Math.random());
            })
            sChar = aChar.join('');
            var oDate = new Date();
            var r = this.rnd(0,sChar.length-5);
            var str = sChar.substr(r,5);
            var utdidTmp = "tmp_"+oDate.getTime()+str;
            return utdidTmp;        
        },
        rnd(n,m){
            return parseInt(Math.random()*(m-n+1))+n;
        },
        //注册新用户end

        clickreload(){
            let that = this;
            if(that.refreshPage){
                that.$app.$def.quickappLog([703, {
                    qmap:{
                        bid:that.bookId,
                        cid:that.chapterId,
                        sid:that.sid,
                        type:'click'
                    }
                }, 'weak_net'], that)
                router.replace({
                    uri:'/Read',
                    params:{
                        bookId:that.bookId,
                        chapterId:that.chapterId,
                        sid:that.sid,
                        apiFailNum:that.apiFailNum,
                        SourcePosition:that.SourcePosition,
                        omap:that.omap,
                        isUpdateOmap:that.isUpdateOmap,
                        fromPlace:that.fromPlace
                    }
                })
            }else{
                that.getBookNum = 999;
                that.fnLodeChapterInfo(that.bookId, that.chapterId);
                
                that.$app.$def.quickappLog([702, {
                    qmap:{
                        btn_click:1,
                        getBookNum:that.getBookNum
                    }
                }, 'read_reload_btn_click'], that);
            }
        },
        fnSetReadfile(chapterInfo){
            let that = this
            let readText = {}
            readText.userId = that.userId
            readText.chapterInfo = chapterInfo
            file.writeText({
                uri: `internal://files/books/b${that.bookId}/${chapterInfo.chapterId}.text`,
                text: JSON.stringify(readText),
                success: function() {
                    console.log(readText)
                    console.log('存文件成功')
                }
            })
        },
        fnGetReadfile(){
            let that = this
            return new Promise((resolve,reject)=>{
                file.readText({
                    uri: `internal://files/books/b${that.bookId}/${that.chapterId}.text`,
                    success: function(data) {
                        console.log('=================读文件成功===========')
                        resolve(data.text)
                    },
                    fail: function(data, code) {
                        reject(code)
                    }
                })
            })
        },
        fnSetDirectory(arr){
            let that = this
            file.readText({
                uri: `internal://files/books/b${that.bookId}/directory.text`,
                success: function(data) {
                   let directory = data && data.text ? JSON.parse(data.text) : {
                       directory: [],
                   }
                   let newFirectory = that.filterRepeat(directory.directory,arr,'cid')
                   console.log(newFirectory)
                   that.fnWriteDirectory(newFirectory)
                },
                fail: function(data, code) {
                    let directory = []
                    directory = directory.concat(arr)
                    console.log(directory)
                    that.fnWriteDirectory(directory)
                }
            })
        },
        distinct(a, b) {
            let arr = a.concat(b)
            let result = []
            let obj = {}
            for (let i of arr) {
                if (!obj[i]) {
                result.push(i)
                obj[i] = 1
                }
            }
            return result
            
        },
        filterRepeat(a,b,prop){
            let arr = a.concat(b)
            return arr.filter(function(element,index,self){
                return self.findIndex(el=>el[prop]==element[prop])===index
            })
        },
        fnWriteDirectory(directory){
            let that = this
            let newFirectory = {
                directory:directory,
                userId:that.userId
            }
            file.writeText({
                uri: `internal://files/books/b${that.bookId}/directory.text`,
                text: JSON.stringify(newFirectory),
                success: function() {
                    console.log('存目录成功')
                },
                fail: function(data, code) {
                    console.log(`handling fail, code = ${code}`)
                    that.$app.$def.quickappLog([703, {
                        qmap:{
                            source:"file_writeText_fail",
                            thisUri:that.$page.uri,
                            thisPage:"Read",
                            data,
                            code,
                        }
                    }, 'catch_error'], that)
                }
            })
        },
        fnGetDirectory(){
            let that = this
            return new Promise((resolve,reject)=>{
                file.readText({
                    uri: `internal://files/books/b${that.bookId}/directory.text`,
                    success: function(data) {
                        resolve(data)
                    },
                })
            })
        },
        fnGetfileList(url){
            let that = this;
            return new Promise((resolve,reject)=>{
                 file.list({
                     uri:url,
                     success: function(data) {
                         console.log('==========books=======')
                         console.log(data.fileList)
                         resolve(data.fileList)
                     },
                     fail: function(data, code) {
                         console.log(`handling fail, code = ${code}`)
                         that.$app.$def.quickappLog([703, {
                                qmap:{
                                    source:"file_list_fail",
                                    thisUri:that.$page.uri,
                                    thisPage:"Read",
                                    data,
                                    code,
                                }
                            }, 'catch_error'], that)
                     }
                 })
            })
        },
        fnDeleteFile(url){
            let that = this
            file.delete({
            uri: url,
            success: function(data) {
                console.log('删除文件成功',url)
            },
            fail: function(data, code) {
                console.log(`handling fail, code = ${code}`)
            }
            })
        },
        fnDeleteBookFile(url){
            let that = this
            that.fnGetfileList(url).then(res=>{
                res.forEach((cur,index)=>{
                    that.fnDeleteFile(cur.uri)
                })
            })
        },
        fnDeleteAllFile(){
            let that = this
            that.fnGetfileList(`internal://files/books/`).then(res=>{
                res.forEach((cur,index)=>{
                    that.fnGetfileList(cur.uri).then(res=>{
                        res.forEach((cur,index)=>{
                            that.fnDeleteFile(cur.uri)
                        })
                    })
                })
            })
        },
        getBottomShare(){
            let that = this
            that.$app.$def.requestData(that,
                {
                    url:'/Read',
                    interface: '/glory/fastapp/2142',
                    data: { taskType: '6', actionType: '11', bookId:that.bookId},
                    succ: function (res) {
                        if(res.data&&res.data!=''&&JSON.stringify(res.data)!='{}'){
                            if(res.data.shareVoList&&res.data.shareVoList.length){
                                that.obuttomShareVoList = res.data.shareVoList
                                // 屏蔽分享
                                that.isshareB = res.data.wxShare;
                                that.scallbackTime = res.data.callbackTime||5;
                                if(that.isshareB!=2){
                                    that.butShareshow = true;
                                    let flagF = 0
                                    let flagC = 0
                                    let curIsshare = that.isshareB
                                    that.obuttomShareVoList.forEach((item,idx)=>{
                                        if(item.shareType==1){
                                            if(curIsshare==1||curIsshare==3){
                                                flagF = 1
                                                that.isshareB=3
                                            }
                                        }
                                        if(item.shareType==2){
                                            if(curIsshare==1||curIsshare==4){
                                                flagC = 1
                                                that.isshareB=4
                                            }
                                        }
                                    })
                                    if(!flagF&&!flagC){
                                        that.isshareB=2
                                        that.butShareshow = false
                                    }else if(flagF&&flagC){
                                        if(curIsshare==1){
                                            that.isshareB=1
                                        }
                                    }
                                }
                            }
                        }
                    },
                    error: function (code) {
                        
                    }
                }
            )
        },
        getPopShare(){
            return new Promise((resolve,reject)=>{
                let that = this
                that.$app.$def.requestData(that,
                    {
                        url:'/Read',
                        interface: '/glory/fastapp/2142',
                        data: { taskType: '5', actionType: '10', bookId:that.bookId},
                        succ: function (res) {
                            resolve(res)
                        },
                        error: function (code) {
                            resolve(false)                            
                        }
                    }
                )
            })
        },
        fnRequestRec() {
            let that = this
            that.$app.$def.requestData(that, {
                url: '/Read',
                interface: '/glory/fastapp/2114',
                data: { bookId: that.bookId, type: '1', chapterId: that.chapterId, recoSize: that.isSupportNewReader ? 3 : 1 },
                succ: function (res) {
                    if (res.data && res.data.books && res.data.books.length) {
                        res.data.books.map(bookItem => bookItem.inBookshelf = !!bookItem.inBookshelf );  // 是否加入书架
                        that.dbRecommend = res.data
                        that.dbRecommend.isReady = true

                        let bookInfoObj = {
                            bookId: that.bookId,
                            chapterId: that.chapterId,
                            bookName: that.bookName,
                            chapterIndex: that.chapterIndex
                        }
                        that.dbRecommend = Object.assign( {}, that.dbRecommend, bookInfoObj )

                        that.$app.$def.quickappLog([703, {
                            qmap: {
                                site: '1',
                                cbookId: that.bookId,
                                cindex: that.chapterIndex
                            }
                        }, 'end_recommend_book'], that);
                        if(that.isRecDelayShow) {
                            that.isRecDelayShow = false
                            that.isShowRecommend = true
                            if(that.isShortCutShow) {
                                that.isShortCutShow = false
                                setTimeout(() => {
                                    that.isShortCutShow = true
                                }, 200)
                            }
                            that.canRec = false
                        }
                    }else{
                        that.dbRecommend = {}
                        that.dbRecommend.isReady = false
                    }

                },
                error: function (code) {
                }
            })
        },
        getIsCancle(){
            let that = this;
            return new Promise((resolve,reject)=>{
                storage.get({
                    key:'canclePrelad',
                    success:function(res){
                        console.log(res)
                        if(res==1){
                            reject()
                        }else{
                            resolve()
                        }
                    },
                    fail:function(data,code){
                        resolve()
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                site:'1',
                                source: 'storage_get_canclePrelad_fail',
                                thisUri: that.$page.uri,
                                thisPage: 'Read',
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                    }
                })
            })
        },
        toRecharge(){
            let that = this
            that.isToRecharge = true
            router.push({
                uri: '/Recharge',
                params: {
                    url: '/Read',
                    unit: that.rechargeObj.unit,
                    amount: that.rechargeObj.amount,
                    bookId: that.bookId,
                    chapterId: that.nowchapterId,
                    chapterIndex:that.chapterIndex,
                    pageFrom:that.pageFrom,
                    SourcePosition:that.SourcePosition,
                    omap:that.omap,
                    isUpdateOmap:that.isUpdateOmap,
                    bookName:that.bookName
                }
            })
        },
        toRechargeAuto(data){
            let that = this
            let auto = data.detail.auto
            console.log(auto)
            that.isToRecharge = true
            router.push({
                uri: '/Recharge',
                params: {
                    url: '/Read',
                    unit: that.orderObj.unit,
                    amount: that.orderObj.price,
                    bookId: that.bookId,
                    chapterId: that.nowchapterId,
                    chapterIndex:that.chapterIndex,
                    pageFrom:that.pageFrom,
                    auto:auto,
                    SourcePosition:that.SourcePosition,
                    omap:that.omap,
                    isUpdateOmap:that.isUpdateOmap,
                    bookName:that.bookName
                }
            })
        },
        getisAutopay(){
            let that = this
            if(!that.autoPay){
                storage.get({
                    key:'booksAutopay',
                    success:function(res){
                        if(res){
                            try{
                                that.autoPay=1
                                let arr = JSON.parse(res)
                                console.log(arr)
                                arr.forEach((cur,index)=>{
                                    if(cur.bId==that.bookId){
                                        that.autoPay=cur.autoPay
                                    }
                                })
                            }catch{
                                that.autoPay=1
                            }
                            
                        }else{
                            that.autoPay=1
                        }
                    },
                    fail(){
                        that.autoPay=1
                    }
                })
            }
        },
        hideNotice(){
            this.rechargeShow = false
        },
        closeOrderpop(data){
            let close = data.detail.close
            this.giveUpPopShow = false
            this.orderShow = false
            this.noContentJump(close)
        },
        getImei(){
            let that = this
            that.authShow = true
            let oGetAndroidId = new Promise((resolve,reject)=>{
                device.getUserId({
                    success: function(data) {
                        that.device.androidId = data.userId
                        resolve()
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                // id:data.userId,
                                site:'1'
                            }
                        }, 'getAndroidId'], that)
                        
                    },
                    fail: function(data, code) {
                        resolve()
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                code:code,
                                data:data,
                                site:'2'
                            }
                        }, 'getAndroidId'], that)
                        
                    }
                })
            })
            let getOaid = new Promise((resolve,reject)=>{
                try {
                    device.getOAID({
                        success: function(data) {
                            console.log(`handling success: ${data.oaid}`)
                            if(data.oaid){
                                that.device.oaid = data.oaid
                            }
                            resolve()
                        },
                        fail: function(data, code) {
                            console.log(`handling fail, code = ${code}`)
                            resolve()
                        }
                    })
                } catch (error) {
                    resolve()
                }
            })
            let oGetId = new Promise((resolve, reject) => {
                device.getId({
                    type: ['device', 'mac'],
                    success: function (res) {
                        that.device.ei = res.device;			
                        that.device.mac = res.mac;
                        storage.set({
                            key: 'imei',
                            value: res.device,
                        })
                        that.authShow = false
                        resolve(res);
                        //获取设备信息成功打点
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                page:'10',
                                site:'1',
                                bookId:that.bookId,
                                chapterId:that.chapterId,
                                sid:that.sid,
                                uuid:that.uuid
                            }
                        }, 'device_getid'], that)

                    },
                    fail: function (data, code) {
                        that.authShow = false
                        reject(data)
                        //获取设备信息失败打点
                        that.$app.$def.quickappLog([703, {
                            qmap:{
                                page:'10',
                                site:'2',
                                bookId:that.bookId,
                                chapterId:that.chapterId,
                                sid:that.sid,
                                uuid:that.uuid,
                                source:'device_getId_fail',
                                thisUri: that.$page.uri,
                                data,
                                code
                            }
                        }, 'catch_error'], that)
                    }
                })
            })
            Promise.all([oGetAndroidId,getOaid,oGetId]).then((result) => {
                let curHeader = that.$app.headerJson
                that.device.utdid = that.$app.$def.hex_md5(that.device.oaid||that.device.ei + that.device.mac);
                if(curHeader.utdidTmp&&curHeader.userId){
                    let data = {
                        utdid:that.device.utdid,
                        utdidTmp:curHeader.utdidTmp,
                        userId:curHeader.userId,
                        ei:that.device.oaid||that.device.ei,
                        bookId:that.bookId,
                        sid:that.sid,
                        blackList:1,
                        androidId:that.device.androidId||'',
                        uuid:that.$app.sourceInfo['uuid'],
                        pullMode:that.$app.sourceInfo['pullMode']
                    }
                    that.$app.$def.requestData(that,{
                        interface: `/glory/fastapp/2108`,
                        data: data,
                        succ: function (data) {
                            if(curHeader.userId != data.data.userId){
                                that.$app.$def.sLogout()
                                that.$app.sensors.identify(that.$app.headerJson.scDistinctId+'_older', true)
                                that.$app.sensors.login(data.data.userId);
                                that.$app.isNewUser = false
                            }
                            curHeader.utdid = that.device.utdid
                            curHeader.userId = data.data.userId
                            curHeader.channelCode = (data.data && data.data.channelCode) || curHeader.channelCode
                            that.$app.shenceLog && that.$app.shenceLog.fnSetCommonArgs({
                                RegisterDate: (data.data && data.data.ctime) || new Date().getTime(),
                                ChannelCode: (data.data && data.data.channelCode) || curHeader.channelCode
                            })
                            data.data && data.data.ctime && that.$app.$def.setStorageFile(that, {
                                key: 'createTime',
                                value: data.data.ctime,
                            })
                            if(data.data.isBlack){
                                curHeader.utdid = ''
                            }
                            setTimeout(function(){
                                that.$app.$def.setStorageFile(that,{
                                    key:'headerJson',
                                    value:curHeader,
                                    success:function(){
                                        that.$app.$def.appSourceinfoLog(that)
                                    }
                                })
                                that.$app.headerJson = curHeader
                                //重新获取配置
                                that.getServerUtil();
                            },150)

                        },
                        error:function(){
                            that.$app.$def.appSourceinfoLog(that)
                        }
                    })
                }else{
                    that.$app.$def.appSourceinfoLog(that)
                }
                that.afterAuthShortcut()
            },()=>{
                that.$app.$def.appSourceinfoLog(that)
                that.$app.$def.quickappLog([703, {
                    qmap:{
                        source:'oGetInfo_fail',
                        thisUri:that.$page.uri
                    }
                }, 'catch_error'], that)
                that.afterAuthShortcut()
            })
        },
        afterAuthShortcut(){
            let that = this
            that.hasAuthed = true
            if(that.authShortcut){
                that.isAuthShortcutShow = true
                that.hasAuthed = false
                shortcut.hasInstalled({
                    success: function (ret) {
                        if (!ret) {
                            if(that.cutSupport && (that.cutSupport.vivoSupport || that.cutSupport.oppoSupport || that.cutSupport.huaweiSupport) && that.authShortcutInfo.btnTip) {
                                that.isAuthShortcutPopShow = true
                                that.$app.shenceLog.log(that, 'track', 'PopupExposure', {
									PositionName: '加桌引导-阅读页-提前一键加桌',
                                    BookID: that.bookId,
                                    BookName: that.bookName,
                                    ChaptersNum: that.chapterIndex
								});
                            } else {
                                shortcut.install({
                                    message: that.authTips?that.authTips:`添加【${that.appName}APP】到手机桌面继续阅读`,
                                    success: function () {
                                        that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                            IsSuccess: true,
                                            PositionName: '阅读页阅读授权后添桌',
                                            ChaptersNum: that.chapterIndex,
                                            Instruction: that.authTips ? that.authTips : `添加【${that.appName}APP】到手机桌面继续阅读`,
                                            StateCode: 'return'
                                        });
                                        //来源写入变量
                                        that.$app.dataJson = Object.assign({}, {infotype:'shortcut'});
                                        prompt.showToast({
                                            message: '成功创建桌面图标'
                                        });
                                        that.$app.$def.quickappLog([703, {
                                            qmap:{
                                                site: '2',
                                                page: '3',
                                                sorce:'afterauth_shortcut'
                                            }
                                        }, 'shortcut'], that)
                                        that.$app.$def.requestData(that,{
                                            interface: `/glory/fastapp/2107`,
                                            data: {
                                                isas:1
                                            },
                                            succ: function (data) {
                                            },
                                            error: function (code) {
                                            }
                                        })
                                        that.hasAuthShortcut = true
                                        that.hasShowSuccess = true
                                        that.fnTellServer(1);
                                    },
                                    fail: function (data, code) {
                                        that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                            IsSuccess: false,
                                            PositionName: '阅读页阅读授权后添桌',
                                            ChaptersNum: that.chapterIndex,
                                            Instruction: that.authTips ? that.authTips : `添加【${that.appName}APP】到手机桌面继续阅读`,
                                            StateCode: 'return',
                                            MsgSendCode: code,
                                            MsgSendContent: data,
                                        });
                                        that.$app.$def.quickappLog([703, {
                                            qmap:{
                                                site: '3',
                                                page: '3',
                                                data,
                                                code,
                                                sorce:'afterauth_shortcut',
                                            }
                                        }, 'shortcut'], that)
                                    },
                                    complete(errmsg){
                                        that.$app.$def.quickappLog([703, {
                                            qmap:{
                                                site: '5',
                                                page: '3',
                                                errmsg:`${errmsg}`,
                                                sorce:'afterauth_shortcut'
                                            }
                                        }, 'shortcut'], that)
                                        that.isAuthShortcutShow = false
                                    }
                                })
                                that.$app.shenceLog.log(that, 'track', 'SaveToDesktop', {
                                    PositionName: '阅读页阅读授权后添桌',
                                    ChaptersNum: that.chapterIndex,
                                    Instruction: that.authTips ? that.authTips : `添加【${that.appName}APP】到手机桌面继续阅读`,
                                    StateCode: 'submit',
                                    DesktopState: that.$app.isAddDesktop ? 'Deleted' : 'Neversaved'
                                });
                                that.$app.$def.quickappLog([703, {
                                    qmap:{
                                        site: '1',
                                        page: '3',
                                        sorce:'afterauth_shortcut'
                                    }
                                }, 'shortcut'], that)
                            }
                        }else{
                            that.isAuthShortcutShow = false
                        }
                    }
                }) 
            }
        },
        getAudio(ischangeset) {
            let that = this;
            // 当前为重试次数大于1次退出请求
            if(that.agingNum > 1) {
                return;
            }
            that.ischangeset = ischangeset
            that.isRequestTts = true
            const url = 'https://tsn.baidu.com/text2audio'
            const reqTime = new Date().getTime()
            const str = that.partArr[that.curPartIndex].readStr ? that.partArr[that.curPartIndex].readStr.replace(/\s*$/, '。') : '。'
            fetch.fetch({
                method: "GET",
                url: url + `?cuid=${that.$app.headerJson.userId}&tok=${that.ttsToken}&per=${that.$app.listenJson.timbre}&spd=${that.$app.listenJson.speed}&tex=${encodeURIComponent(encodeURIComponent(str))}&lan=zh&ctp=1&aue=3`,
                success: function (ret) {
                    console.log('请求TTS成功')
                    console.log(ret)
                    //如果听书过程中翻章或者重新播放，需要把之前正在加载的内容return
                    if(reqTime < that.reqReturnTime) {
                        return false
                    }
                    that.isRequestTts = false
                    that.isPrePlaying = true
                    if(ischangeset) {
                        that.ischangeset = false
                        that.hasJumpChapter = false
                    }
                    if(ret.code == 200) {
                        let isJson = false
                        if(ret.data) {
                            isJson = that.fnIsJson(ret.data)
                        }
                        if(isJson) {
                            that.fnRequestTtsError('加载语音失败，请稍后重试')
                            that.$app.$def.kyyerrorlog([703, {
                                qmap: {
                                    site: '16',
                                    ret: ret.data
                                }
                            }, 'listen_book'], that)
                        } else if (ret.data != undefined) {
                            if(!that.hasJumpChapter) {
                                that.agingNum = 0;
                                that.audioArr[that.curPartIndex] = ret.data
                                if(that.audioArr.length - that.hasListenNum <= that.ttsPreloadNum) {
                                    if(!that.isPlaying && that.isListen) {
                                        console.log('设置src')
                                        audio.src = ret.data
                                        //播放
                                        that.audioPlay()
                                        //高亮
                                        that.highLight()
                                        //单段播放完成
                                        audio.onended = function() {
                                            that.playNext()
                                            console.log('播放完成')
                                        }
                                        //单段播放失败
                                        audio.onerror = function(e) {
                                            that.playNext()
                                            that.$app.$def.quickappLog([703, {
                                                qmap: {
                                                    site: '4',
                                                    e: e,
                                                    src: audio.src,
                                                    pos: '1'
                                                }
                                            }, 'requestTTS'], that)
                                            console.log('播放失败')
                                        }
                                    }
                                    if(that.curPartIndex < that.partArr.length - 1 && that.isListen) {
                                        if(that.partArr[that.curPartIndex + 1]) {
                                            that.curPartIndex++
                                            that.getAudio(0)
                                        }
                                    }
                                }
                            }
                        } else {
                            that.fnRequestTtsError('加载语音失败，请稍后重试')
                            that.$app.$def.kyyerrorlog([703, {
                                qmap: {
                                    site: '14',
                                    ret: ret,
                                }
                            }, 'listen_book'], that)
                       }
                    } else {
                        that.fnRequestTtsError('加载语音失败，请稍后重试')
                        that.$app.$def.kyyerrorlog([703, {
                            qmap: {
                                site: '13',
                                ret: ret,
                            }
                        }, 'listen_book'], that)
                    }
                    that.isPrePlaying = false
                },
                fail: function (data, code) {
                    that.isRequestTts = false
                    if(ischangeset) {
                        that.ischangeset = false
                    }
                    if(reqTime < that.reqReturnTime) {
                        return false
                    }
                    if(!that.isPlaying && that.isListen) {
                        that.isListen = false
                        that.isGoOn = false
                        prompt.showToast({
                            message: '网络异常，请检查你的网络状态'
                        })
                        network.unsubscribe()
                    }
                }
            })
        },
        fnIsJson(str) {
            if (typeof str === 'string') {
                try {
                    const obj = JSON.parse(str);
                    if(typeof obj === 'object') {
                        return true;
                    }
                    return false;
                } catch(e) {
                    return false;
                }
            }
            return false;
        },
        divideChapter() {
            let that = this
            let length = 0
            let readStr = ''
            that.partArr = []
            that.chapterContent.forEach((currentValue,index) => {
                length+=currentValue.length
                if(length<=(that.partArr.length>=1?120:100)){
                    readStr+=currentValue
                    if(index==that.chapterContent.length-1){
                        let part={}
                        part.readStr=readStr
                        part.index=index+1
                        that.partArr.push(part)
                    }
                }else{
                    if(readStr !== ''){
                        let part={}
                        part.readStr=readStr
                        part.index=index
                        that.partArr.push(part)
                        length = 0
                        readStr = ''
                    }else{
                        length = 0
                    }
                    if(currentValue.length>(that.partArr.length>=1?120:100)){
                        let num = Math.ceil(currentValue.length/(that.partArr.length>=1?120:100))
                        let size = that.partArr.length>=1?120:100
                        for (let i = 0; i < num; i++) {
                            let part={}
                            part.readStr=currentValue.slice(size*i,size*(i+1))
                            if(i==num-1){
                                part.index=index+1
                            }else{
                                part.index=index
                            }
                            that.partArr.push(part)
                        }
                    }else{
                        if(index==that.chapterContent.length-1){
                            let part={}
                            part.readStr=currentValue
                            part.index=index
                            that.partArr.push(part)
                        }else{
                            length+=currentValue.length
                            readStr+=currentValue
                        }
                    }
                }
            })
            that.partArr[0].readStr = that.chapterName += that.partArr[0].readStr
            that.curPartIndex = 0
            that.reqReturnTime = new Date().getTime()
            that.agingNum = 0
            that.getAudio(1)
            that.hasPlayed=true
        },
        startListen(){
            let that = this
            that.isListen = true
            that.hasClickStop = false
            if(that.isRequestingExit){
                that.isRequestingExit = false
                if(!(that.isRequestTts||that.ischangeset)){
                    if(that.audioArr[that.hasListenNum]){
                        audio.src=that.audioArr[that.hasListenNum]
                        that.audioPlay()
                        that.highLight()
                        //单段播放完成
                        audio.onended=function(){
                            that.playNext()
                            console.log('播放完成')
                        }
                        //单段播放失败
                        audio.onerror=function(e){
                            that.playNext()
                            that.$app.$def.quickappLog([703, {
                                qmap:{
                                    site: '4',
                                    e:e,
                                    src:audio.src,
                                    pos: '2'
                                }
                            }, 'requestTTS'], that)
                            console.log('播放失败')
                        }
                        if(that.curPartIndex<that.partArr.length-1&&that.isListen){
                            if(that.partArr[that.curPartIndex+1]){
                                that.curPartIndex++
                                that.getAudio(0)
                            }
                        }
                    }else{
                        that.playNext()
                    }
                }
            }else{
                if(that.hasPlayed){
                    if(that.isGoOn){
                        that.audioPlay()
                    }else{
                        that.rePlayAudio()
                        that.isGoOn = true
                    }
                }else{
                    that.divideChapter()
                }
            }
            network.subscribe({
                callback: function (data) {
                    if (data.type !== 'wifi' && data.type!== 'none') {
                        prompt.showToast({
                            message: '当前处在非WiFi环境，注意流量消耗哦！',
                            duration: 1
                        })
                    }
                }
            })
        },
        highLight(){
            let that = this
            //高亮
            if(that.partArr[that.hasListenNum-1]){
                that.minIndex=that.partArr[that.hasListenNum-1].index
            }else{
                that.minIndex=0
            }
            if(that.partArr[that.hasListenNum]){
                that.maxIndex=that.partArr[that.hasListenNum].index
            }else{
                that.maxIndex=-1
            }
            console.log(that.minIndex,that.maxIndex)
            //高亮
        },
        audioPlay(){
            let that = this
            if(!that.hasToTimbre){
                audio.play()
            }
            that.isPlaying = true
            that.isListen = true
            if(that.partArr[that.hasListenNum-1]){
                that.$element('readList') && that.$element('readList').scrollTo({ index: that.partArr[that.hasListenNum-1].index + 2})
            }else{
                that.$element('readList') && that.$element('readList').scrollTo({ index: 0})
            }
        },
        rePlayAudio(){
            let that = this
            that.agingNum = 0
            that.reqReturnTime = new Date().getTime()
            audio.pause()
            that.isPlaying = false
            that.curPartIndex = that.hasListenNum
            that.audioArr= that.audioArr.slice(0,that.hasListenNum)
            that.getAudio(1)
        },
        exitListen(){
            if(this.isListen){
                audio.stop()
                this.isPlaying = false
                this.isListen = false
                this.hasClickStop = true
                prompt.showToast({
                    message: '你已退出语音朗读模式'
                });
                this.fnCloseListenTimeout()
                network.unsubscribe()
                console.log('你已退出语音朗读模式')
            }
        },
        pauseAudio() {
            audio.pause()
            network.unsubscribe()
        },
        getAudioSet() {
            let that = this
            storage.get({
                key: 'listenSetting',
                success: function(res) {
                    if(res) {
                        try {
                            that.$app.listenJson = JSON.parse(res)
                            that.curTimbre = that.$app.listenJson.timbre
                        } catch(err) {
                            console.log(err)
                        }
                    }
                }
            })
        },
        moreTimbre() {
            this.curTimbre = this.$app.listenJson.timbre
            this.hasToTimbre = true
            this.pauseAudio()
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                Title: '阅读页',
                ButtonName: '更多听书音色',
                BookID: this.bookId || ''
            });
            router.push({
                uri: '/MoreTimbre',
                params: {
                    timbres: this.timbreList,
                    bookId: this.bookId || ''
                }
            })
        },
        fnCloseListenTimeout() {
            this.listenTime = 0
            if(this.coloseTimeout) {
                clearTimeout(this.coloseTimeout)
            }
        },
        fnStartListenTimeout(evt) {
            if(evt && evt.detail && evt.detail.num) {
                let num = evt.detail.num
                this.listenTime = num
                prompt.showToast({
                    message: `${num}分钟后退出语音朗读模式`
                })
                this.coloseTimeout = setTimeout(() => {
                    this.exitListen()
                }, 1000 * 60 * num)
            }
        },
        stopListen() {
            let that = this
            if(that.isListen) {
                // audio.stop()
                audio.pause()
                that.isListen = false
                that.isPlaying = false
                that.hasPlayed = false
                that.hasListenNum = 0
                that.audioArr = []
                that.minIndex = 0
                that.maxIndex = -1
                network.unsubscribe()
            }
        },
        fnRequestTtsError(message) {
            let that = this;
            that.agingNum = that.agingNum + 1;

            if(!that.isPlaying && that.isListen) {
                that.isListen = false
                that.isGoOn = false
                prompt.showToast({
                    message: message
                })
                network.unsubscribe()
            } else if (that.isPlaying && that.isListen) {
                //重新请求当前段
                that.getAudio(0)
            }
        },
        getDuration(my_time) {
            var days = my_time / 1000 / 60 / 60 / 24;
            var daysRound = Math.floor(days);
            return daysRound;
        },
        playNext(){
            let that = this
            if(!that.listenSwitch && that.extraListenSwitch) {
                let currentTime = new Date().getTime()
                if(currentTime > that.extraListenTime) {
                    that.exitListen()
                    that.extraListenSwitch = false
                    that.listenTask.isExpired = true
                    that.bShowDashboard = false
                    that.showListenPop = true
                    return
                }
            }
            that.isPlaying = false
            if(that.audioArr[that.hasListenNum-1]&&that.delVbc){
                that.fnDeleteFile(that.audioArr[that.hasListenNum-1])
            }
            //听书过程中翻章，如果碰巧点击下一章时本段读完，需要return
            if(that.hasJumpChapter){
                return
            }
            that.hasListenNum++
            if(that.hasListenNum==that.partArr.length){
                if(that.delVbc){
                    that.fnDeleteFile(that.audioArr[that.hasListenNum-1])
                }
                //下一章
                that.hasPlayed=false
                that.hasListenNum = 0
                that.audioArr = []
                that.minIndex=0
                that.maxIndex=-1
                that.fnNextChapter('','')
            }else{
                if(that.audioArr.length>that.hasListenNum){
                    if(that.audioArr[that.hasListenNum]){
                        audio.src=that.audioArr[that.hasListenNum]
                         if(!that.hasClickStop){
                            that.audioPlay()
                        }
                    }else{
                        that.playNext()
                    }
                    //高亮
                    that.highLight()
                }else{
                    if(!that.isRequestTts) {
                        that.rePlayAudio()
                        that.isGoOn = true
                    }
                }
                if(that.audioArr.length-that.hasListenNum>0&&that.audioArr.length-that.hasListenNum<that.ttsPreloadNum&&!that.isRequestTts&&!that.isPrePlaying){
                    if(that.partArr[that.curPartIndex]&&that.audioArr.length<that.partArr.length){
                        that.getAudio(0)
                    }
                }else if(that.audioArr.length-that.hasListenNum==that.ttsPreloadNum&&!that.isRequestTts){
                    if(that.partArr[that.curPartIndex+1]){
                        that.curPartIndex++
                        that.getAudio(0)
                    }
                }
            }
        },
        shareStatus(status){
            let that = this
            that.$app.$def.requestData(that,
                {
                    interface: '/glory/fastapp/2407',
                    data: { status: status},
                    succ: function (res) {
                        console.log(res)
                    }
                }
            )
        },
        vagueClick(){
            console.log('为了解决部分机型滑动穿透的问题')
        },
        closeshortpop(){
            this.isShortpop = false
            if(this.shortType=='3'){
                this.pageBackPress()
            }else{
                this.fnVivoPush('shortcut')
            }
        },
        showShortSuccess(){
            if(!this.hasShowSuccess){
                this.shortType = '1'
                this.isShortpop = true
                this.hasShowSuccess = true
            }
        },
        fngetbtnText(){
            let that = this
            if(that.irtt&&that.irtt.length){
                if(that.chapterIndex<=that.irtt[0].chapterId){
                    that.btnText = that.irtt[0].tip||'保存本书到手机，方便下次阅读'
                    that.shortbtnType = that.irtt[0].style?that.irtt[0].style:0
                    that.btnSysText = that.irtt[0].systemInText
                }else if(that.irtt[0].chapterId<that.chapterIndex&&that.chapterIndex<=that.irtt[1].chapterId){
                    that.btnText = that.irtt[1].tip||'保存本书到手机，方便下次阅读'
                    that.shortbtnType = that.irtt[1].style?that.irtt[2].style:0
                    that.btnSysText = that.irtt[1].systemInText
                }else if(that.irtt[1].chapterId<that.chapterIndex&&that.chapterIndex<=that.irtt[2].chapterId){
                    that.btnText = that.irtt[2].tip||'保存本书到手机，方便下次阅读'
                    that.shortbtnType = that.irtt[2].style?that.irtt[2].style:0
                    that.btnSysText = that.irtt[2].systemInText
                }else{
                    that.btnText = that.irtt[2].tip||'保存本书到手机，方便下次阅读'
                    that.shortbtnType = that.irtt[2].style?that.irtt[2].style:0
                    that.btnSysText = that.irtt[2].systemInText
                }
            }else{
				that.btnText='保存本书到手机，方便下次阅读'
            }
        },
        fngetonebtnText(){
            let that = this
            if(that.rpbt&&that.rpbt.length){
                if(that.chapterIndex<=that.rpbt[0].chapterId){
                    that.onekeyBtnText = that.rpbt[0].tip
                    that.onekeyDestext = that.rpbt[0].descTip?that.rpbt[0].descTip:''
                }else if(that.rpbt[0].chapterId<that.chapterIndex&&that.chapterIndex<=that.rpbt[1].chapterId){
                    that.onekeyBtnText = that.rpbt[1].tip
                    that.onekeyDestext = that.rpbt[1].descTip?that.rpbt[1].descTip:''
                }else if(that.rpbt[1].chapterId<that.chapterIndex&&that.chapterIndex<=that.rpbt[2].chapterId){
                    that.onekeyBtnText = that.rpbt[2].tip
                     that.onekeyDestext = that.rpbt[2].descTip?that.rpbt[2].descTip:''
                }else{
                    that.onekeyBtnText = that.rpbt[2].tip
                     that.onekeyDestext = that.rpbt[2].descTip?that.rpbt[2].descTip:''
                }
            }
        },
        fnGetNextCut(){
            let that = this
            if(that.nrtt&&that.nrtt.length){
                console.log(that.chapterIndex)
                if(that.nrtt[0].chapterId<=that.chapterIndex&&that.chapterIndex<that.nrtt[1].chapterId){
                    that.nextShortText = that.nrtt[0].tip
                    that.nextShortType = that.nrtt[0].style
                    that.nextShortSign = that.nrtt[0].sign
                }else if(that.nrtt[1].chapterId<=that.chapterIndex&&that.chapterIndex<that.nrtt[2].chapterId){
                    that.nextShortText = that.nrtt[1].tip
                    that.nextShortType = that.nrtt[1].style
                    that.nextShortSign = that.nrtt[1].sign
                }else if(that.nrtt[2].chapterId<=that.chapterIndex){
                    that.nextShortText = that.nrtt[2].tip
                    that.nextShortType = that.nrtt[2].style
                    that.nextShortSign = that.nrtt[2].sign
                }
            }
        },
        fnTellServer(taskAction) {
            let that = this;
            that.$app.$def.requestData(that,
                {
                    interface: '/glory/fastapp/2146',
                    data: { action: taskAction },
                    succ: function (res) {
                    }
                }
            )
        },
        selectTextLine(flag = false) {
            let that = this
            if(that.textLinkList && that.textLinkList.length > 0) {
                let hasChecked = false
                if(flag) {
                   if(that.textLinkList[0].startChapterId <= that.chapterIndex && that.textLinkList[0].endChapterId >= that.chapterIndex) {
                        that.textLinkIndex = 0
                        hasChecked = true
                    }
                }
                for(let i = that.textLinkIndex + 1; i < that.textLinkList.length; i++) {
                    if(hasChecked) {
                       break; 
                    }
                    if(that.textLinkList[i].startChapterId <= that.chapterIndex && that.textLinkList[i].endChapterId >= that.chapterIndex) {
                        that.textLinkIndex = i
                        hasChecked = true
                        break;
                    }
                }
                for(let i = 0; i <= that.textLinkIndex; i++) {
                    if(hasChecked) {
                       break; 
                    }
                    if(that.textLinkList[i].startChapterId <= that.chapterIndex && that.textLinkList[i].endChapterId >= that.chapterIndex) {
                        that.textLinkIndex = i
                        hasChecked = true
                        break;
                    }    
                }
                that.textLink = JSON.stringify(that.textLinkList[that.textLinkIndex]) == '{}' ? null : that.textLinkList[that.textLinkIndex]
                that.textLinkOperationName = that.textLinkList[that.textLinkIndex] && that.textLinkList[that.textLinkIndex].operationName ? that.textLinkList[that.textLinkIndex].operationName : ''
                that.textLinkUserTacticsVo = that.textLinkList[that.textLinkIndex] && that.textLinkList[that.textLinkIndex].userTacticsVo ? that.textLinkList[that.textLinkIndex].userTacticsVo : {}
                that.computeTextLink()
            }
        },
        computeTextLink(){
            this.textLinkShouldShow = this.textLink && this.textLinkIndex >= 0 && this.textLink.startChapterId <= this.chapterIndex && this.textLink.endChapterId >= this.chapterIndex
        },
        // 阅读页挂件展示-章节区间判断
        fnHangingHolder(){
            let that = this
            if(that.readPageWidget.startChapterId != undefined && that.readPageWidget.endChapterId != undefined){
                that.hangingHolderShow = (that.chapterIndex >= that.readPageWidget.startChapterId && that.readPageWidget.endChapterId >= that.chapterIndex) && that.$app.readHangingHolderClose
            }else{
                that.hangingHolderShow = false
            }
            // 神策打点-运营位曝光
            if(that.hangingHolderShenceOn && that.hangingHolderShow){
                that.hangingHolderShenceOn = false;
                if(that.hanggingHolderUserTacticsVo.isDot == '1'){
                    let OperationDta = {
                        ActID: that.readPageWidget.jumpUrl?that.readPageWidget.jumpUrl.split('id=')[1]?that.readPageWidget.jumpUrl.split('id=')[1]:'':'',
                        ActURL: that.readPageWidget.jumpUrl || '',
                        ChaptersNum: that.chapterIndex || '',
                        EndTime: new Date().getTime(),
                        RBookID: that.bookId || '',
                        OperationID: 17,
                        OperationName: that.hanggingHolderOperationName,
                        OperationPosition: '阅读页悬浮挂件',
                        OperationType: that.readPageWidget.jumpType == undefined ? '' : that.readPageWidget.jumpType,
                        PicURL: that.readPageWidget.iconUrl || '',
                        ShuntId:that.hanggingHolderUserTacticsVo.shuntID||'',
                        ShuntName:that.hanggingHolderUserTacticsVo.shuntName||'',
                        StartTime: new Date().getTime(),
                        SourceId:that.hanggingHolderUserTacticsVo.sourceId||'',
                        SourceName:that.hanggingHolderUserTacticsVo.sourceName||'',
                        TacticsId:that.hanggingHolderUserTacticsVo.tacticsId||'',
                        TacticsName:that.hanggingHolderUserTacticsVo.tacticsName||'',
                        ChaptersID: that.chapterId,
                    }
                    that.$app.shenceLog.log(that,'track','OperationExposure',OperationDta);
                }
            }
        },
        fnCloseAward(){
            this.shortAwrad = false
        },
        fnBrandVideoShow() {
            this.isVideoPlay = true
            this.stopListen()
        },
        fnVideoShow(evt) {
            if(evt.detail.adAlias == 'readVideo') {
                this.hasReadVideoShow = true
                clearTimeout(this.readVideoTimeout)
                this.readVideoLoading = false
                this.isReadVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
            if(evt.detail.adAlias == 'insertVideo') {
                this.isInsertVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
            if(evt.detail.adAlias === 'readAwardVideo') {
                this.isAwardVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
            if(evt.detail.adAlias === 'preVideo') {
                this.isPreVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
            if(evt.detail.adAlias === 'preNextVideo') {
                this.isPreNextVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
            if(evt.detail.adAlias === 'listenVideo') {
                this.isListenVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
            if(evt.detail.adAlias == 'aliPayRedVideo') {
                this.aliPayRedVideoInfo.isAliPayRedVideoShow = true
                this.isVideoPlay = true
                this.stopListen()
            }
        },
        fnVideoClose(evt) {
            if(evt.detail.adAlias === 'readVideo') {
                this.isReadVideoShow = false
                if(evt.detail.back == 'true') {
                    router.replace({
                        uri: '/Index',
                        params: {
                            pageFrom: 'read'
                        }
                    })
                }
            }
            if(evt.detail.adAlias == 'insertVideo') {
                this.isInsertVideoShow = false
            }
            if(evt.detail.adAlias === 'readAwardVideo') {
                this.isAwardVideoShow = false
            }
            if(evt.detail.adAlias === 'preVideo') {
                this.isPreVideoShow = false
            }
            if(evt.detail.adAlias === 'preNextVideo') {
                this.isPreNextVideoShow = false
            }
            if(evt.detail.adAlias === 'listenVideo') {
                this.isListenVideoShow = false
            }
            if(evt.detail.adAlias == 'aliPayRedVideo') {
                this.aliPayRedVideoInfo.isAliPayRedVideoShow = false
            }
        },
        fnVideoAdShow(evt) {
            if(evt.detail.adAlias === 'readVideo') {
                this.isReadAdShow = true
            }
            if(evt.detail.adAlias == 'insertVideo') {
                this.isInsertAdShow = true
            }
            if(evt.detail.adAlias === 'readAwardVideo') {
                this.isAwardAdShow = true
            }
            if(evt.detail.adAlias === 'preVideo') {
                this.isPreAdShow = true
            }
            if(evt.detail.adAlias === 'preNextVideo') {
                this.isPreNextAdShow = true
            }            
            if(evt.detail.adAlias === 'listenVideo') {
                this.isListenAdShow = true
            }
            if(evt.detail.adAlias == 'aliPayRedVideo') {
                this.aliPayRedVideoInfo.isAliPayRedAdShow = true
            }
        },
        fnVideoAdClose(evt) {
            if(evt.detail.adAlias === 'readVideo') {
                this.isReadAdShow = false
                this.fnVideoEnd(evt)
            }
            if(evt.detail.adAlias == 'insertVideo') {
                this.isInsertAdShow = false
                this.fnVideoEnd(evt)
            }
            if(evt.detail.adAlias === 'readAwardVideo') {
                this.isAwardAdShow = false
                this.fnVideoEnd(evt)
            }
            if(evt.detail.adAlias === 'preVideo') {
                this.isPreAdShow = false
                this.fnVideoEnd(evt)
            }
            if(evt.detail.adAlias === 'preNextVideo') {
                this.isPreNextAdShow = false
                this.fnVideoEnd(evt)
            }
            if(evt.detail.adAlias === 'listenVideo') {
                this.isListenAdShow = false
                this.fnVideoEnd(evt)
            }
            if(evt.detail.adAlias == 'aliPayRedVideo') {
                this.aliPayRedVideoInfo.isAliPayRedAdShow = false
                this.fnVideoEnd(evt)
            }
        },
        fnVideoEnd(evt) {
            if(evt.detail.adAlias == 'insertVideo' && evt.detail.isEnded == 'true') {
                this.canInsertVideoShow = false
                this.fnInsertVideoAward()
                return
            }
            if (evt.detail.adAlias === 'readAwardVideo' && evt.detail.isEnded == 'true') {
                this.readRewardPopShow = false
                this.fnTaskVideoAward()
                return
            }
            if(evt.detail.adAlias === 'preVideo' && evt.detail.isEnded == 'true') {
                this.isPreVideoPackageShow = false
                this.canPreVideoShow = false
                this.fnPreVideoAward()
                return
            }
            if(evt.detail.adAlias === 'preNextVideo' && evt.detail.isEnded == 'true') {
                this.fnPreNextVideoAward()
                return
            }
            if(evt.detail.adAlias === 'listenVideo' && evt.detail.isEnded == 'true') {
                this.fnListeTaskAward('video')
                return
            }
            if(evt.detail.adAlias === 'aliPayRedVideo' && evt.detail.isEnded == 'true') {
                this.fnTaskCompleteHandle(evt);
                return
            }
            if(evt.detail.adAlias == 'readVideo') {
                router.replace({
                    uri: '/Index',
                    params: {
                        pageFrom: 'read'
                    }
                })
            }
        },
        fnVideoLoad() {
            let that = this
            that.hasReadVideoShow = true
            clearTimeout(that.readVideoTimeout)
            that.readVideoLoading = false
        },
        fnCloseOpenScreen() {
            this.isOpenScreenShow = false
            if(this.isNeedImeiAuth) {
                this.isNeedImeiAuth = false
                this.fnImeiAuth()
            }
        },
        fnOpenScreenBack() {
            this.openScreenCanBack = true
        },
        fnNeedDoubleOpenAd() {
            this.needDoubleOpenAdShow = true
        },
        fnShowDoubleOpenAd() {
            this.needDoubleOpenAdShow = false
        },
        fnChangeWebShow() {
            this.isWebShow = !this.isWebShow
            if(this.isWebShow) {
                this.isAppShow = false
            }
        },
        fnChangeAppShow() {
            this.isAppShow = !this.isAppShow
            if(this.isAppShow) {
                this.isWebShow = false
            }
        },
        fnStartCount() {
            this.isAdPopShow = false
        },
        fnStopCount(evt) {
            let that = this
            if(evt && evt.detail && (evt.detail.adType == 'message' || evt.detail.adType == 'pre' || evt.detail.adType == 'insert')) {
                if(evt.detail.type == 'download') {
                    that.isDownloadShow = true
                }
                if(evt.detail.type == 'click') {
                    that.isClickShow = true
                }
                that.currentAdInfo = evt.detail.adInfo
            }
            that.isAdPopShow = true
        },
        fnCancleClick() {
            this.isAdPopShow = false
            this.isClickShow = false
            this.$broadcast('closeExtra')
        },
        fnConfirmClick() {
            let that = this
            that.isAdPopShow = false
            that.isClickShow = false
            that.$broadcast('closeExtra')
            if(that.currentAdInfo && that.currentAdInfo.adAlias && that.currentAdInfo.randomTime) {
                that.$broadcast('confirmClick', {
                    adAlias: that.currentAdInfo.adAlias,
                    randomTime: that.currentAdInfo.randomTime
                })
            }
        },
        fnCancleDownload() {
            this.isAdPopShow = false
            this.isDownloadShow = false
            this.$broadcast('closeExtra')
        },
        fnConfirmDownload() {
            let that = this
            that.isAdPopShow = false
            that.isDownloadShow = false
            that.$broadcast('closeExtra')
            if(that.currentAdInfo && that.currentAdInfo.adAlias && that.currentAdInfo.randomTime) {
                that.$broadcast('confirmDownload', {
                    adAlias: that.currentAdInfo.adAlias,
                    randomTime: that.currentAdInfo.randomTime
                })
            }
        },
        fnOtherClick() {
            // 无用点击
        },
        // vivopush消息
        fnVivoPush(tag) {
            let that = this
            if(tag == 'shortcut' && that.isSupportVivoPush) {
                that.$app.$def.fnVivoPush(that, '2')
            }
            if(tag == 'readEnd' && that.isSupportVivoPush) {
                that.$app.$def.fnVivoPush(that, '8')
            }
        },
        // 判断是否进行广告墙预加载或者进入广告墙
        fnSetAdWall() {
            let that = this
            if(that.hasGetSetting && that.hasLoadChapter && !that.isNoAd) {
                if(that.isFirstAdWall && that.prePage != 'Directory') {
                    that.isFirstAdWall = false
                    return
                } else {
                    that.isFirstAdWall = false
                }
                let params = that.adWallParams
                // let nowTime = new Date().getTime()
                // 满足策略时间
                // if((params.beginTime && (nowTime < params.beginTime)) || (params.endTime && (nowTime > params.endTime))) {
                //     return
                // }
                let date = that.fnGetCurrentDate()
                that.fnGetStorage('adWallTimes').then(res => {
                    try {
                        if(res && (res + '' !== '0')) {
                            res = JSON.parse(res)
                        }
                    } catch(err) { console.log(err) }
                    // 满足最大次数限制
                    if(!res || (res + '' === '0') || (res && res.date != date) || (res && res.date == date && res.times < params.maxCounts)) {
                        if(!params.details || typeof params.details !== 'object') {
                            return
                        }
                        let sTimes = res.times ? res.times : 0
                        that.fnGetStorage('adWall-' + that.bookId).then(res => {
                            let details = params.details // 当前策略详情
                            let canAdWallShow = that.$app.canAdWallShow
                            let currentIndex = that.chapterIndex // 当前章节数目
                            let rTimes = that.readTimes // 本书阅读次数
                            let bTimes = res ? +res : 0
                            for(let i = 0; i < details.length; i++) {
                                // 符合章节范围
                                if(currentIndex >= details[i].minChapter && currentIndex <= details[i].maxChapter) {
                                    let readSpaces = details[i].readSpaces // 章节间隔
                                    let showSpaces = details[i].showSpaces // 展示间隔
                                    // 满足章节间隔
                                    if(rTimes >= readSpaces && rTimes % readSpaces == 0) {
                                        // 满足展示间隔
                                        if((bTimes + 1) >= showSpaces && (bTimes + 1) % showSpaces == 0) {
                                            if(canAdWallShow) {
                                                sTimes++
                                                bTimes++
                                                that.$app.canAdWallShow = false
                                                that.$app.fnAdWallTimeout(params.timeCounts)
                                                that.fnEnterAdWall(sTimes, bTimes, rTimes, date, details[i])
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                            if(sTimes >= params.maxCounts) {
                                that.preAdWall = false
                                return
                            }
                            let nextIndex = that.chapterIndex + 1 // 当前章节数目
                            let isPreAdWall = false
                            for(let i = 0; i < details.length; i++) {
                                if(nextIndex >= details[i].minChapter && nextIndex <= details[i].maxChapter) {
                                    let nextReadSpaces = details[i].readSpaces // 章节间隔
                                    let nextShowSpaces = details[i].showSpaces // 展示间隔
                                    if((rTimes + 1) >= nextReadSpaces && (rTimes + 1) % nextReadSpaces == 0) {
                                        if((bTimes + 1) >= nextShowSpaces && (bTimes + 1) % nextShowSpaces == 0) {
                                            let canEnterAdWall = that.fnCanEnterNoAdAwardAdWall(details[i]);    // 是否可以进入免广奖励激励墙
                                            if (!canEnterAdWall) {
                                                break;
                                            }
                                            that.preAdWall = true
                                            isPreAdWall = true
                                            // 预加载开关
                                            if(canAdWallShow && params.preload === 1) {
                                                that.fnAdPreLoad()
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                            if(!isPreAdWall) {
                                that.preAdWall = false
                            }
                        }, err => { console.log('读取章节累计次数失败') })
                    } else {
                        that.preAdWall = false
                    }
                }, err => { console.log('读取展示次数失败') })
            }
        },
        // 预加载判断
        fnAdPreLoad() {
            let that = this
            let timeStart = new Date().getTime()
            that.preLoadAds = []
            that.fnAdWallReport('call_wall')
            fetch.fetch({
                url: that.$app.adWallUrl,
                data: {
                    app_key: AD_TOKEN,
                    wall_id: that.adWallToken,
                },
                header: Object.assign({}, that.$app.headerJson, {
                    'Content-Type': 'application/json; charset=utf-8'
                }),
                method: 'POST',
                success: function(res) {
                    let timeEnd = new Date().getTime()
                    if(!res || !res.data) {
                        that.fnAdWallReport('call_wall_fail', {
                            error: 'no data'
                        })
                        return
                    } 
                    try {
                        let resData = JSON.parse(res.data)
                        if(resData.code !== 0) {
                            that.fnAdWallReport('call_wall_fail', {
                                error: resData.msg || ''
                            })
                            return ;
                        }
                        if(resData.data && resData.data.ads && resData.data.ads.length && resData.data.ads != 'null' && typeof resData.data.ads === 'object') {
                            let cachesAds = []
                            that.$app.adWallCaches.forEach(item => {
                                cachesAds.push(item.adslot_id)
                            })
                            let preLoadAds = resData.data.ads.filter(function(item) {
                                return cachesAds.indexOf(item) < 0
                            })
                            if(preLoadAds.length < 1) {
                                return
                            }
                            that.preLoadAds = preLoadAds
                            setTimeout(function() {
                                that.$broadcast('cacheAdWall')
                            }, 0)
                            that.fnAdWallReport('call_wall_loaded', {
                                times: timeEnd - timeStart,
                                count: resData.data.first_load_num ? resData.data.first_load_num : '',
                            })
                        }else {
                            that.fnAdWallReport('call_wall_fail', {
                                error: 'no ads data'
                            })
                        }
                    } catch(err) { console.log(err) }
                },
                fail: function(data, code) {
                    that.fnAdWallReport('call_wall_fail')
                }
            })
        },
        /**
         * 判断是否可以进入免广奖励激励墙
         * @param    {Object}    adWallInfo    [激励墙数据]
         * @return   {Boolean}                 [是否可以进入激励墙]
        */
        fnCanEnterNoAdAwardAdWall (adWallInfo) {
            if (!adWallInfo) {
                return false;
            }
            if (adWallInfo.awardType !== 5) {                                           // 非免广奖励，没有加redis缓存，可以直接进入，正常发放奖励
                return true;
            }
            let adWallReduceAd = this.adWallReduceAd;
            if (!adWallReduceAd.timestamp) {
                return false;
            }
            let times = Date.now() - adWallReduceAd.timestamp;                          // 2158接口响应到此刻的时间差值
            let redisSurplusTimes = adWallReduceAd.redisSurplusTimes * 1000;            // redis剩余时间
            let isRedisExpired = times >= redisSurplusTimes;                            // redis是否过期
            if (!isRedisExpired && adWallReduceAd.currentCount >= adWallReduceAd.maxCount) {
                return false;                                                           // redis没有过期，且激励墙领取的当前次数 >= 周期可领取的最大次数，不可进入激励墙
            }
            return true;
        },
        // 广告墙判断
        fnEnterAdWall(sTimes, bTimes, rTimes, date, detail) {
            this.fnSetStorage('adWall-' + this.bookId, bTimes)
            this.fnSetStorage('adWallTimes', JSON.stringify({
                times: sTimes,
                date: date
            }))
            if (!this.fnCanEnterNoAdAwardAdWall(detail)) {
                return false;
            }
            this.$app.adWallData = {
                adWallInfo: Object.assign({}, detail, {
                    rwi: this.adWallTip,
                    userTacticsVo: this.adWallParams && this.adWallParams.userTacticsVo || '',
                    adWallToken: this.adWallToken,
                }),
                preLoadAds: this.preLoadAds,
                bookInfo: {
                    id: this.bookId,
                    name: this.bookName,
                    chapterId: this.chapterId,
                    chapterIndex: this.chapterIndex
                },
                adSetup: Object.assign({}, this.setupJson, {
                    bgColor: this.setupJson.bNight ? this.nightColor : this.setupJson.bgColor
                }),
                routerParams: {
                    bookId: this.bookId,
                    chapterId: this.chapterId,
                    chapterName: this.chapterName,
                    pageFrom: this.pageFrom,
                    SourcePosition: this.SourcePosition,
                    first_reading: this.first_reading,
                    omap: this.omap
                },
                noAdVipSwitch: this.noAdVipSwitch ? '1' : '0',
                brandAdSwitch: this.brandAdSwitch ? '1' : '0',
            }
            this.adWallTip = null;
            if (detail.awardType === 5) {
                this.adWallEntryPopup = {                                               // 显示激励墙入口弹窗
                    award: detail.stageAwardList || [],
                    show: true
                }
                this.$app.shenceLog.log(this, 'track', 'PopupExposure', {
                    PositionName: '阅读页免广激励墙弹窗',
                    BookID: this.bookId,
                    BookName: this.bookName,
                    ChaptersNum: this.chapterIndex,
                });
                return false;
            }
            router.push({
                uri: '/AdWall',
            });
        },
        // 读取缓存
        fnGetStorage(name = '') {
            return new Promise((res, rej) => {
                if(!name) {
                    rej()
                }
                // 读取缓存数据
                storage.get({
                    key: name,
                    success: function(data) {
                        if(data) {
                            res(data)
                        }else {
                            res(0)
                        }
                    },
                    fail: function() {
                        rej()
                    }
                })
            })
        },
        // 设置缓存
        fnSetStorage(name, data) {
            if(!name || !data) {
                return
            }
            storage.set({
                key: name,
                value: data,
            })
        },
        // 转换时间格式 yyyymmdd 20200708
        fnGetCurrentDate() {
            let date = new Date()
            let year = date.getFullYear()
            let month = date.getMonth()
            let day = date.getDate()
            let ret = year + '' + ((month + 1) >= 10 ? (month + 1) : '0' + (month + 1)) + '' + (day >= 10 ? day : '0' + day)
            return ret
        },
        // 广告墙打点上报
        fnAdWallReport(event, params = {}) {
            let that = this
            let nowTime = new Date().getTime()
            let logId = 'kyy' + (that.$app.headerJson.userId ? that.$app.headerJson.userId : '')
            logId = logId + (nowTime + '').slice(logId.length - 16)
            let imei = ''
            if (!this.adWallTip) {
                this.adWallTip = this.$app.headerJson.userId + nowTime
            }
            storage.get({
                key: 'imei',
                success: function(data) {
                    if(data) {
                        imei = data
                    }
                },
                complete: function() {
                    fetch.fetch({
                        url: that.$app.adWallReportUrl,
                        data: encodeURI('json=' + JSON.stringify({
                            log_id: logId,
                            bline: 'hkx_kyy',
                            pline: 'business',
                            pkna: that.$app.headerJson.pname,
                            cts: nowTime,
                            app_version: that.$app.$data.appVer,
                            chid: that.$app.headerJson.channelCode,
                            uid: that.$app.headerJson.userId,
                            imei: imei,
                            oaid: that.$app.oaid ? that.$app.oaid : '',
                            type: 'wall',
                            event: event, // wall_imp/call_wall/call_wall_fail/call_wall_loaded/ad_imp/ad_clk
                            data: {
                                wall_id: that.adWallToken,	 
                                chapter_num: that.chapterIndex, 
                                sdk_version: '1.0.0', 
                                error_msg: params.error ? params.error : '',
                                response_time: params.times ? params.times : '',
                                ad_count: params.count ? params.count : '',
                                rwi: that.adWallTip
                            }
                        })),
                        header: Object.assign({}, that.$app.headerJson, {'Content-Type': 'application/x-www-form-urlencoded'}),
                        method: 'POST',
                        success: function() {
                            console.log(`-----adWall-----上报成功-----${event}-----`)
                        },
                    })
                }
            })
        },
        fnGetSorcePosition(omap = ''){
            let that = this
            let omapS = omap || that.omap
            if(omapS.origin){
                if(omapS.origin == 'fl'|| omapS.origin == 'yy_hd'|| omapS.origin == 'init_book'){
                    that.SourcePosition = omapS.origin
                    that.omapOrigin = omapS.origin
                    that.omapCname = omapS.origin == 'fl' ? '分类' : (omapS.origin == 'yy_hd' ? '运营活动' : '内置书')
                }else{
                    that.SourcePosition = omapS.origin + '-' + omapS.column_name
                    that.omapOrigin = omapS.origin
                    that.omapCname = omapS.column_name
                }
            }
        },

        // 分享地址宏替换
        fnReplaceUrl(url) {
            let time = new Date().getTime()
            return url.replace('__OPTIME__', time)
        },
        /**
         * 多端阅读任务奖励文案宏替换
         * @param {Number} remainTime 剩余所需阅读时长
         * @param {Number} awardCount 奖励数量
         */
        fnReplaceReadAwardText(remainTime, awardCount) {
            let retText = this.readAwardObj.readAwardInitText || '领取更多金币'
            retText = retText.replace('{minute}', remainTime)
            retText = retText.replace('{goldCoin}', awardCount)
            return retText
        },
        /**
         * 上报阅读时长
         * @param {Boolean} canGetAward 是否可以领取奖励
         */
        fnReportReadDuration(canGetAward = false) {
            let that = this
            let currentTime = parseInt(new Date().getTime() / 1000)
            let shenceReportTime = that.shenceReportTime
            let sDuration = currentTime - shenceReportTime
            let readStartTime = that.readStartTime
            let rDuration = currentTime - readStartTime
            let changeReadProgress = false
            if(rDuration >= that.minReportTime) {
                let sTime = rDuration >= that.maxReportTime ? that.maxReportTime : rDuration
                let mTime = parseInt(sTime / 60)
                if(mTime > 0 && that.currentReportTime < that.maxReportTime && that.readTaskId) {
                    changeReadProgress = true
                    that.$app.$def.requestData(that, {
                        interface: '/glory/fastapp/2146',
                        data: {
                            taskId: that.readTaskId,
                            action: 36,
                            readDuration: mTime,
                            bookId: that.bookId,
                            chapterId: that.chapterId
                        },
                        succ: function (res) {
                            if(res.retCode == 0 && res.data && res.data.totalReadDuration) {
                                that.readTotalTime = res.data.totalReadDuration
                                that.readStartTime = currentTime
                                that.currentReportTime += mTime * 60
                                if(canGetAward) {
                                    that.fnChangeReadProgress(true)
                                }
                            }
                        }
                    })
                }
            }
            // 阅读时长神策上报
            if(sDuration > 0 && !that.isFirstRend) {
                that.shenceReportTime = currentTime
                that.$app.shenceLog.log(that,'track','ReadDuration', {
                    BookID: that.bookId,
                    BookName: that.bookName,
                    ReadType: that.isListen?'语音阅读':'文字阅读',
                    ChaptersAmount: 1,
                    Duration: sDuration,
                    ChaptersID: that.chapterId,
                    ChaptersName: that.chapterName,
                    ChaptersNum: that.chapterIndex,
                    Author: that.shenceData.Author,
                    BookFinishStatus: that.shenceData.BookFinishStatus,
                    BookStatus: that.shenceData.BookStatus,
                    FirstType: that.shenceData.FirstType,
                    SecondType: that.shenceData.SecondType,
                    ThirdType: that.shenceData.ThirdType,
                    SourcePosition: that.SourcePosition,
                    SensitivityLevel: that.shenceData.SensitivityLevel?(that.shenceData.SensitivityLevel+''):'-1',
                    PayType: that.shenceData.PayType,
                    IsVIP: that.shenceData.IsVIP,
                    UpdateTime: that.shenceData.UpdateTime,
                });
            }
            if(!changeReadProgress && !that.isFirstRend && that.readTaskId && canGetAward) {
                that.fnChangeReadProgress(true)
            }
        },
        // 关闭整本购买
        fnCloseOncePrice() {
            this.giveUpPopShow = false
            this.oncePriceShow = false
            this.noContentJump()
        },
        // 展示整本购买挽留
        fnGiveUpShow() {
            this.giveUpPopShow = true
        },
        // 关闭整本购买挽留
        fnCloseGiveUp() {
            this.giveUpPopShow = false
        },
        // 放弃整本购买
        fnToPopOrder() {
            let res = this.oncePriceExtraInfo
            this.oncePriceShow = false
            if(res.data.status == 5) {
                this.orderShow = true
            }
            if(res.data.status == 4) {
                if(res.data.orderPage.action == 1) {
                    this.orderShow = true
                }else {
                    this.goRecharge(res)
                }
            }
        },
        fnOncePriceShow() {
            let that = this
            that.oncePriceShow = true
            that.$app.shenceLog.log(that,'track','PopupExposure', {
                PositionName: '整本书一口价购买弹窗',
                BookID: that.bookId,
                BookName: that.bookName,
                ChaptersNum: that.chapterIndex,
                Instruction: that.oncePriceInfo ? (that.oncePriceInfo.price + '元 vs ' + that.oncePriceInfo.totalPrice + '元') : ''
            });
        },
        noContentJump(close=true){
            if(!this.chapterContent||this.chapterContent.length==0&&close){
                if(this.orderObj.enough == false){
                    this.rechargeShow = true
                }else{
                    router.replace({
                        uri:'/Index',
                        params:{
                            pageFrom:'read'
                        }
                    })
                }
            }
        },
        /**
         * 判断左右翻页支持性
         */
        fnSupportNewReader() {
            if(this.$app && this.$app.headerJson && this.$app.headerJson.pfvc && this.$app.headerJson.pfvc > 1070) {
                this.isSupportNewReader = true
            } else {
                this.hasReadTypeSwitch = true
                this.isSupportNewReader = false
                this.readType = 'list'
                storage.set({
                    key: 'readType',
                    value: 'list'
                })
            }
        },
        /**
         * 获取翻页模式
         */
        fnGetReadType() {
            let that = this
            storage.get({
                key: 'readTypeClick',
                success: function(data) {
                    if(data && data == '1') {
                        that.hasReadType = true
                    }
                }
            })
            storage.get({
                key: 'readType',
                success: function(data) {
                    if(data && data == 'page' && that.isSupportNewReader) {
                        that.readType = 'page'
                    } else {
                        that.readType = 'list'
                    }
                }
            })
        },
        /**
         * 获取屏幕可点击区域缓存
         */
        fnGetProperty() {
            let that = this
            storage.get({
                key: 'property',
                success: function(data) {
                    if(data) {
                        let res
                        try {
                            res = JSON.parse(data)
                            if(res.width && res.height && res.height > res.width) {
                                that.propObj = {
                                    width: res.width,
                                    height: res.height - (90 + 42 + 146)
                                }
                                that.hasGetProp = true
                            }
                        } catch(e) { console.log(e) }
                    }
                }
            })
        },
        /**
         * 获取屏幕可点击区域
         * @param {Boolean} isInit 是否初始化请求
         */
        fnSetProperty(isInit = false) {
            let that = this
            return new Promise((res, rej) => {
                if(!that.isSupportNewReader) {
                    rej()
                }
                if(!that.$element("readWrap")) {
                    if(!isInit) {
                        console.log('----------fnSetProperty----------不存在DOM')
                        that.hasReadTypeSwitch = true
                        that.isSupportNewReader = false
                    }
                    rej()
                }
                if(that.$element("readWrap") && that.$element("readWrap").getBoundingClientRect) {
                    that.$element("readWrap").getBoundingClientRect({
                        success: function(data) {
                            if(data.width && data.height && data.height > data.width) {
                                console.log('----------fnSetProperty----------获取配置成功', data)
                                storage.set({
                                    key: 'property',
                                    value: JSON.stringify(data)
                                })
                                that.propObj = {
                                    width: data.width,
                                    height: data.height - (90 + 42 + 146)
                                }
                                that.hasGetProp = true
                                res(1)
                            } else {
                                if(!isInit) {
                                    console.log('----------fnSetProperty----------获取配置错误1')
                                    that.hasReadTypeSwitch = true
                                    that.isSupportNewReader = false
                                }
                                rej()
                            }
                        },
                        fail: function() {
                            console.log('----------fnSetProperty----------获取配置失败1', isInit)
                            if(!isInit) {
                                that.hasReadTypeSwitch = true
                                that.isSupportNewReader = false
                            }
                            rej()
                        }
                    })
                }
            })
        },
        /**
         * 初始参数
         */
        fnInitParams() {
            console.log('----------fnInitParams----------初始参数')
            this.hasLoadChapter = false
            this.swiperInit = false
            this.showSwiper = false
            this.showSlider = false
            this.hasPreChapter = false
            this.hasNextChapter = false
            this.contentArr = []
            this.currentPage = 0
            this.hasLoadReader = false
            this.hasInsertAd = false
            this.isInsertAdPage = false
            this.needRequestRec = false
            this.hasRequestRec = false
            this.dbRecommend = {}
            this.dbRecommend.isReady = false
            // this.preAdWall = false
            this.fnCheckReduceAdTime();                                                              // 校验免广时长是否过期
            this.chapterEndRedTask.isReady = false;
        },
        /**
         * swiper切换
         * @param {Object} evt 事件参数
         */
        fnSwiperChange(evt) {   
            this.currentPage = evt.index

            if(this.currentPage > 1) {
                this.isBannerAdRepeat = true;
            }

            if(this.hasShowRec){
                this.hasShowRec = false
                return false
            }

            if(evt.index === this.contentArr.length - 2 && this.canLastPageRec && (!this.isShowRecommend || !this.isShowRedEnvelopes && this.chapterEndRedTask.isReady) && this.chapterState === 'pre' && this.canRec && this.hasNextChapter && this.needRequestRec) {
                this.swiperInit = true
                if(!this.isShowRedEnvelopes && this.chapterEndRedTask.isReady) {
                    this.isShowRedEnvelopes = true;
                    this.fnShortCutShowHandle();
                    this.canRec = false;
                    return
                }
                if(this.dbRecommend.isReady) {
                    this.isShowRecommend = true
                    this.fnShortCutShowHandle()
                    this.canRec = false
                } else {
                    this.isRecDelayShow = true
                }
                return
            }
            
            if(evt.index === this.contentArr.length - 1 && this.canLastPageRec && this.hasNextChapter && this.needRequestRec) {
                if(!this.isShowRedEnvelopes && this.chapterEndRedTask.isReady) {
                    this.$element("swiper") && this.$element("swiper").swipeTo({ index: this.currentPage - 1 });
                    this.isShowRedEnvelopes = true
                    this.fnShortCutShowHandle()
                    this.hasShowRec = true
                    return
                }
                if(!this.isShowRecommend && this.dbRecommend.isReady) {
                    this.$element("swiper") && this.$element("swiper").swipeTo({ index: this.currentPage - 1 });
                    this.isShowRecommend = true
                    this.fnShortCutShowHandle()
                    this.hasShowRec = true
                    return
                }
            }

            if(evt.index !== this.contentArr.length - 2) {
                this.isRecDelayShow = false
            }

            if(evt.index !== this.contentArr.length - 1 && evt.index !== this.contentArr.length - 2){
                this.isShowRecommend = false;
                this.isShowRedEnvelopes = false;
            }

            if(evt.index !== 0 && evt.index !== 1 && evt.index !== this.contentArr.length - 2 && evt.index !== this.contentArr.length - 1) {
                this.canRec = false;
            }
            
            this.hasTouchMove = false
            this.touchStartPosition = 0
            this.canInsertVideoShow = true
            console.log('----------fnSwiperChange----------swiper切换', this.currentPage, this.swiperInit)
            if (this.swiperInit) {
                if (evt.index === 0 && this.hasPreChapter) {
                    this.chapterState = 'pre'
                    this.isInsertAdPage = false
                    this.isSwiperToNext = true
                    this.canRec = true
                    this.$element("swiper") && this.$element("swiper").swipeTo({ index: this.currentPage + 1 });
                    this.fnPrevChpter()
                } else if (evt.index === this.contentArr.length - 1) {
                    console.log('----------fnSwiperChange----------swiper切换fnNextChapter', this.currentPage, this.swiperInit)
                    this.chapterState = 'next'
                    this.isInsertAdPage = false
                    this.isSwiperToNext = true
                    this.$element("swiper") && this.$element("swiper").swipeTo({ index: this.currentPage - 1 });
                    this.fnNextChapter('','')
                }
            } else {
                this.swiperInit = true
            }
            if(this.isSwiperToNext) {
                this.isSwiperToNext = false
                return
            }
            this.fnAdInRange(evt.index)
        },
        /**
         * swiper点击
         * @param {String} evtType 事件类型
         * @param {Object} evt 事件参数
         */
        fnPageOperate(evtType = 'click', evt) {
            if(this.needStopOperator) {
                return
            }
            if(this.bShowDashboard) {
                this.bShowDashboard = false;
            }else {
                let tag = this.fnCalcClickArea(evtType, evt)
                let time = new Date().getTime()
                console.log('----------fnPageOperate----------swiper点击' + tag)
                switch (tag) {
                    case 'pre':
                        if(time - this.clickInterval < 250) {
                            return
                        }
                        this.clickInterval = time
                        console.log('----------fnPageOperate----------swiper点击pre' + this.currentPage)
                        if(this.isShowRecommend) {
                            this.isShowRecommend = false
                            return
                        }

                        if(this.isShowRedEnvelopes) {
                            this.isShowRedEnvelopes = false
                            return
                        }
                    
                        this.$element("swiper") && this.$element("swiper").swipeTo({ index: this.currentPage - 1 });
                        break;
                    case 'next':
                        if(time - this.clickInterval < 250) {
                            return
                        }
                        this.clickInterval = time
                        console.log('----------fnPageOperate----------swiper点击next' + this.currentPage)
                        
                        this.$element("swiper") && this.$element("swiper").swipeTo({ index: this.currentPage + 1 });
                        break;
                    default: 
                        this.bShowDashboard = !this.bShowDashboard
                        if(this.bShowDashboard && !this.hasMenuShow) {
                            this.fnSetMenuShowCache()
                        }
                }
            }
        },
        /**
         * 阅读页页面点击区域计算
         * @param {String} evtType 事件类型
         * @param {Object} evt 事件参数
         */
        fnCalcClickArea(evtType, evt) {
            if(evtType === 'touchend' && this.hasTouchMove) {
                let tag = 'next'
                if(this.hasTouchMove === 'right') {
                    tag = 'pre'
                }
                if(this.hasTouchMove === 'left') {
                    tag = 'next'
                }
                this.hasTouchMove = false
                this.touchStartPosition = 0
                return tag
            }
            if(evtType === 'touchend' && evt.changedTouches) {
                evt.pageX = evt.changedTouches[0].pageX
                evt.pageY = evt.changedTouches[0].pageY
            }
            let x = evt.pageX
            let y = evt.pageY
            let width =  this.propObj.width
            let height = this.propObj.height
            let tag = 'menu'
            if(width && height) {
                let w = width / 3
                let h = height / 3
                let a = 2.2 * h
                y < a ? (tag = x < w ? 'pre' : x >= w && x <= 2 * w ? 'menu' : 'next') : (tag = x < w ? 'pre' : 'next')
            }
            return tag
        },
        /**
         * 渲染翻页阅读器
         */
        fnLoadReader() {
            console.log('----------fnLoadReader----------渲染翻页阅读器')
            this.readerCount++
            let content = this.fnCreateChapterContent(this.chapterContent)
            this.contentArr = this.fnCalcChapterContent(content)
            console.log('计算完成', this.contentArr, this.currentPage, this.pageNum, this.swiperInit)
            this.fnCalcCurrentPage()
            this.fnInsertAd()
            this.fnCanShowNewReaderMask()
        },
        /**
         * 章节内容处理
         * @param {String} content 章节内容
         */
        fnCreateChapterContent(content) {
            let originContent = content.join('\n')
            if(originContent && typeof originContent == "string") {
                let retArr = []
                let contentArr = originContent.replace(/(\r\n)|(\n\r)|(\n)/g, "\n").split("\n")
                contentArr.forEach(cItem => {
                    let currentContent = cItem.replace(/(^\s*)|(\s*$)/g, "")
                    if(currentContent) {
                        retArr.push("　　" + currentContent)
                    }
                })
                return retArr
            }
        },
        /**
         * 章节计算
         * @param {Array} contentArr 内容数组
         */
        fnCalcChapterContent(contentArr) {
            let brand = this.$app && this.$app.headerJson && this.$app.headerJson.brand && this.$app.headerJson.brand.toLowerCase() || 'unknown'
            let isOppo = ['oppo', 'realme', 'oneplus'].indexOf(brand) > -1 
            let width =  this.propObj.width
            let height = isOppo && !this.hasShortcut ? this.propObj.height - 40 : this.propObj.height
            let fontsize = this.setupJson.fontSize
            let lineheight = Math.ceil(this.setupJson.lineheight)
            let margin = 30
            // let page = 1
            let pageInfo = []
            let lineContent = []
            if(width && height) {
                let lines = Math.floor(height / parseInt(lineheight))
                let columns = Math.floor((width - 2 * parseInt(margin)) / parseInt(fontsize))
                if(this.chapterName) {
                    lineContent.push(this.chapterName)
                }
                contentArr.forEach((cItem, cIndex) => {
                    for(let l = 0; l < cItem.length; l += columns) {
                        lineContent.push(cItem.slice(l, l + columns))
                    }
                })
                for (let c = 0; c < lineContent.length; c += lines) {
                    pageInfo.push({
                        type: 'content',
                        lines: c,
                        content: lineContent.slice(c, c + lines)
                    })
                }
                if(this.hasGetAdSetting && this.insertAdSwitch && !this.isNoAd) {
                    pageInfo = this.fnCalcAdPosition(pageInfo)
                }
                if(this.hasPreChapter) {
                    pageInfo.unshift({
                        type: 'blank',
                    })
                }
                pageInfo.push({
                    type: 'blank',
                })
                return pageInfo
            }
        },
        /**
         * 更新章节状态
         */
        fnUpdateChapterState() {
            console.log('----------fnUpdateChapterState----------更新章节状态')
            if(this.preChapterId && this.preChapterId != 'null') {
                this.hasPreChapter = true
            }
            if(this.nextChapterId && this.nextChapterId != 'null') {
                this.hasNextChapter = true
            }
            console.log('上一章节：' + this.preChapterId)
            console.log('下一章节：' + this.nextChapterId)
            console.log('是否存在上一章：' + this.hasPreChapter)
            console.log('是否存在下一章：' + this.hasNextChapter)
        },
        /**
         * 计算初始化页数
         */
        fnCalcCurrentPage() {
            if(this.chapterState == 'next') {
                if(this.hasPreChapter) {
                    this.currentPage = 1
                    this.pageNum = 1
                    this.fnAdInRange(1)
                } else {
                    this.currentPage = 0
                    this.pageNum = 0
                    this.fnAdInRange(0)
                    this.swiperInit = true
                }
            }
            if(this.chapterState == 'pre') {
                let currentIndex = this.contentArr.length - 2
                this.currentPage = currentIndex
                this.pageNum = currentIndex
                this.fnAdInRange(currentIndex)
            }
            setTimeout(() => {
                this.showSwiper = true
                this.showSlider = true
            }, 0)
        },
        /**
         * 翻章方式切换
         * @param {Object} evt 事件参数
         */
        fnChangeReadType(evt) {
            this.readType = evt.detail.type
            storage.set({
                key: 'readType',
                value: evt.detail.type
            })
            storage.set({
                key: 'readTypeClick',
                value: '1'
            })
            if(evt.detail.type == 'page') {
                this.fnRefreshReader()
            }
        },
        /**
         * 翻章方式切换
         */
        fnRefreshReader() {
            this.swiperInit = false
            this.showSwiper = false
            this.showSlider = false
            this.hasLoadReader = false
            this.hasInsertAd = false
            this.remainPage = 0
            this.chapterState = 'next'
            this.fnLoadReader()
        },
        /**
         * 停止冒泡
         */
        fnStopPropagation(e) {
            e && e.stopPropagation && e.stopPropagation()
        },
        /**
         * 获取广告配置
         */
        fnGetAdSetting() {
            console.log('----------fnGetAdSetting----------获取广告配置')
            let that = this;
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2158',
                data: {
                    Read: 1,
                    bookId: that.bookId,
                    sourceChannelCode: that.$app.sourceInfo['sourceCid'],
                },
                succ: function (res) {
                    if(!res || !res.data) {
                        that.fnExceptionReport(2, '2158 接口错误')
                        return
                    }
                    console.log('----------fnGetAdSetting----------获取广告配置成功')
                    if(res.data) {
                        if(res.data.autoTriggerChapterNum) {
                            that.$app.autoClickReadTime = res.data.autoTriggerChapterNum
                        }
				        if(res.data.xmDeviation) {
                            that.$app.setAppData('adClickOffsetConfInfo', res.data.xmDeviation); // 广告点击偏移量开关
                        }
                        that.$app.brandAdPreloadSwitch = !!res.data.brandAdPreloadSwitch
                        that.$app.isApiCache = !!res.data.apiAdCacheSwitch                                  // 广告API缓存开关
                        that.$app.adRefreshSwitch = !!res.data.adRefreshSwitch;                             // 广告刷新开关
                        that.$app.fnSetMisclickConf({                                                       // 设置误触频次控制
                            misClickTotalFrequency: res.data.misClickTotalFrequency,                        // 误触总频次限制
                            misClickAdPosition: res.data.misClickAdPosition,                                // 各广告位置误触频次限制
                            misClickIntervalTime: res.data.misClickIntervalTime,                            // 时间间隔（秒）
                        });
                        let adCacheConf = that.$app.adCacheConf;                                            // 广告缓存配置
                        if (!adCacheConf.isLoaded) {
                            adCacheConf.isLoaded = true;
                            if (res.data.adCacheParam && that.brand === 'vivo') {                           // 目前只针对vivo开放此功能
                                let adCacheParam = res.data.adCacheParam;
                                adCacheConf.notClickAdCacheMaxCount = adCacheParam.maxLimit || 15;          // 未点击缓存池最大长度
                                adCacheConf.clickedAdCacheMaxCount = adCacheParam.checkedMaxLimit || 50;    // 已点击缓存池最大长度
                                adCacheConf.filterRules = adCacheParam.materialRules || [];                 // 过滤规则
                                adCacheConf.clickTypeOfReplace = adCacheParam.clickReplaceType || [];       // 点击类型
                                adCacheConf.clickCountOfReplace = adCacheParam.clickReplaceNum || 0;        // 点击多少次替换
                                adCacheConf.cacheSwitch = true;                                             // 缓存开关
                                that.$app.fnAdPreCacheHandle();                                             // 处理配置加载前预缓存的广告
                            } else {
                                adCacheConf.cacheSwitch = false;                                            // 缓存开关
                                that.$app.fnClearPreCache();                                                // 清空预缓存池
                            }
                        }
                        let currentCount = res.data.adWallReduceAdAwardCount;                       // 时间间隔内进入激励墙当前次数
                        let surplusTimes = res.data.adWallReduceAdSecond || 0;                      // 剩余免广时长（秒）
                        that.adWallReduceAd = Object.assign({}, that.adWallReduceAd, {
                            timestamp: Date.now(),                                                  // 当前接口响应成功后的时间
                            expiredTime: res.data.adWallReduceAdEndTime || 0,                       // 免广截止时间（时间戳毫秒） 
                            surplusTimes,                                                           // 剩余免广时长（秒）
                            redisSurplusTimes: res.data.adwallAwardCycleEndSecond || 0,             // redis剩余时间
                            currentCount: currentCount || (currentCount === 0 ? 0 : -1),            // 时间间隔内进入激励墙当前次数
                        })
                        that.fnCheckReduceAdTime();                                                 // 校验免广是否过期
                        if(res.data.baiduSDKFlag){
                            that.$app.fnInitBaiduSDK();                                             // 初始化百度sdk
                        }
                        that.readTypeSwitch = res.data.userTurnType == 1 ? true : false
                        if(!that.hasReadType) {
                            if(that.isSupportNewReader && res.data.turnLeftRight == 1) {
                                that.readType = 'page'
                                storage.set({
                                    key: 'readType',
                                    value: 'page'
                                })
                            } else {
                                that.readType = 'list'
                                storage.set({
                                    key: 'readType',
                                    value: 'list'
                                })
                            }
                        }
                        if(res.data && res.data.brandAdSwitch) {
                            that.brandAdSwitch = true
                        }
                        if(res.data.positionTop && res.data.positionTop.userTactics) {
                            that.topAdTactics = {
                                userTacticsVo: res.data.positionTop.userTactics
                            }
                        }
                        if(res.data.positionTop && res.data.positionTop.adPositionId) {
                            that.topAdId = res.data.positionTop.adPositionId
                        }
                        if(res.data.positionTop) {
                            that.topAdSwitch = res.data.positionTop.switchValue == 1 ? true : false
                        }
                        if(res.data.positionMiddle && res.data.positionMiddle.userTactics) {
                            that.middleAdTactics = {
                                userTacticsVo: res.data.positionMiddle.userTactics
                            }
                        }
                        if(res.data.positionMiddle && res.data.positionMiddle.adPositionId) {
                            that.middleAdId = res.data.positionMiddle.adPositionId
                        }
                        if(res.data.positionMiddle) {
                            that.middleAdloadPosition = res.data.positionMiddle.loadPixel
                            that.middleAdSwitch = res.data.positionMiddle.switchValue == 1 ? true : false
                        }
                        if(res.data.positionBottom && res.data.positionBottom.userTactics) {
                            that.bottomAdTactics = {
                                userTacticsVo: res.data.positionBottom.userTactics
                            }
                        }
                        if(res.data.positionBottom && res.data.positionBottom.adPositionId) {
                            that.bottomAdId = res.data.positionBottom.adPositionId
                        }
                        if(res.data.positionBottom) {
                            if(res.data.positionBottom.rotationTime && res.data.positionBottom.rotationTime > 0) {
                                that.bottomAdTimes = res.data.positionBottom.rotationTime || 30
                                that.bottomAdPreTimes = res.data.positionBottom.preloadTime || 5;
                                that.bannerAdRepeatSwitch = true;
                                 // 是否是拉起页
                                if(that.fromPlace !== 'login') {
                                    that.isBannerAdRepeat = true;
                                }
                            } else {
                                that.bannerAdRepeatSwitch = false
                            }
                            that.bottomAdSwitch = res.data.positionBottom.switchValue == 1 ? true : false
                        }
                        if(res.data.preAdUnitId) {
                            that.preAdId = res.data.preAdUnitId
                        }
                        if(res.data.preAdTactics) {
                            that.preAdTactics = {
                                userTacticsVo: res.data.preAdTactics
                            }
                            that.preAdSwitch = true
                        }
                        if(res.data.readInsertUserTactics) {
                            that.insertAdTactics = {
                                userTacticsVo: res.data.readInsertUserTactics
                            }
                        }
                        if(res.data.readInsertAdUnitId) {
                            let insertAdId = []
                            let readInsertAdUnitId = res.data.readInsertAdUnitId.replace('，', ',')
                            let readInsertAdUnitIdArr = readInsertAdUnitId.split(',')
                            readInsertAdUnitIdArr.forEach(item => {
                                if(item) {
                                    insertAdId.push(item)
                                }
                            })
                            if(insertAdId.length > 0) {
                                that.insertAdId = insertAdId
                            }
                        }
                        if(res.data.readInsertAdConfigArray) {
                            that.insertAdConfig = res.data.readInsertAdConfigArray
                        }
                        // 阅读器退出广告
                        if(res.data.exitReaderSwitch) {
                            if(res.data.exitReaderSwitch.userTactics) {
                                that.backAdTactics = {
                                    userTacticsVo: res.data.exitReaderSwitch.userTactics
                                }
                            }
                            if(res.data.exitReaderSwitch.adPositionId) {
                                that.backAdId = res.data.exitReaderSwitch.adPositionId
                            }
                            if(res.data.exitReaderSwitch.continueTime) {
                                that.backAdLoadTime = res.data.exitReaderSwitch.continueTime
                            }
                            if(res.data.exitReaderSwitch.exitReaderOperate === 'exitApp') {
                                that.isExitApp = true
                            }
                            if(res.data.exitReaderSwitch.switchValue) {
                                that.backAdSwitch = res.data.exitReaderSwitch.switchValue == 1 ? true : false
                            }
                            if(res.data.exitReaderSwitch.switchValue == 1 && (res.data.exitReaderSwitch.addDeskLimit || res.data.exitReaderSwitch.addDeskLimit === 0)) {
                                that.maxBackDialogTimes = res.data.exitReaderSwitch.addDeskLimit
                            }
                            // 退出按钮样式
                            if(res.data.exitReaderSwitch.buttonStyle === 'up-down') {
                                that.isVerticalBackButton = true;
                            }
                        }
                    }
                    that.hasGetAdSetting = true
                    that.fnSetAdParams()
                    if(!(that.isSupportNewReader && that.readType == 'page')) {
                        that.hasReadTypeSwitch = true
                    }
                    if(that.isSupportNewReader && that.readType == 'page' && that.hasLoadChapter && !that.hasLoadReader) {
                        that.hasLoadReader = true
                        if(that.hasGetProp) {
                            that.fnLoadReader()
                        } else {
                            setTimeout(() => {
                                that.fnSetProperty(false).then(res => {
                                    if(res) {
                                        that.fnLoadReader()
                                    }else {
                                        that.hasReadTypeSwitch = true
                                        that.isSupportNewReader = false
                                    }
                                })
                            }, 500)
                        }
                    }
                    that.fnInsertAd()
                    that.fnCanShowNewReaderMask()
                },
                fail: function () {
                    that.fnExceptionReport(2, '2158 网络错误')
                    network.getType({
                        success: function(data) {
                            if(data && data.type == 'none') {
                                that.isGetAdSettingError = true
                            }
                        }
                    })
                }
            })
        },
        /**
         * 初始化阅读页广告参数
         */
        fnInitAdParmas() {
            console.log('----------fnInitAdParmas----------初始化广告')
            this.isTopAdShow = false
            this.isMiddleAdShow = false
            this.isBottomAdShow = false
        },
        /**
         * 设置阅读页广告参数
         */
        fnSetAdParams() {
            console.log('----------fnSetAdParams----------设置阅读页广告参数')
            let that = this
            if(that.hasGetAdSetting && that.hasLoadChapter) {
                if(that.topAdSwitch) {
                    setTimeout(() => {
                        that.isTopAdShow = true
                    }, 0)
                }
                if(that.middleAdSwitch) {
                    setTimeout(() => {
                        that.isMiddleAdShow = true
                    }, 0)
                }
                if(that.bottomAdSwitch) {
                    setTimeout(() => {
                        that.isBottomAdShow = true
                    }, 0)
                }
                that.fnSetInsertAdConfig()
            }
        },
        /**
         * 加载阅读器
         */
        fnInitReader() {
            console.log('----------fnInitReader----------加载阅读器')
            let that = this
            if(that.isSupportNewReader && that.readType == 'page' && !that.hasLoadReader) {
                console.log('----------fnInitReader----------加载阅读器执行')
                that.hasLoadReader = true
                if(that.hasGetProp) {
                    that.fnLoadReader()
                } else {
                    console.log('----------fnInitReader----------重新获取配置')
                    setTimeout(() => {
                        that.fnSetProperty(false).then(res => {
                            if(res) {
                                that.fnLoadReader()
                            }else {
                                that.hasReadTypeSwitch = true
                                that.isSupportNewReader = false    
                            }
                        })
                    }, 500)
                }
            }
        },
        /**
         * 获取阅读次数
         */
        fnGetReadTimes() {
            let that = this
            that.fnGetStorage('readTimes-' + that.bookId).then(res => {
                if(res && (res + '' !== '0')) {
                    that.readTimes = +res
                }
            })
        },
        /**
         * 阅读器新手蒙层展示
         */
        fnGetNewReaderMask() {
            let that = this
            storage.get({
                key: 'newReaderMask',
                success: function(data) {
                    if(!(data && data == 1)) {
                        that.canShowNewReaderMask = true
                    }
                }
            })
        },
        /**
         * 插屏广告计算
         */
        fnInsertAd() {
            console.log('----------fnInsertAd----------插屏广告计算')
            if(this.isSupportNewReader && this.readType == 'page' && this.hasGetAdSetting && this.hasLoadChapter && this.insertAdSwitch && this.contentArr && this.contentArr.length && !this.hasInsertAd && !this.isNoAd) {
                console.log('----------fnInsertAd----------插屏广告计算执行')
                this.hasInsertAd = true
                let count = this.readerCount
                let contentArr = JSON.parse(JSON.stringify(this.contentArr))
                let hasPreChapter = this.hasPreChapter
                let hasNextChapter = this.hasNextChapter
                let chapterState = this.chapterState
                let remainPage = this.remainPage
                let remain = chapterState == 'pre' ? 0 : remainPage
                let space = this.insertAdSpace + 1
                let preAdWall = this.preAdWall
                let chapterIndex = this.chapterIndex
                let insertAdId = this.insertAdId
                let insertIndex = 0
                if(hasPreChapter) {
                    contentArr.shift()
                }
                contentArr.pop()
                for(let i = 1; i < contentArr.length; i++) {
                    if((i + 1 + remain) % space == 0) {
                        let index = insertIndex % insertAdId.length
                        contentArr.splice(i, 0, {
                            type: 'ad',
                            adSoltId: insertAdId[index],
                            readerCount: this.readerCount,
                        })
                        insertIndex++
                    }
                }
                if((contentArr.length + 1 + remain) % space == 0 && !preAdWall) {
                    let index = insertIndex % insertAdId.length
                    contentArr.push({
                        type: 'ad',
                        adSoltId: insertAdId[index],
                        readerCount: this.readerCount,
                    })   
                }
                this.remainPage = (contentArr.length - (space - remain)) % space
                if(hasPreChapter) {
                    contentArr.unshift({
                        type: 'blank',
                    })
                }
                contentArr.push({
                    type: 'blank',
                })
                if(this.preAdSwitch && chapterIndex == 1 && this.isFirstLoadReader && !hasPreChapter) {
                    contentArr.unshift({
                        type: 'preAd',
                    })
                    this.canShowNewReaderMask = false    
                    storage.set({
                        key: 'newReaderMask',
                        value: '1'
                    })
                }
                this.isFirstLoadReader = false
                if(count == this.readerCount) {
                    this.contentArr = contentArr
                    this.fnAdInRange(this.currentPage)
                }
            }
            if(this.hasGetAdSetting && !this.insertAdSwitch || this.isNoAd) {
                this.hasInsertAd = true
            }
            this.fnGetRecSwitch()
        },
        /**
         * 广告计算
         * @param {Array} pageInfo 内容数组
         */
        fnCalcAdPosition(pageInfo = []) {
            console.log('----------fnCalcAdPosition----------插屏广告计算')
            if(!(this.isSupportNewReader && this.readType == 'page' && this.hasGetAdSetting && this.hasLoadChapter && this.insertAdSwitch && !this.hasInsertAd)) {
                return pageInfo
            }
            console.log('----------fnCalcAdPosition----------插屏广告计算执行')
            this.hasInsertAd = true
            let remain = 0
            let insertAdId = this.insertAdId
            let insertIndex = 0
            if(this.chapterState == 'pre') {
                remain = 0
            }
            if(this.chapterState == 'next') {
                remain = this.remainPage
            }
            let space = this.insertAdSpace + 1
            for(let i = 1; i < pageInfo.length; i++) {
                if((i + 1 + remain) % space == 0) {
                    let index = insertIndex % insertAdId.length
                    pageInfo.splice(i, 0, {
                        type: 'ad',
                        adSoltId: insertAdId[index],
                        readerCount: this.readerCount,
                    })
                    insertIndex++
                }
            }
            if((pageInfo.length + 1 + remain) % space == 0 && !this.preAdWall) {
                let index = insertIndex % insertAdId.length
                pageInfo.push({
                    type: 'ad',
                    adSoltId: insertAdId[index],
                    readerCount: this.readerCount,
                })
            }
            this.remainPage = (pageInfo.length - (space - remain)) % space
            if(this.preAdSwitch && +this.chapterIndex === 1 && this.isFirstLoadReader && !this.hasPreChapter) {
                pageInfo.unshift({
                    type: 'preAd',
                })
                this.canShowNewReaderMask = false
                storage.set({
                    key: 'newReaderMask',
                    value: '1'
                })
            }
            this.isFirstLoadReader = false
            return pageInfo
        },
        /**
         * 新手引导展示判断
         */
        fnCanShowNewReaderMask() {
            console.log('----------fnCanShowNewReaderMask----------新手引导展示判断')
            if(this.isSupportNewReader && this.readType == 'page' && this.canShowNewReaderMask && this.hasLoadChapter && this.hasGetAdSetting && (!this.preAdSwitch || this.hasInsertAd)) {
                console.log('----------fnCanShowNewReaderMask----------新手引导展示执行')
                this.bShowDashboard = true
                this.isNewReaderMask = true
                storage.set({
                    key: 'newReaderMask',
                    value: '1'
                })
            }
        },
        /**
         * 关闭新手引导
         */
        fnNewReaderMaskHide() {
            this.isNewReaderMask = false
            this.canShowNewReaderMask = false
        },
        /**
         * 插页视频
         * @param {Boolean} isTouch 是否误触
         */
        fnInsertVideo(isTouch = false) {
            this.needStopOperator = true
            setTimeout(() => {
                this.needStopOperator = false
            }, 300)
            if(this.isInsertVideoLoading) {
                return
            }
            this.isInsertVideoLoading = true
            setTimeout(() => {
                this.isInsertVideoLoading = false
            }, 3000)
            this.fnOperationClick('insertVideo', { isTouch: isTouch })
            this.$broadcast('insertVideoInit')
        },
        /**
         * 插页视频奖励
         */
        fnInsertVideoAward() {
            let that = this
            that.insertVideoNums--
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2141',
                data: { taskId: that.insertVideoTaskId },
                succ: function (res) {
                    if(res && res.data) {
                        if(res.data.limitNum && res.data.limitNum > 0) {
                            that.insertVideoNums = res.data.limitNum
                        }
                        prompt.showToast({
                            message: res.data.message || '恭喜您获得金币'
                        })
                    }
                }
            })
        },
        /**
         * 更新插页广告配置
         */
        fnSetInsertAdConfig() {
            let config = this.insertAdConfig
            let chapterIndex = this.chapterIndex
            let isCheck = false
            if(config && config.length > 0) {
                for(let i = 0; i < config.length; i++) {
                    let beginChapter = config[i].beginChapter
                    let endChapter = config[i].endChapter
                    if(chapterIndex >= beginChapter && chapterIndex <= endChapter) {
                        isCheck = true
                        this.insertAdSpace = config[i].intervalPage ? +config[i].intervalPage : 5
                        this.insertAdPreLoad = config[i].preloadPage ? +config[i].preloadPage : 2
                        this.insertAdSwitch = true
                        break;
                    }
                }
            }
            if(!isCheck) {
                this.insertAdSwitch = false
            }
        },
        /**
         * 阅读任务视频奖励
         */
        fnTaskVideoAward() {
            let that = this
            console.log('后续激励视频',that.awardAdInfo.userTacticsVo)
            that.$app.$def.requestData(that,{
                interface: `/glory/fastapp/2141`,
                data: {
                    taskId: that.awardAdInfo.taskId
                },
                succ: function (data) {
                    if(data.retCode == 0 && data.data.code == 0){

                        //激励视频领取奖励
                        prompt.showToast({
                          message: data.data.message
                        })
                    }
                },
                 error: function (code) {
                    prompt.showToast({
                        message: '视频领取奖励失败'
                    })
                }
            })
        },
        /**
         * 改变阅读时间进度
         * @param {Boolean} canGetAward 是否可以领取奖励
         */
        fnChangeReadProgress(canGetAward = false) {
            let that = this
            if(!that.isReadProgressShow) {
                return
            }
            let readTaskAll = that.readTaskAll
            let readTotalTime = that.readTotalTime
            let isSet = false
            let isNeedGetAward = false
            let currentIndex = 0 
            for(let i = 0; i < readTaskAll.length; i++) {
                if(readTotalTime < readTaskAll[i].duration || readTaskAll[i].awardReceiveFlag === 0) {  //这段还没完成或者还没领取
                    if(readTaskAll[i].awardReceiveFlag === 0 && readTotalTime >= readTaskAll[i].duration) { //这段达到领取条件但是还没领
                        currentIndex = i
                        isNeedGetAward = true
                        
                    }
                    that.readTask = readTaskAll[i]
                    if(isNeedGetAward) {
                        that.readAwardText = '领取更多金币'
                    } else {
                        let remainTime = readTaskAll[i].duration - readTotalTime
                        let awardCount = readTaskAll[i].award
                        that.readAwardText = that.fnReplaceReadAwardText(remainTime, awardCount)
                    }
                    isSet = true
                    break;
                }
            }
            if(!isSet) {
                that.readTask = readTaskAll[readTaskAll.length - 1]
                that.readAwardText = '领取更多金币'
            }      
            if(canGetAward && isNeedGetAward) {
                that.fnReadTaskRecive(currentIndex)
            }   
        },
        /**
         * 阅读任务领取奖励
         * @param {Number} currentIndex 当前阅读时间段
         */
        fnReadTaskRecive(currentIndex = 0) {
            let that = this
            if(that.isReadTaskRecive) {
                return
            }
            that.isReadTaskRecive = true
            that.$app.$def.requestData(that,{
                interface: `/glory/fastapp/2141`,
                data: {
                    taskId: that.readTaskId
                },
                succ: function (data) {
                    if(data.retCode == 0 && data.data && data.data.code == 0) {
                        let canLoadVideo = false
                        if(data.data.videoTaskVo) {
                            that.awardAdInfo = data.data.videoTaskVo  
                            if(data.data.videoTaskVo.adPositionId)  {
                                that.awardVideoId = data.data.videoTaskVo.adPositionId
                            }      
                            canLoadVideo = true
                        }
                        // 阅读任务完成信息流
                        if(data.data.xxlAdPositionId) {
                           that.rewardAdId = data.data.xxlAdPositionId
                        }
                        if(data.data.adFlag == 1 && !that.isNoAd) {
                            if(data.data.xxlUtVo) {
                                that.rewardAdTactics.userTacticsVo = data.data.xxlUtVo
                            }
                            that.rewardAdSwitch = true
                        } else {
                            that.rewardAdSwitch = false
                        }
                        let readTaskAll = that.readTaskAll
                        //阅读奖励信息
                        let readTaskInfo = {
                            amount: readTaskAll[currentIndex].award,
                            readTime: readTaskAll[currentIndex].duration,
                            canLoadVideo: canLoadVideo,
                        }
                        that.readTaskInfo = readTaskInfo
                        that.readRewardPopShow = true
                        that.readTaskAll[currentIndex].awardReceiveFlag = 1
                        that.fnChangeReadProgress(false)
                    }
                    that.isReadTaskRecive = false
                },
                fail: function() {
                    that.isReadTaskRecive = false
                }
            })
        },
        /**
         * 用户挽留
         */
        fnUserStay() {
            let that = this
            let showTimes = 1 // 展示次数
            let canShowUserStay = true // 能否展示
            // 防止二次点击
            if(!that.doubleClick) {
                that.doubleClick = true
                // 展示章节数及挽留数据判断
                if(that.isNewUser && that.chapterIndex <= that.userStayChapter && !that.isFromUserStay) {
                    // 展示次数判断
                    let date = that.fnGetCurrentDate()
                    let dataCache = ''
                    storage.get({
                        key: 'userStayShowTimes',
                        success: function(res) {
                            if(res) {
                                dataCache = JSON.parse(res)
                                showTimes = +dataCache.times + 1
                            }
                            if(dataCache && dataCache.date == date && showTimes > 3) {
                                canShowUserStay = false
                            }
                            if(canShowUserStay) {
                                // 展示用户挽留
                                that.userStay = true
                                that.userStayDetail = true
                                that.$app.$def.quickappLog([703, {
                                    qmap: {
                                        site: '1',
                                        bid: that.bookId,
                                        cid: that.chapterId,
                                        sid: that.sid
                                    }
                                }, 'user_stay_pop'], that)
                                storage.set({
                                    key: 'userStayShowTimes',
                                    value: JSON.stringify({
                                        date: date,
                                        times: showTimes,
                                    })
                                })
                            } else {
                                that.readPageOnBackPress()
                            }
                        },
                        fail: function (data, code) {
                            that.readPageOnBackPress() 
                        }
                    })
                } else {
                    that.readPageOnBackPress()
                }
            }
        },
        /**
         * 退出阅读广告弹窗显示
         */
        fnBackAdPopShow() {
            let backAdLoadTime = +this.backAdLoadTime
            this.isBackAdPopShow = true
            this.isBackAdLoad = true
            this.bShowDashboard = false
            this.backAdTimeout = setTimeout(() => {
                this.isBackAdLoad = false
            }, backAdLoadTime)
        },
        /**
         * 退出阅读广告弹窗关闭
         */
        fnBackAdPopClose(evt) {
            clearTimeout(this.backAdTimeout)
            this.isBackAdPopShow = false
            this.isBackAdLoad = false
            if(!(evt && evt.detail && evt.detail.type === 'close')) {
                this.readPageOnBackPress()
            }
        },
        /**
         * 退出阅读加桌弹窗
         */
        fnBackDialog() {
            let that = this;
            that.backBtnDialog = true;
            that.$app.shenceLog.log(that,'track','PopupExposure', {
                PositionName:'阅读页返回加桌弹窗',
                ChaptersNum:that.chapterIndex,
                DesktopState:that.$app.isAddDesktop?'Deleted':'Neversaved'
            });
        },
        /**
         * 退出阅读加桌次数
         */
        fnGetBackDialogTimes() {
            let that = this
            let date = that.fnGetCurrentDate()
            that.fnGetStorage('backDialogTimes').then(res => {
                try {
                    if(res && (res + '' !== '0')) {
                        res = JSON.parse(res)
                    }
                } catch(err) { console.log(err) }
                if(res && res.date == date && res.times) {
                    that.backDialogTimes = +res.times
                }
            })
        },
        /**
         * 广告关闭弹窗展示
         * @param {Object} evt [广告组件参数]
         */
        fnClosePopShow(evt) {
            if(evt && evt.detail && (evt.detail.adType == 'message' || evt.detail.adType == 'banner' || evt.detail.adType == 'pre' || evt.detail.adType == 'insert')) {
                this.currentAdCloseInfo = evt.detail;
            }
            this.isClosePopShow = true;
        },
        /**
         * 广告关闭弹窗关闭
         */
        fnClosePopClose() {
            this.isClosePopShow = false
        },
        /**
         * 广告确认关闭
         */
        fnConfirmClose() {
            let that = this

            that.fnClosePopClose()
            that.$broadcast('confirmClose', {
                adType: that.currentAdCloseInfo.adType,
                randomTime: that.currentAdCloseInfo.randomTime,
            })

            that.$app.shenceLog.log(that, 'track', 'ButtonClick', {
                PositionName: this.currentAdCloseInfo.adTypeText + '-去广告弹窗',
                ButtonName: '去广告弹窗-关闭',
                ButtonContent: '关闭本次广告',
                BookID: this.bookId || '',
                BookName: this.bookName || '',
                ChaptersNum: this.chapterIndex || '',
            })
        },
        /**
         * 跳转会员页面
         */
        fnRouterToMember() {
            let that = this

            that.fnClosePopClose()
            router.push({
                uri: '/Member',
                params: {
                    pageFrom: 'read',
                    bookId: that.bookId,
                    chapterId: that.chapterId,
                    referrer: '阅读页-' + that.currentAdCloseInfo.adTypeText
                }
            })

            that.$app.shenceLog.log(that, 'track', 'ButtonClick', {
                PositionName: this.currentAdCloseInfo.adTypeText + '-去广告弹窗',
                ButtonName: '去广告弹窗-购买VIP',
                ButtonContent: '购买VIP',
                BookID: this.bookId || '',
                BookName: this.bookName || '',
                ChaptersNum: this.chapterIndex || '',
            });
        },
        /**
         * 需要进入广告墙
         */
        fnNeedEnterAdWall() {
            let that = this
            if(!that.adWallParams || !that.adWallParams.details || that.adWallParams.details.length <= 0) {
                return
            }
            that.fnGetStorage('AdWallId_NoAd').then(res => {                        // 读取缓存中存储的免广激励墙的id，从2150下发的墙列表中筛选该id的墙信息
                if (!res) {
                    return false;
                }
                let details = that.adWallParams.details;
                for (let i = 0; i < details.length; i++) {
                    let item = details[i];
                    if (item && item.id === res && item.awardType === 5) {
                        that.adWallCacheInfo = item;
                        return true;
                    }
                }
            });
            that.fnGetStorage('EnterAdWall_' + that.bookId).then(res => {
                if(res) {
                    try {
                        let adWallInfo = JSON.parse(res)
                        if(!adWallInfo || !adWallInfo.wallId) {
                            return
                        }
                        let adWallCacheInfo = ''
                        let details = that.adWallParams.details
                        details.forEach(item => {
                            if(item.id === adWallInfo.wallId) {
                                adWallCacheInfo = item
                            }
                        })
                        if(!adWallCacheInfo || adWallInfo.awardType === 5) {    // 上次墙是免广奖励不需要再次进入墙
                            return
                        }
                        that.adWallCacheInfo = adWallCacheInfo
                        that.isNeedEnterAdWall = true
                    } catch (error) {
                        console.log(error)
                    }
                }
            })
        },
        /**
         * 跳转广告墙
         */
        fnRouterToAdWall() {
            this.$app.adWallData = {
                adWallInfo: Object.assign({}, this.adWallCacheInfo, {
                    adWallToken: this.adWallToken,
                    userTacticsVo: this.adWallParams && this.adWallParams.userTacticsVo || ''
                }),
                bookInfo: {
                    id: this.bookId,
                    name: this.bookName,
                    chapterId: this.chapterId,
                    chapterIndex: this.chapterIndex
                },
                adSetup: Object.assign({}, this.setupJson, {
                    bgColor: this.setupJson.bNight ? this.nightColor : this.setupJson.bgColor
                }),
                routerParams: {
                    bookId: this.bookId,
                    chapterId: this.chapterId,
                    chapterName: this.chapterName,
                    pageFrom: this.pageFrom,
                    SourcePosition: this.SourcePosition,
                    first_reading: this.first_reading,
                    omap: this.omap
                },
                noAdVipSwitch: this.noAdVipSwitch ? '1' : '0',
                brandAdSwitch: this.brandAdSwitch ? '1' : '0',
            }
            router.push({
                uri: '/AdWall'
            });
            this.isNeedEnterAdWall = false;
            this.adWallCacheInfo = '';
        },
        /**
         * 一键加桌成功处理
         * @param {Object} evt 参数值
         */
        oneshortComplete(evt) {
            let position = evt.detail.position
            let result = evt.detail.result
            let extra = evt.detail.extra
            switch (position) {
                case 'readback':
                    // 解决返回到首页红条不消失的bug
                    if(result == 1) {
                        this.$app.readbackOnekey = 1
                    }
                    this.readPageOnBackPress();
                    break;
                case 'warning':
                    this.isWarning = false;
                    this.fnGetNextCut()
                    break;
                case 'afterauth':
                    this.isAuthShortcutPopShow = false
                    this.isAuthShortcutShow = false
                    if(result == 1) {
                        this.hasAuthShortcut = true
                        this.hasShowSuccess = true
                    }
                    break;
            }
            if(result == 1 && position != 'readback') {
                this.fnReportShortcutSuccess(position, extra)
            }
        },
        /**
         * 加桌成功上报
         * @param {String} position 位置信息
         * @param {String} extrta 额外信息
         */
        fnReportShortcutSuccess(position, extra = '') {
            let that = this
            that.$app.$def.requestData(that, {
                interface: `/glory/fastapp/2107`,
                data: {
                    isas: 1,
                    isAuthShortcutAward: extra && extra === 'award' ? 1 : 0
                },
                succ: function (res) {
                    if(res.data && res.data.freeLimitAll) {
                        that.$app.shortSuccessText = res.data.freeLimitAll
                    }
                    if(res.data && res.data.customAddDeskTip) {
                        prompt.showToast({
                            message: res.data.customAddDeskTip
                        })
                    }
                    if(position == 'warning') {
                        that.showShortSuccess()
                    }
                },
                error: function (code) {
                    if(position == 'warning') {
                        that.showShortSuccess()
                    }
                }
            })
        },
        /**
         * 更新浏览记录缓存
         */
        fnSetHistoryStorage() {
            let that = this;
            storage.get({
                key: 'bookHistory',
                success: function(cacheBookList) {
                    let currentBookInfo = {
                        bookId: that.bookId,
                        bookName: that.bookName,
                        chapterId: that.chapterId, 
                        chapterIndex: that.chapterIndex,
                        inBookshelf: that.isInBookShelf ? 1 : 2,
                        omap: that.omap || '',
                    }
                    let bookList = [];
                    if(cacheBookList) {
                        try {
                            bookList = JSON.parse(cacheBookList);
                        } catch(err) { console.log(err) }
                        let index = bookList.findIndex(bookInfo => bookInfo.bookId == that.bookId);
                        if(index > -1) {
                            let newBookInfo = Object.assign({}, bookList[index], currentBookInfo);
                            bookList.splice(index, 1);
                            bookList.unshift(newBookInfo);
                        } else {                       
                            bookList.unshift(currentBookInfo);
                        }
                    }else {
                        bookList.unshift(currentBookInfo);
                    }
                    if(bookList.length > 45) {
                        bookList = bookList.slice(0, 45);
                    }
                    storage.set({
                        key: 'bookHistory',
                        value: JSON.stringify(bookList)
                    });
                }
            });
        },
        /**
         * 添加书籍到书架
        */
        fnAddBookShelf: _.fnThrottle(function() {
            if (this.isInBookShelf) {
                return false;
            }
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                PositionName: '加入书架-阅读页',
                ButtonName: '阅读页加入书架',
                ButtonContent: '加入书架',
                BookID: this.bookId || ''
            });
            let data = {
                bookId: this.bookId,
                chapterId: this.chapterId,
                omap: this.omap ? JSON.stringify(this.omap) : '',
                title: '阅读页'
            }
            let result = _.fnAddBookToBookShelf.call(this, data);                       // 请求2822加入书架接口
            result.then(res => {
                if (!res) {
                    prompt.showToast({
                        message: '加入书架失败'
                    });
                    return false;
                }
                this.isInBookShelf = true;
                prompt.showToast({
                    message: res.data.message || '已加入书架'
                });
                this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                    PositionName: '加入书架-阅读页',
                    ButtonName: '阅读页加入书架成功',
                    ButtonContent: '加入书架',
                    BookID: this.bookId || ''
                });
            });
        }),
        /**
         * 授权后加桌弹窗关闭
         */
        fnCloseAuthShortcut() {
            this.isAuthShortcutShow = false
            this.isAuthShortcutPopShow = false
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                PositionName: '一键加桌-阅读页提前加桌',
                ButtonName: '关闭',
                BookID: this.bookId || ''
            });
        },
        /**
         * 获取deviceInfo
         */
        fnGetDeviceInfo() {
            let that = this
            device.getInfo({
                success: function(ret) {
                    that.brand = ret.brand.toLowerCase()
                    if(ret.platformVersionCode < 1050) {
                        that.canListen = false
                    }
                }
            })   
        },
        /**
         * 插页激励视频缓存读取
         */
        fnGetInsertVideoCache() {
            let that = this
            let date = that.fnGetCurrentDate()
            that.fnGetStorage('insertVideoCache').then(res => {
                try {
                    if(res && (res + '' !== '0')) {
                        res = JSON.parse(res)
                    }
                } catch(err) { console.log(err) }
                if(res && res.date == date && res.showTimes) {
                    that.readTipCurrentShowTimes = +res.showTimes
                } else {
                    that.readTipCurrentShowTimes = 0
                }
                if(res && res.date == date && res.touchLimit) {
                    that.insertVideoCurrentTouchLimit = +res.touchLimit
                } else {
                    that.insertVideoCurrentTouchLimit = 0
                }
            })
        },
        /**
         * 插页激励视频更新缓存
         */
        fnSetInsertVideoCache() {
            let date = this.fnGetCurrentDate()
            let insertVideoCache = {
                date: date,
                showTimes: +this.readTipCurrentShowTimes,
                touchLimit: +this.insertVideoCurrentTouchLimit
            }
            this.fnSetStorage('insertVideoCache', JSON.stringify(insertVideoCache))
        },
        /**
         * 章首激励视频缓存读取
         */
        fnGetPreVideoCache() {
            let that = this
            let date = that.fnGetCurrentDate()
            that.fnGetStorage('preVideoCache').then(res => {
                try {
                    if(res && (res + '' !== '0')) {
                        res = JSON.parse(res)
                    }
                } catch(err) { console.log(err) }
                if(res && res.popLimit) {
                    that.preVideoCurrentPopLimit = +res.popLimit
                } else {
                    that.preVideoCurrentPopLimit = 0
                }
            }) 
        },
        /**
         * 章首激励视频更新缓存
         */
        fnSetPreVideoCache() {
            let date = this.fnGetCurrentDate()
            let preVideoCache = {
                date: date,
                popLimit: +this.preVideoCurrentPopLimit
            }
            this.fnSetStorage('preVideoCache', JSON.stringify(preVideoCache))
        },
        /**
         * 插页提示展示次数增加
         */
        fnReadTipAppear() {
            if(this.readTipCurrentShowTimes > this.readTipShowTimes || this.readTipShowTimes <= 0) {
                return
            }
            this.readTipCurrentShowTimes++
            this.fnSetInsertVideoCache()
        },
        fnPreVideoPackageAppear() {
            if(this.preVideoCurrentPopLimit > this.preVideoPopLimit || this.preVideoPopLimit <= 0) {
                return
            }
            this.fnOperationExposure('preVideoPackage')
            this.preVideoCurrentPopLimit++
            this.fnSetPreVideoCache()
        },
        /**
         * 插页视频触碰
         */
        fnInsertVideoTouch() {
            if(!(this.insertVideoTouchLimit > 0 && this.insertVideoTouchRatio > 0 && this.insertVideoCurrentTouchLimit < this.insertVideoTouchLimit)) {
                return
            }
            if(this.isInsertVideoTouch) {
                return
            }
            this.isInsertVideoTouch = true
            setTimeout(() => {
                this.isInsertVideoTouch = false
            }, 1500)
            setTimeout(() => {
                if(!this.isInsertVideoClick) {
                    let ratio = this.insertVideoTouchRatio
                    let random = Math.floor(Math.random() * 100) + 1 // 1-100
                    if(random <= ratio) {
                        this.insertVideoCurrentTouchLimit++
                        this.fnSetInsertVideoCache()
                        this.fnInsertVideo(true)
                    }
                }
            }, 500)
        },
        /**
         * 章首视频点击
         */
        fnInsertVideoClick() {
            if(!(this.insertVideoTouchLimit > 0 && this.insertVideoTouchRatio > 0 && this.insertVideoCurrentTouchLimit < this.insertVideoTouchLimit)) {
                return
            }
            if(this.isInsertVideoClick) {
                return
            }
            this.isInsertVideoClick = true
            setTimeout(() => {
                this.isInsertVideoClick = false
            }, 1000)
        },
        /**
         * 章首视频播放
         */
        fnPreVideo() {
            if(this.isPreVideoLoading) {
                return
            }
            this.isPreVideoLoading = true
            setTimeout(() => {
                this.isPreVideoLoading = false
            }, 3000)
            this.$broadcast('preVideoInit')
            this.fnOperationClick('preVideoPackage')
        },
        /**
         * 章首红包关闭
         */
        fnPreVideoPopClose() {
            this.isPreVideoPackageShow = false
        },
        /**
         * 章首弹窗点击
         */
        fnPreVideoSwitch() {
            if(this.preVideoPopLimit > 0 && this.preVideoCurrentPopLimit < this.preVideoPopLimit) {
                this.isPreVideoPopShow = false
                this.isPreVideoPackageShow = true
                this.fnOperationClick('preVideoPop', { isVideo: false })
            } else {
                this.fnPreVideo()
                this.fnOperationClick('preVideoPop', { isVideo: true })
            }
        },
        /**
         * 章首视频奖励
         */
        fnPreVideoAward() {
            let that = this
            that.preVideoNums--
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2141',
                data: { taskId: that.preVideoTaskId },
                succ: function (res) {
                    if(res.retCode == 0 && res.data && res.data.code == 0) {
                        if(res.data.limitNum && res.data.limitNum > 0) {
                            that.preVideoNums = res.data.limitNum
                        }
                        if(res.data.videoTaskVo) {
                            that.preNextAdInfo = res.data.videoTaskVo  
                            if(res.data.videoTaskVo.adPositionId)  {
                                that.preNextVideoId = res.data.videoTaskVo.adPositionId
                            }
                            that.preNextVideoSwitch = true
                        } else {
                            that.preNextVideoSwitch = false
                        }
                        that.isPreVideoAwardShow = true
                        that.fnOperationExposure('preVideoNext')
                    }
                }
            })
        },
        /**
         * 跳转签到页
         */
        fnRouterToSign() {
            this.fnOperationClick('preVideoNext', { isVideo: false })
            router.push({
                uri: '/Sign',
                sourcePage:'阅读页-兑换3元到微信零钱'
            })
        },
        /**
         * 章首视频继续播放
         */
        fnPreNextVideo() {
            if(this.isPreNextVideoLoading) {
                return
            }
            this.isPreNextVideoLoading = true
            setTimeout(() => {
                this.isPreNextVideoLoading = false
            }, 3000)
            this.$broadcast('preNextVideoInit')
            this.fnOperationClick('preVideoNext', { isVideo: true })
        },
        /**
         * 章首视频继续奖励
         */
        fnPreNextVideoAward() {
            let that = this
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2141',
                data: { taskId: that.preNextAdInfo.taskId },
                succ: function (res) {
                    if(res && res.data) {
                        that.isPreVideoAwardShow = false
                        prompt.showToast({
                            message: res.data.message || '恭喜您获得金币'
                        })
                    }
                }
            })
        },
        /**
         * 章首奖励弹窗关闭
         */
        fnPreVideoAwardClose() {
            this.isPreVideoAwardShow = false
        },
        /**
         * 章首弹窗倒计时
         */
        fnPreVideoPopTimeout() {
            clearTimeout(this.preVideoPopTimeout)
            if(this.preVideoPopCount <= 0 || !this.$visible || this.isOpenScreenShow) {
                this.isPreVideoPopShow = false
                this.preVideoPopCount = 3
            } else {
                this.preVideoPopTimeout = setTimeout(() => {
                    this.preVideoPopCount--
                    this.fnPreVideoPopTimeout()
                }, 1000)
            }
        },
        /**
         * 内容区域点击处理
         */
        fnContentClick() {
            if(this.isPreVideoPopShow) {
                clearTimeout(this.preVideoPopTimeout)
                this.isPreVideoPopShow = false
                this.preVideoPopCount = 3
            }
        },
        /**
         * 内容区域展示处理
         */
        fnContentAppear(item) {
            if(item.type === 'content' && item.lines === 0 && (this.chapterIndex > 1 || this.chapterIndex === 1 && this.hasInsertAd)) {
                this.firstContentShow = true
                this.fnPreVideoPopSwitch()
            }
        },
        /**
         * 运营位曝光
         * @param {String} position 位置信息
         * @param {Object} extraInfo 额外信息信息
         */
        fnOperationExposure(position, extraInfo = {}) {
            let that = this
            let tacticsInfo = {}
            if(position === 'preVideoPop') {
                tacticsInfo = {
                    OperationPosition: '章首激励视频浮层',
                    OperationID: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.id || '',
                    OperationName: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.name || '',
                    TacticsId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntID || that.preVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntName || that.preVideoTactics.userTacticsVo.shuntName) || '',
                }
            }
            if(position === 'preVideoPackage') {
                tacticsInfo = {
                    OperationPosition: '章首激励视频红包弹窗',
                    OperationID: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.id || '',
                    OperationName: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.name || '',
                    TacticsId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntID || that.preVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntName || that.preVideoTactics.userTacticsVo.shuntName) || '',
                }  
            }
            if(position === 'preVideoNext') {
                tacticsInfo = {
                    OperationPosition: '章首激励视频奖励弹窗',
                    OperationID: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.id || '',
                    OperationName: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.name || '',
                    TacticsId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntID || that.preVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntName || that.preVideoTactics.userTacticsVo.shuntName) || '',
                }  
            }
            if(position === 'insertVideo') {
                tacticsInfo = {
                    OperationPosition: '插页激励视频',
                    OperationID: that.insertVideoTactics.operationInfo && that.insertVideoTactics.operationInfo.id || '',
                    OperationName: that.insertVideoTactics.operationInfo && that.insertVideoTactics.operationInfo.name || '',
                    TacticsId: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.insertVideoTactics.userTacticsVo && (that.insertVideoTactics.userTacticsVo.ShuntID || that.insertVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.insertVideoTactics.userTacticsVo && (that.insertVideoTactics.userTacticsVo.ShuntName || that.insertVideoTactics.userTacticsVo.shuntName) || '',
                }  
            }
            if(position === 'aliPayRedVideo') {
                tacticsInfo = {
                    OperationPosition: '章末支付宝红包',
                    OperationType: '章末红包任务',
                    OperationID: that.aliPayRedVideoTactics.operationInfo && that.aliPayRedVideoTactics.operationInfo.id || '',
                    OperationName: that.aliPayRedVideoTactics.operationInfo && that.aliPayRedVideoTactics.operationInfo.name || '',
                    TacticsId: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.aliPayRedVideoTactics.userTacticsVo && (that.aliPayRedVideoTactics.userTacticsVo.ShuntID || that.aliPayRedVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.aliPayRedVideoTactics.userTacticsVo && (that.aliPayRedVideoTactics.userTacticsVo.ShuntName || that.aliPayRedVideoTactics.userTacticsVo.shuntName) || '',
                }  
            }
            let operationInfo = Object.assign({}, tacticsInfo, {
                BookID: that.bookId || '',
                ChaptersID: that.chapterId,
                BookName: that.bookName || '',
                ChaptersNum: that.chapterIndex || '',
            })
            that.$app.shenceLog.log(that, 'track', 'OperationExposure', operationInfo);
        },
        /**
         * 运营位点击
         * @param {String} position 位置信息
         * @param {Object} extraInfo 额外信息信息
         */
        fnOperationClick(position, extraInfo = {}) {
            let that = this
            let tacticsInfo = {}
            if(position === 'preVideoPop') {
                tacticsInfo = {
                    OperationPosition: '章首激励视频浮层',
                    OperationID: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.id || '',
                    OperationName: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.name || '',
                    TacticsId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntID || that.preVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntName || that.preVideoTactics.userTacticsVo.shuntName) || '',
                }
                if(extraInfo.isVideo) {
                    tacticsInfo.PositionName = '章首激励视频浮层-激励视频'
                } else {
                    tacticsInfo.PositionName = '章首激励视频浮层-红包弹窗'
                }
            }
            if(position === 'preVideoPackage') {
                 tacticsInfo = {
                    OperationPosition: '章首激励视频红包弹窗',
                    OperationID: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.id || '',
                    OperationName: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.name || '',
                    TacticsId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntID || that.preVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntName || that.preVideoTactics.userTacticsVo.shuntName) || '',
                }  
            }
            if(position === 'preVideoNext') {
                 tacticsInfo = {
                    OperationPosition: '章首激励视频奖励弹窗',
                    OperationID: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.id || '',
                    OperationName: that.preVideoTactics.operationInfo && that.preVideoTactics.operationInfo.name || '',
                    TacticsId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.preVideoTactics.userTacticsVo && that.preVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntID || that.preVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.preVideoTactics.userTacticsVo && (that.preVideoTactics.userTacticsVo.ShuntName || that.preVideoTactics.userTacticsVo.shuntName) || '',
                }
                if(extraInfo.isVideo) {
                    tacticsInfo.PositionName = '章首激励视频奖励弹窗-福利页入口'
                } else {
                    tacticsInfo.PositionName = '章首激励视频奖励弹窗-激励视频'
                }
            }
            if(position === 'insertVideo') {
                tacticsInfo = {
                    OperationPosition: '插页激励视频',
                    OperationID: that.insertVideoTactics.operationInfo && that.insertVideoTactics.operationInfo.id || '',
                    OperationName: that.insertVideoTactics.operationInfo && that.insertVideoTactics.operationInfo.name || '',
                    TacticsId: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.tacticsId || '',
                    TacticsName: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.tacticsName || '',
                    SourceId: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.sourceId || '',
                    SourceName: that.insertVideoTactics.userTacticsVo && that.insertVideoTactics.userTacticsVo.sourceName || '',
                    ShuntId: that.insertVideoTactics.userTacticsVo && (that.insertVideoTactics.userTacticsVo.ShuntID || that.insertVideoTactics.userTacticsVo.shuntID) || '',
                    ShuntName: that.insertVideoTactics.userTacticsVo && (that.insertVideoTactics.userTacticsVo.ShuntName || that.insertVideoTactics.userTacticsVo.shuntName) || '',
                }
                if(extraInfo.isTouch) {
                    tacticsInfo.PositionName = '插页激励视频-误触'
                } else {
                    tacticsInfo.PositionName = '插页激励视频-正常'
                }
            }
            let operationInfo = Object.assign({}, tacticsInfo, {
                BookID: that.bookId || '',
                BookName: that.bookName || '',
                ChaptersNum: that.chapterIndex || '',
                ChaptersID: that.chapterId || '',
            })
            that.$app.shenceLog.log(that, 'track', 'OperationClick', operationInfo);
        },
        /**
         *  按钮点击
         * @param {String} position 位置信息
         * @param {Object} extraInfo 额外信息信息
         */
        fnButtonClick(position, extraInfo = {}) {
            let that = this
            let clickInfo = {}
            if(position === 'listen') {
                if(extraInfo.isListen) {
                    clickInfo = {
                        PositionName: '听书',
                        ButtonName: extraInfo.isListen,
                    }
                } else {
                    clickInfo = {
                        PositionName: '听书',
                        ButtonName: '听书-开通会员',
                    }
                }
            }
            let reportInfo = Object.assign({}, clickInfo, {
                BookID: that.bookId || '',
                BookName: that.bookName || '',
                ChaptersNum: that.chapterIndex || '',
            })
            that.$app.shenceLog.log(that, 'track', 'ButtonClick', reportInfo);
        },
        /**
         * 章首视频弹窗显示判断
         */
        fnPreVideoPopSwitch() {
            // 满足页面展示
            if(this.$visible && !this.isOpenScreenShow) {
                // 满足时机
                if(this.preVideoSwitch && (this.chapterIndex > 1 || this.chapterIndex === 1 && this.hasInsertAd) && this.firstContentShow && !this.hasPreVideoPopShow) {
                    // 满足时配置
                    if(this.preVideoNums && this.preVideoNums > 0 && this.chapterIndex >= this.preVideoStart && (this.chapterIndex - this.preVideoStart) % this.preVideoSpace === 0) {
                        this.hasPreVideoPopShow = true
                        this.isPreVideoPopShow = true
                        this.fnPreVideoPopTimeout()
                    }
                } 
            }
        },
        /**
         * 章首和插页广告展示判断
         * @param {Number} index 当前页数
         */
        fnAdInRange(index) {
            if(this.hasInsertAd && this.hasGetAdSetting) {
                const content = this.contentArr
                const insertAdPreLoad = this.insertAdPreLoad
                const currentPage = this.currentPage
                //判断 能否展示章末红包或者章末推荐
                this.canLastPageRec = content && content[content.length - 2].type !== 'ad' ? true : false
                this.isPreAdPage = content && content[index] && content[index].type === 'preAd'
                if(this.isPreAdPage && !this.isNewReaderMask) {
                    this.bShowDashboard = false 
                }
                if(this.isPreAdPage && this.isShortCutShow) {
                    this.isShortCutShow = false
                    setTimeout(() => {
                        this.isShortCutShow = true
                    }, 1000)
                }
                const nearIndex = this.fnFindNearIndex(index)
                if(nearIndex === -1) {
                    return
                }
                if(currentPage === 0) {
                    return
                }
                if(this.chapterState === 'pre' && currentPage <= insertAdPreLoad + 1) {
                    return
                }
                const farIndex = this.fnFindFarIndex()
                if(this.chapterState === 'next' && currentPage > farIndex) {
                    return
                }
                if(this.currentInsertIndex != nearIndex) {
                    this.isInsertAdPage = false
                }
                this.currentInsertAd = content[nearIndex].adSoltId
                this.currentInsertCount = content[nearIndex].readerCount
                this.currentInsertIndex = nearIndex
                this.insertMinPage = (nearIndex - insertAdPreLoad) < 0 ? 0 : (nearIndex - insertAdPreLoad)
                this.insertMaxPage = nearIndex + insertAdPreLoad
                setTimeout(() => {
                    this.isInsertAdPage = true
                }, 0)
                if(index === nearIndex && this.isShortCutShow) {
                    this.isShortCutShow = false
                    setTimeout(() => {
                        this.isShortCutShow = true
                    }, 200)
                }
            }
        },
        /**
         * 寻找最近的插页数据
         * @param {Number} index 当前页数
         * @return {Number} 最近的索引
         */
        fnFindNearIndex(index) {
            const content = this.contentArr
            if(!content || !content.length) {
                return -1
            }
            if(content[index] && content[index].type === 'ad') {
                return index
            }
            let retIndex = -1
            let distance = -1
            for(let i = 0; i < content.length; i++) {
                if(content[i].type === 'ad') {
                    if(distance === -1 || Math.abs(i - index) < distance) {
                        retIndex = i
                        distance = Math.abs(i - index)
                    }
                }
            }
            return retIndex
        },
        /**
         * 寻找最远的插页数据
         * @param {Number} index 当前页数
         * @return {Number} 最近的索引
         */
        fnFindFarIndex() {
            const content = this.contentArr
            if(!content || !content.length) {
                return -1
            }
            let retIndex = -1
            for(let i = content.length - 1; i >= 0; i--) {
                if(content[i].type === 'ad') {
                    retIndex = i
                    break;
                }
            }
            return retIndex
        },
        fnPreAdBlockShow() {
            this.isPreAdBlockShow = true
        },
        /**
         * 触碰事件
         */
        fnTouchMove(e) {
            if(e.changedTouches && e.changedTouches[0]) {
                if(this.touchStartPosition && this.touchStartPosition !== 0) {
                    if(e.changedTouches[0].pageX - this.touchStartPosition > 10) {
                        this.hasTouchMove = 'right'
                    }
                    if(e.changedTouches[0].pageX - this.touchStartPosition < 10) {
                        this.hasTouchMove = 'left'
                    }
                } else {
                    this.touchStartPosition = e.changedTouches[0].pageX
                }
            }
        },
        // 关闭激励墙弹窗
        fnAdWallEntryPopupClose () {
            this.adWallEntryPopup.show = false;                                         // 激励墙入口弹窗关闭
        },
        // 激励墙入口弹窗，进入激励墙按钮点击
        fnAdWallEntryPopupConfirm () {
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                PositionName: '阅读页免广告激励墙弹窗',
                BookID: this.bookId || '',
                BookName: this.bookName || '',
                ChaptersNum: this.chapterIndex || '',
                ButtonName: '阅读页免广告激励墙弹窗按钮点击',
                ButtonContent: '看资讯领双重奖励'
            });
            this.adWallEntryPopup.show = false;                                         // 激励墙入口弹窗关闭
            router.push({
                uri: '/AdWall',
            });
        },
        // 进入免广激励墙
        fnEnterReduceAdWall () {
            if (!this.adWallCacheInfo || this.adWallCacheInfo.awardType !== 5) {        // 非免广拦截
                return false;
            }
            this.fnRouterToAdWall();                                                    // 进入激励墙
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                PositionName: '阅读页顶部免广告激励墙按钮',
                BookID: this.bookId || '',
                BookName: this.bookName || '',
                ChaptersNum: this.chapterIndex || '',
                ButtonName: '阅读页顶部免广告按钮点击',
                ButtonContent: '延长免广告'
            });
        },
        // 校验免广时长是否到期
        fnCheckReduceAdTime() {
            if (!this.adWallReduceAd || !this.adWallReduceAd.timestamp || !this.adWallReduceAd.surplusTimes) {
                this.adWallReduceAd.isExpired = true;                                                   // 已过期
                return false;
            }
            // let minTimes = 15 * 60 * 1000;                                                           // 免广时长低于15分钟时，展示顶部免广入口按钮
            let allSurplusTimes = this.adWallReduceAd.surplusTimes * 1000;                              // 接口返回的免广剩余时长（秒）
            let redisSurplusTimes = this.adWallReduceAd.redisSurplusTimes * 1000;                       // redis过期剩余时长
            let times = Date.now() - this.adWallReduceAd.timestamp;                                     // 2158接口响应到此刻的时间差值
            let surplusTimes = allSurplusTimes - times;                                                 // 当前剩余时长
            this.adWallReduceAd.isExpired = surplusTimes <= 0;                                          // 免广是否过期
            this.adWallReduceAd.isRedisExpired = times >= redisSurplusTimes;                            // redis是否过期
            this.isNoAd = !this.adWallReduceAd.isExpired;                                               // 页面免广
            // this.adWallReduceAd.canShowWallEntryBtn = surplusTimes <= minTimes;                      // 是否低于15分钟时，是否可以展示顶部免广入口按钮
        },
        // 请求章末推荐 开关
        fnGetRecSwitch() {
            if(this.needRequestRec && (!this.isSupportNewReader || this.isSupportNewReader && this.canLastPageRec && !this.chapterEndRedTask.isReady) && !this.hasRequestRec) {
                this.hasRequestRec = true
                this.fnRequestRec()
            }
        },
        // 设置 请求章末推荐 的 条件
        fnSetRecParams() {
            if(this.hasGetServer && this.hasLoadChapter) {
                let hasAliPayRedTask = this.redTaskExpireTime !== 0
                let aliPayRedTaskComplete = this.chapterEndRedTask.clickCompletedNum === this.chapterEndRedTask.awardArray.length
                let isAliPayRedExpire = new Date().getTime() - this.redTaskExpireTime >= 0
                if(hasAliPayRedTask && isAliPayRedExpire) {
                    this.fnRefreshAliPayRedTask();
                }
                let needRequestRec = this.chapterEndRec.startChapter <= this.chapterIndex && (this.chapterIndex - this.chapterEndRec.startChapter) % this.chapterEndRec.chapterInterval === 0 ? true : false;
                let needRenderCer = hasAliPayRedTask && !aliPayRedTaskComplete && !isAliPayRedExpire && this.chapterEndRedTask.beginIndex <= this.chapterIndex && (this.chapterIndex - this.chapterEndRedTask.beginIndex) % this.chapterEndRedTask.showInterval === 0 ? true : false;
                if(needRenderCer) {
                    this.chapterEndRedTask.isReady = true;
                }
                this.needRequestRec = needRequestRec || needRenderCer;
                this.fnGetRecSwitch()
            }
        },
        fnRecClick(){
            // 防抖
            if (this.recClickTimer) {
                clearTimeout(this.recClickTimer)
            }
            this.needStopOperator = true
            this.recClickTimer = setTimeout(() => {
                this.needStopOperator = false
            }, 300)
        },
        /**
         * 竖版 章末推荐 书籍曝光打点
         */
        fnBookAppear(bookInfo, idx) {
            let that = this
            let trigger_time = that.$app.$def.getLogTime()
            let omap = {
                origin: 'zmtj',
                channel_id:'zmtj',
                channel_name:'章末推荐',
                channel_pos:0,
                column_id:'zmtj_anfz',
                column_name:'章末推荐按钮翻章',
                column_pos:1,
                content_id: bookInfo.bookId,
                content_pos: idx,
                rec_id: that.dbRecommend.recId || '',
                model_id: that.dbRecommend.modelId || '',
                log_id: that.dbRecommend.logId || '',
                exp_id: that.dbRecommend.expId || '',
                cur_bookId: that.bookId,
                trigger_time: trigger_time
            }
            that.$app.$def.quickappLog([706, {
                qmap: {
                    oaid: that.$app && that.$app.oaid || ''
                },
                omap: omap
            }], that)

            that.$app.shenceLog.log(that, 'track', 'OperationExposure', {
                BookID: that.bookId, // 书籍ID  阅读页的
                BookName: that.bookName, // 书籍名称
                SourceId: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.sourceId || '',// 策略层id
                SourceName: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.sourceName || '', // 策略层名称
                TacticsId: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.tacticsId || '', // 策略id
                TacticsName: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.tacticsName || '', // 策略名称
                OperationName: '章末推荐',
                PositionName: '章末推荐-按钮翻章',
                RBookID: bookInfo.bookId, // 当前 点击 或 曝光 书籍ID
                ChaptersID: that.chapterId || '',
            })
        },
        /**
         * 竖版 章末推荐 跳转书籍详情
         */
        fnRouteToBookDetail(bookInfo, idx) {
            let that = this
            let trigger_time = that.$app.$def.getLogTime()
            let omap = {
                origin: 'zmtj',
                channel_id:'zmtj',
                channel_name:'章末推荐',
                channel_pos:0,
                column_id:'zmtj_anfz',
                column_name:'章末推荐按钮翻章',
                column_pos:1,
                content_id: bookInfo.bookId,
                content_pos: idx,
                rec_id: that.dbRecommend.recId || '',
                model_id: that.dbRecommend.modelId || '',
                log_id: that.dbRecommend.logId || '',
                exp_id: that.dbRecommend.expId || '',
                cur_bookId: that.bookId,
                trigger_time: trigger_time
            }

            router.push({
                uri: '/BookDetail',
                params: {
                    bookId: bookInfo.bookId,
                    SourcePosition: '章末推荐',
                    omap: omap,
                    sourcePage: '阅读页-竖版章末推荐'
                }
            })

            that.$app.$def.quickappLog([702, {
                qmap: {
                    oaid: that.$app && that.$app.oaid || ''
                },
                omap: omap
            }, 'book_click'], that)

            that.$app.shenceLog.log(that, 'track', 'OperationClick', {
                BookID: that.bookId || '', // 书籍ID  阅读页的
                BookName: that.bookName || '', // 书籍名称
                ChaptersNum: that.chapterIndex || '', // 章节索引
                SourceId: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.sourceId || '',// 策略层id
                SourceName: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.sourceName || '', // 策略层名称
                TacticsId: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.tacticsId || '', // 策略id
                TacticsName: that.dbRecommend.userTacticsVo && that.dbRecommend.userTacticsVo.tacticsName || '', // 策略名称
                OperationName: '章末推荐',
                PositionName: '章末推荐-按钮翻章',
                ChaptersID: that.chapterId || '',
                RBookID: bookInfo.bookId
            })
        },
        /**
         * 添加章末推荐的书至书架
         * @param   {Object}    bookInfo    [书籍信息]
         * @param   {Number}    idx         [该本书的索引]
         * @param   {Object}    evt         [事件对象]
        */
        fnAddBookshelfRec(bookInfo, idx, evt) {
            if (bookInfo.inBookshelf) {
                return false;
            }
            this.fnStopPropagation(evt);
            if (bookInfo.isAddingBookShelf) {           // 防连点
                return false;
            }
            bookInfo.isAddingBookShelf = true;
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                PositionName: '加入书架-竖版章末推荐',
                ButtonName: '竖版章末推荐加入书架',
                ButtonContent: '加入书架',
                BookID: bookInfo.bookId || ''
            });
            let omap = {
                origin: 'zmtj',
                channel_id: 'zmtj',
                channel_name: '章末推荐',
                channel_pos: 0,
                column_id: 'zmtj_anfz',
                column_name: '章末推荐按钮翻章',
                column_pos: 1,
                content_id: bookInfo.bookId,
                content_pos: idx,
                rec_id: this.dbRecommend.recId || '',
                model_id: this.dbRecommend.modelId || '',
                log_id: this.dbRecommend.logId || '',
                exp_id: this.dbRecommend.expId || '',
                cur_bookId: this.bookId,
                trigger_time: this.$app.$def.getLogTime()
            }
            let data = {
                bookId: bookInfo.bookId,
                chapterId: bookInfo.chapterId || '',
                omap: JSON.stringify(this.omap),
                title: '竖版章末推荐'
            }
            let result = _.fnAddBookToBookShelf.call(this, data);                       // 请求2822加入书架接口
            result.then(res => {
                bookInfo.isAddingBookShelf = false;
                if (!res) {
                    prompt.showToast({
                        message: '加入书架失败'
                    });
                    return false;
                }
                bookInfo.inBookshelf = true;
                prompt.showToast({
                    message: '已加至书架，记得去书架看书哦'
                });
                this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                    PositionName: '加入书架-竖版章末推荐',
                    ButtonName: '竖版章末推荐加入书架成功',
                    ButtonContent: '加入书架',
                    BookID: bookInfo.bookId || ''
                });
            });
        },
        // 去广告弹窗 曝光
        fnClosePopAppear() {
            this.$app.shenceLog.log(this, 'track', 'PopupExposure', {
                PositionName: this.currentAdCloseInfo.adTypeText + '-去广告弹窗',
                BookID: this.bookId,
                BookName: this.bookName,
                ChaptersNum: this.chapterIndex,
            });
        },
        // 进入福利中心
        fnEnterToAwardCenter() {
            this.$app.shenceLog.log(this, 'track', 'ButtonClick', {
                PositionName: '阅读任务入口',
                ButtonName: this.readAwardObj.isNewAwardStyle ? (this.readTotalTime >= this.readTaskAll[this.readTaskAll.length - 1].duration ? '新样式-完成' : '新样式-未完成') : '老样式',
                BookID: this.bookId || ''
            });
            router.push({
                uri:'/Sign',
                params: {
                    sourcePage: '阅读页-阅读任务入口'
                }
            })
        },
        /**
         * 异常处理上报
         * @param   {String}    type    [类型]
         * @param   {Object}    detail  [详情]
        */
        fnExceptionReport(type = 0, detail = '') {
            let that = this
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2179',
                data: {
                    type,
                    detail
                },
                succ: function() {},
                fail: function() {}
            });
        },
        fnCloseAddDesk() {
            this.isCloseAddDesk = true
        },
        // 自动听书
        fnAutoListenSwitch() {
            if (!this.hasLoadChapter || !this.canListen || !(this.listenSwitch || this.extraListenSwitch) || !this.isAutoListen) {
                return false;
            }
            this.startListen();
            this.isAutoListen = false;                     // 重置自动听书参数，自动听书为一次性行为
        },
        // 显示举报弹窗
        fnShowComplaintPop() {
            this.isClosePopShow = false;
            this.isShowComplaintPopUp =true;
        },
        // 关闭举报弹窗 
        fnCloseComplaintPopUp() {
            this.isShowComplaintPopUp = false;
        },
        fnComplaintPopUpExposure() {
            let shenceReportInfo = {
                BookID: this.bookId, // 当前书籍Id
                BookName: this.bookName, // 当前书籍名称
                ChaptersNum: this.chapterIndex, // 章节序号
                PositionName: '举报弹窗' // 位置名称
            };
            this.$app.shenceLog.log(this, 'track', 'PopupExposure', shenceReportInfo);
        },
        fnCheckScStart() {
            let that = this
            if(!that.$app.isScStart) {
                shortcut.hasInstalled({
                    success: function(res) {
                        let fnGetCreateTime = that.$app.$def.fnGetCreateTime.call(that)
                        let fnGetInstallTime = that.$app.$def.fnGetInstallTime.call(that)
                        Promise.all([fnGetCreateTime, fnGetInstallTime]).then(result => {
                            if(result[0] || result[1]) {
                                that.$app.shenceLog.fnSetCommonArgs({
                                    RegisterDate: result[0] || result[1] 
                                })
                            }
                            let property = {
                                StartPath: that.$page.uri,
                                BookID: that.bookId ? that.bookId : '无',
                                DesktopState: res ? 'Saved' : 'Notsaved',
                            }
                            that.$app.shenceLog.log(that, 'appLaunch', '', property);
                            that.$app.isScStart = true
                        })
                    },
                    fail: function() {
                        that.$app.$def.quickappLog([703, {
                            site: '3',
                        }, 'get_shortcut_install_fail'], that);
                    }
                })
            }
        },
        fnShortcutHandle() {
            let that = this
            shortcut.hasInstalled({
                success: function(res) {
                    if(res) {
                        that.hasShortcut = true
                    }
                }
            })
        },
        fnChangeFontsize() {
            this.fontSizeIndex++
        },
        fnChangeColor() {
            this.colorIndex++
        },
        /**
         * 上一章节
        */ 
        fnPrevClick() {
            this.remainPage = 0
            this.chapterState = 'next'
            this.fnCallDashboard()
            this.fnPrevChpter()
        },
        /**
         * 下一章节
        */ 
        fnNextClick() {
            this.remainPage = 0
            this.chapterState = 'next'
            this.fnCallDashboard()
            this.fnNextChapter()
        },
        fnListenButtonClick(evt) {
            this.fnButtonClick('listen', evt.detail)
        },
        fnDashboardShare() {
            this.listshare('dashborad')
        },
        /**
         * 切换阅读页配置
         * @param   {Object}    evt      [阅读配置]
        */
        fnChangeSetupJson(evt) {
            if(evt && evt.detail) {
                let params = evt.detail
                const propertyArr = ['bNight', 'bgColor', 'bgColorIndex', 'loadImg', 'fontSize', 'lineheight']
                for(let item in params) {
                    if(propertyArr.indexOf(item) > -1) {
                        this.setupJson[item] = params[item]
                    }
                }
                this.$app.$def.setStorageFile(this, {
                    key: 'setupJson',
                    value: this.setupJson
                })
            }
        },
        fnRouterToDirectory() {
            this.routerurl('/Directory')
        },
        fnGetMenuShowCache() {
            let that = this
            let date = that.fnGetCurrentDate()
            that.fnGetStorage('menuShowCache').then(res => {
                if(res && res === date) {
                    that.hasMenuShow = true
                }
            }) 
        },
        fnSetMenuShowCache() {
            this.hasMenuShow = true
            let date = this.fnGetCurrentDate()
            this.fnSetStorage('menuShowCache', date)
        },
        fnListenPopClose() {
            this.showListenPop = false
            this.listenTask.isExpired = false
        },
        fnListenVideoLoad() {
            this.$broadcast('listenVideoInit')
        },
        fnListeAward() {
            this.fnListeTaskAward('free')
        },
        /**
         * 听书任务领取奖励
         * @param   {Srting}    tag      [奖励类型]
        */
        fnListeTaskAward(tag = 'free') {
            let that = this
            if(tag === 'free' && !that.listenTask.hasFree) {
                return
            }
            if(tag !== 'free' && that.listenTask.remainTimes <= 0) {
                return
            }
            if(!that.listenTask.taskId) {
                return
            }
            that.isListenTaskLoading = true
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2146',
                data: {
                    action: 43,
                    gainRewardType: tag === 'free' ? 1 : 2,
                    taskId: that.listenTask.taskId
                },
                succ: function (res) {
                    that.isListenTaskLoading = false
                    if(res && res.data && res.retCode === 0) {
                        if(res.data.awardTtsTime && that.ttsToken) {
                            that.extraListenTime = new Date().getTime() + res.data.awardTtsTime * 1000
                            that.extraListenSwitch = true
                             if(tag === 'free') {
                                that.listenTask.hasFree = false
                            }
                            if(tag === 'video') {
                                that.listenTask.remainTimes--
                            }
                            that.fnListenPopClose()
                            prompt.showToast({
                                message: res.data.message || '恭喜您获得免费听书'
                            })
                            that.startListen()
                            return
                        }
                    }
                    prompt.showToast({
                        message: '领取失败'
                    })
                },
                fail: function() {
                    that.isListenTaskLoading = false
                }
            })
        },
        /**
         * 听书弹窗展示
        */
        fnListenPopShow() {
            this.showListenPop = true
            this.$app.shenceLog.log(this, 'track', 'PopupExposure', {
                PositionName: '听书弹窗',
                Instruction: this.listenTask.hasFree ? '免费试听' : '激励视频解锁'
            })
        },
        /**
         * 初始化章末红包任务数据
         * @param   {Object}    data      [章末红包数据]
        */
        fnInitCerData(data) {
            if(data.clickCompletedNum === data.awardArray.length) {       // 如果已达到当日最大点击次数不再渲染数据
                return
            }
            if(data.adPositionId) {
                this.aliPayRedVideoId = data.adPositionId;
            }
            this.aliPayRedVideoInfo.aliPayRedVideoSwitch = true;
            this.aliPayRedVideoTactics = {
                userTacticsVo: data.userTactics
            }
            this.aliPayRedTitle = data.taskTitle;
            let nowTime = new Date().getTime();
            if(data.taskSurplusMilli) {
                this.redTaskExpireTime = nowTime + data.taskSurplusMilli;
            }
            this.countTime = 0;
            data.awardArray.forEach((item, index) => {
                item.idx = index                                  // 给每个红包设置红包位序
                item.hasRedAwardRecive = false                    // 给每个红包设置领取状态
            })
            this.chapterEndRedTask = Object.assign({}, this.chapterEndRedTask, data)
        },
        // 加桌延迟展示处理
        fnShortCutShowHandle() {
            if(this.isShortCutShow) {
                this.isShortCutShow = false
                setTimeout(() => {
                    this.isShortCutShow = true
                }, 200)
            }
        },
        /**
         * 章末红包点击事件
         * @param   {Object}    evt      [事件对象]
        */
        fnCerClick(evt) {
            let that = this;
            if(!evt && !evt.detail.idx) {
                return
            }

            let currentIndex = evt.detail.idx
            that.redSelectedIndex = currentIndex;
            let status = that.chapterEndRedTask.awardArray[currentIndex].awardStatus;
            let statusText = status === 0 ? '待领取' : status === 1 ? '待打款' : '已打款';
            let aliPayRedTaskInfo = {
                OperationType: '章末红包任务',
                OperationName: `章末红包第${currentIndex + 1}个${statusText}`,
                TacticsId: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.tacticsId || '',
                TacticsName: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.tacticsName || '',
                SourceId: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.sourceId || '',
                SourceName: that.aliPayRedVideoTactics.userTacticsVo && that.aliPayRedVideoTactics.userTacticsVo.sourceName || '',
                ShuntId: that.aliPayRedVideoTactics.userTacticsVo && (that.aliPayRedVideoTactics.userTacticsVo.ShuntID || that.aliPayRedVideoTactics.userTacticsVo.shuntID) || '',
                ShuntName: that.aliPayRedVideoTactics.userTacticsVo && (that.aliPayRedVideoTactics.userTacticsVo.ShuntName || that.aliPayRedVideoTactics.userTacticsVo.shuntName) || ''
            }
            this.$app.shenceLog.log(that, 'track', 'OperationClick', aliPayRedTaskInfo);

            if(status === 0) {
                if(that.countTime > 0) {
                    return
                }
                that.fnAliPayRedVideo(currentIndex)
            }
            
            if(status === 1) {
                let awardType = that.chapterEndRedTask.awardArray[currentIndex].chapterEndAwardType;
                if(awardType === '1') {
                    that.fnAliPayRedVideoAward(currentIndex)
                    return
                }
                if(that.isZhiFuBaoBind) {
                    that.fnAliPayRedVideoAward(currentIndex)                        // 获取支付宝红包奖励
                } else {
                    that.fnHasInstallPkg('com.eg.android.AlipayGphone').then(res => {
                        if(res === 1) { 
                            that.fnPullAliPay(currentIndex)
                        } else {
                            prompt.showToast({
                                message: '安装支付宝后可发起打款'
                            });
                        }
                    })
                }
            }

            if(status === 2) {
                prompt.showToast({
                    message: '已打款'
                })
            }
        },
        /**
         * 章末支付宝红包激励视频
         * @param   {Number}    currentIndex      [当前红包位序]
        */
        fnAliPayRedVideo(currentIndex) {
            if(this.aliPayRedVideoInfo.isAliPayRedVideoLoading) {
                prompt.showToast({
                    message: '视频加载中.....'
                })
                return
            }
            if(this.isRedTaskReceive) {
                return
            }
            this.redVideoIndex = currentIndex;
            this.aliPayRedVideoInfo.isAliPayRedVideoLoading = true
            setTimeout(() => {
                this.aliPayRedVideoInfo.isAliPayRedVideoLoading = false
            }, 3000)
            this.$broadcast('aliPayRedVideoInit')
        },
        /**
         * 获取支付宝红包奖励
         * @param   {Number}    currentIndex      [当前红包位序]
        */
        fnAliPayRedVideoAward(currentIndex) {
            let that = this
            if(that.chapterEndRedTask.awardArray[currentIndex].hasRedAwardRecive) {
                return
            }
            that.chapterEndRedTask.awardArray[currentIndex].hasRedAwardRecive = true;
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2141',
                data: {
                    taskId: that.chapterEndRedTask.taskId,
                    type: 1,
                    receiveIndex: currentIndex,
                },
                succ: function (res) {
                    if(res && res.data && res.data.code === 0) {
                        that.chapterEndRedTask.clickCompletedNum ++
                        that.chapterEndRedTask.awardArray[currentIndex].awardStatus = 2;
                    } else {
                        that.chapterEndRedTask.awardArray[currentIndex].hasRedAwardRecive = false;
                    }
                    prompt.showToast({
                        message: res.data && res.data.message ||  '领取失败请重试',
                        duration: 1
                    })
                },
                fail: function (code) {
                    that.chapterEndRedTask.awardArray[currentIndex].hasRedAwardRecive = false;    
                }
            })
        },
        /**
         * 红包任务完成处理
         * @param   {Object}    evt               [事件对象]
        */
        fnTaskCompleteHandle(evt) {
            this.countTime = this.chapterEndRedTask.coolingTime
            let count = 0;
            this.chapterEndRedTask.awardArray.forEach((item) => {
                if(item.awardStatus === 0) {
                    count ++
                }
            })
            if(count !== 1) {
                this.taskCoolStartTime = new Date().getTime();
                this.clickCountDownInterval = setInterval(() => {
                    this.fnCountDown();
                }, 1000);
            }
            this.fnReportRedTask(evt);
        },
        /**
         * 判断应用包安装状态
         * @param   {String}    pkgName      [包名]
        */
        fnHasInstallPkg(pkgName) {
            let that = this
            return new Promise((resolve, reject) => {
                if(!pkgName) {
                    resolve(0)
                }
                if(!pkgName) {
                    return
                }
                pkg.hasInstalled({
                    package: pkgName,
                    success: function(data) {
                        if(data.result) {
                            resolve(1)
                        }else {
                            resolve(0)
                        }
                    },
                    fail: function(data, code) {
                        resolve(0)
                    }
                })
            })
        },
        /**
         * 拉起支付宝判断
         * @param   {Number}    currentIndex      [当前红包位序]
        */
        fnPullAliPay(currentIndex) {
            let userId = this.$app.headerJson.userId
            let appId = this.chapterEndRedTask.zfbAppId
            let callbackUrl = this.chapterEndRedTask.callbackUrl
            let redirectUrl = encodeURIComponent(`${callbackUrl}/huodong/free/alipay/shouquan.html`);
            let url = encodeURIComponent(`https://openauth.alipay.com/oauth2/publicAppAuthorize.htm?app_id=${appId}&scope=auth_user&redirect_uri=${redirectUrl}?state=${userId}`);
            let deeplink = `alipays://platformapi/startapp?appId=20000067&url=${url}`;

            this.deeplinkIndex = currentIndex
            this.hasTryPullAliPay = true

            router.push({
                uri: deeplink
            })
        },
        // 倒计时
        fnCountDown() {
            this.countTime --
            if(this.countTime <= 0) {
                this.countTime = 0
                this.taskCoolStartTime = 0;
                clearInterval(this.clickCountDownInterval)
                this.aliPayRedTitle = this.chapterEndRedTask.taskTitle;
            } else {
                this.aliPayRedTitle = `${this.countTime}秒后可再次提现`
            }
        },
        // 支付宝授权状态判断
        fnIsBindAliPay() {
            let that = this;
            let currentIndex = that.deeplinkIndex
            let awardArray = that.chapterEndRedTask.awardArray;
            that.hasTryPullAliPay = false;
            if(awardArray.length && awardArray[currentIndex].awardStatus === 1) {
                that.$app.$def.requestData(that,
                    {
                        interface: '/glory/fastapp/2858',
                        data: {},
                        succ: function (res) {
                            if(res.retCode == 0 && res.data && res.data.nickName) {
                                that.isZhiFuBaoBind = true;
                                that.fnAliPayRedVideoAward(currentIndex);
                            } else {
                                that.isZhiFuBaoBind = false;
                                prompt.showToast({
                                    message: '授权失败无法打款, 请点击重试'
                                })
                            }
                        },
                        error: function (code) {
                        }
                    }
                )  
            }
        },
        /**
         * 上报红包任务完成信息
         * @param   {Object}    adInfo            [视频信息]
        */
        fnReportRedTask(adInfo) {
            let that = this;
            let currentIndex = that.redVideoIndex
            let ecpm = adInfo.detail.ecpm ? adInfo.detail.ecpm : '';
            
            that.isRedTaskReceive = true
            that.$app.$def.requestData(that,
                {
                    interface: '/glory/fastapp/2146',
                    data: {
                        taskId: that.chapterEndRedTask.taskId,
                        ecpm,
                        action: 51,
                        completeIndex: currentIndex
                    },
                    succ: function (res) {
                        that.isRedTaskReceive = false;
                        if(res && res.data && res.data.status === 1) {
                            that.chapterEndRedTask.awardArray[currentIndex].awardStatus = 1;
                            let awardType = that.chapterEndRedTask.awardArray[currentIndex].chapterEndAwardType;
                            if(awardType === '1') {
                                that.fnAliPayRedVideoAward(currentIndex)
                                return
                            }
                            if(that.isZhiFuBaoBind) {
                                that.fnAliPayRedVideoAward(currentIndex)                        // 获取支付宝红包奖励
                            } else {
                                that.fnHasInstallPkg('com.eg.android.AlipayGphone').then(res => {
                                    if(res === 1) { 
                                        that.fnPullAliPay(currentIndex)
                                    } else {
                                        prompt.showToast({
                                            message: '安装支付宝后可发起打款'
                                        });
                                    }
                                })
                            }
                        } else {
                            that.$app.$def.quickappLog([703, {
                                qmap: {
                                    type: 'alipayRedTask'
                                } 
                            }, 'task_fail'], that);
                            prompt.showToast({
                                message: res.data && res.data.msg || '红包过期无法领取'
                            })
                        } 
                    },
                    fail: function (code) {
                        that.isRedTaskReceive = false;    
                    }
                }
            )  
        },
        // 刷新章末支付宝红包任务数据
        fnRefreshAliPayRedTask() {
            let that = this;
            that.$app.$def.requestData(that, {
                interface: '/glory/fastapp/2147',
                data: {
                    action: 51
                },
                succ: function (res) {
                    if(res && res.data && res.data.chapterEndRedTask && JSON.stringify(res.data.chapterEndRedTask) !== '{}') {
                        that.redTaskExpireTime = 0
                        that.fnInitCerData(res.data.chapterEndRedTask);
                    }
                }
            })
        }
    }
</script>