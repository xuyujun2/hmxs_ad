<template>
  <div class="my-feedback-list">
    <div class="my-feedback-empty" if={{!feedbackList.length}}>
      <image class="empty-img" src="https://xsmfdq.kkyd.cn/images/hmxs/my-feedback-empty.png"></image>
      <text class="empty-text">暂无反馈记录</text>
    </div>
    <div class="bar" if={{feedbackList.length}}></div>
    <list class="list" onscrollbottom="fnLoadData" if={{feedbackList.length}}>
      <list-item type="myFeedbackList" class="question-section">
        <div class="question-wrap" for="{{ (questionIndex, questionItem) in feedbackList }}" @click="fnQuestionClick(questionIndex,questionItem)">
          <div class="text-time">
            <text class="text">{{questionItem.feedbackContent}}</text>
            <text class="time">{{formatTime(questionItem.ctime)}}</text>
          </div>
          <stack class="status-arrow-dots">
            <div class="status-arrow">
              <text class="status">{{questionItem.answerStatus == 0 ? '待回复' : '已回复'}}</text>
              <image class="arrow" src="https://xsmfdq.kkyd.cn/images/hmxs/mfb-right-arrow.png"></image>
            </div>
            <div class="red-dots" if="{{questionItem.answerStatus == 1}}"></div>
          </stack>
        </div>
      </list-item>
      <list-item type="feedbackListLoadMore" class="load-section" if="feedbackList && feedbackList.length > 10">
				<progress if="isLoading" type="circular" class="load-circle"></progress>
				<text if="isLoading" class="load-loading">加载中...</text>
				<text if="!isLoading" class="load-more {{canLoadMore ? '' : 'load-more-over'}}">{{canLoadMore ? '下拉加载更多' : '已经到底了'}}</text>
			</list-item>
    </list>
  </div>
</template>
<style lang="less" scoped>
  .my-feedback-list{
    width: 100%;
    height: 100%;
    flex-direction: column;
    .my-feedback-empty{
      width: 100%;
      height: 100%;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      .empty-img{
        width: 320px;
        height: 200px;
      }
      .empty-text{
        font-size: 28px;
        color: #8E8E98;
        margin-top: 32px;
      }
    }
    .bar{
      width: 100%;
      height: 16px;
      background-color: #F5F5F8;
    }
    .list{
      flex: 1;
      .question-section{
        flex-direction: column;
        .question-wrap{
          padding: 32px 32px;
          justify-content: space-between;
          border-bottom-width: 1px; 
          border-bottom-color: rgba(142, 142, 152, 0.2);
          .text-time{
            flex-direction: column;
            justify-content: center;
            align-items: flex-start;
            .text{
              width: 518px;
              height: 45px;
              line-height: 45px;
              font-size: 32px;
              color: #222222;
              lines: 1;
              text-overflow: ellipsis;
            }
            .time{
              height: 33px;
              line-height: 33px;
              font-size: 24px;
              color: #B2B2BD;
              margin-top: 8px;
            }
          }
          .status-arrow-dots{
            .status-arrow{
              align-items: center;
              .status{
                height: 33px;
                line-height: 33px;
                font-size: 24px;
                color: #B2B2BD;
              }
              .arrow{
                width: 24px;
                height: 24px;
              }
            }
            .red-dots{
                width: 18px;
                height: 18px;
                border-radius: 18px;
                background-color: #ff0000;
                border: 2px solid #fff;
                margin-top: 18px;
                margin-left: 64px;
            }
          }
        }
      }
      .load-section {
				height: 40px;
				align-items: center;
				justify-content: center;
				margin-bottom: 30px;
				.load-loading {
					font-size: 22px;
					color: rgba(0, 0, 0, 0.4);
					line-height: 40px;
					text-align: center;
				}
				.load-circle {
					margin-right: 18px;
					color: #F97053;
				}
				.load-more {
					font-size: 22px;
					color: #F97053;
					line-height: 40px;
					text-align: center;
				}
				.load-more-over {
					color: #666666;
				}
			}
    }
  }
</style>
<script>
  import router from '@system.router';  
  import prompt from '@system.prompt'
    
  export default {
    data(){
        return{
          feedbackList:[],
          isLoading: false,
          canLoadMore: true,
          curPage: 1,
          zhichiWebSrc: '',
        }
    },
    onInit () {
        this.$page.setTitleBar({ text: '我的反馈' })
        this.$app.shenceLog.log(this, 'pageShow', '', {
            Title: '我的反馈-列表'
        });
        this.fnLoadData()
    },
    onShow(){
        this.$app.lastOpenPage = ''
        if(this.$app.getAppData('hasSubmitFeedback')){
          this.curPage = 1
          this.feedbackList = []
          this.fnLoadData()
          this.$app.setAppData('hasSubmitFeedback',false)
        }
    },
    // 加载数据
    fnLoadData(){
      let that = this
      if(!that.canLoadMore || that.isLoading) {
        return
      }
      that.isLoading = true;
			that.$app.$def.requestData(that, {
				interface: '/glory/fastapp/2812',
				data: { pageNo: that.curPage },
				succ: function (res) {
					that.isLoading = false;
					if (res.retCode == 0 && res.data && res.data.feedbackList.length > 0) {
              if(that.feedbackList.length >0){
                that.feedbackList = that.feedbackList.concat(res.data.feedbackList)
                that.curPage++;
              }else{
                that.feedbackList = res.data.feedbackList
                that.curPage++;
                that.zhichiWebSrc = res.data.zhichiUrl
              }
					}else {
						that.canLoadMore = false
					}
				},
				error: function (code) {
					that.isLoading = false;
				},
			})
    },
    onHide() {
        // pageLeave(this.$page.path);
    },
    /**
     *  点击问题跳转我的反馈内容
     * @param {Object} questionItem 反馈信息
     * @param {Number} questionIndex 反馈信息索引
     */
    fnQuestionClick(questionIndex, questionItem){
      let params = {
        id: questionItem.id,
        ctime: questionItem.ctime,
        answerTime: questionItem.answerTime,
        answerStatus: questionItem.answerStatus,
        zhichiWebSrc: this.zhichiWebSrc,
      }
      let feedbackAnswerContent = {
        feedbackContent: questionItem.feedbackContent,
        answerContent: questionItem.answerContent,
      }
      this.$app.setAppData('feedbackAnswerContent', feedbackAnswerContent)
      router.push({
          uri: 'MyFeedbackContent',
          params
      })
      if(questionItem.answerStatus == 1){
        questionItem.answerStatus = 2
      }
    },
    // 格式化日期，如月、日、时、分、秒保证为2位数
    formatNumber(n) {
      n = n.toString();
      return n[1] ? n : "0" + n;
    },
    // 转化时间戳
    formatTime(number) {
      let time = new Date(+number);
      let newArr = [];
      let formatArr = ["Y", "M", "D", "h", "m", "s"];
      newArr.push(time.getFullYear());
      newArr.push(this.formatNumber(time.getMonth() + 1));
      newArr.push(this.formatNumber(time.getDate()));

      newArr.push(this.formatNumber(time.getHours()));
      newArr.push(this.formatNumber(time.getMinutes()));
      newArr.push(this.formatNumber(time.getSeconds()));
      let format = "Y-M-D  h:m:s";
      for (let i in newArr) {
        format = format.replace(formatArr[i], newArr[i]);
      }
      return format;
    }
  }
</script>